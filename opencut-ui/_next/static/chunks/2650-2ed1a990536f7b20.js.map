{"version":3,"file":"static/chunks/2650-2ed1a990536f7b20.js","mappings":"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sM,IAGrD,GACED,CAAkB,CAAC,EAAE,GAAKC,CAAe,CAAC,EAJ2B,EAKrED,CAAkB,CAAC,EAAE,GAAKC,CAAe,CAAC,EAAE,CAE5C,CADA,MACO,CACT,MACK,GAAID,IAAuBC,EAChC,OAAO,EAIT,GAAIH,CAAW,CAAC,CALmC,CAKjC,CAEhB,CAFkB,KAEX,CAACC,CAAQ,CAAC,EAAE,CAGrB,GAAIA,CAAQ,CAAC,EAAE,CACb,CADe,MACR,EAKT,IAAMG,EAAmBnQ,OAAOwN,MAAM,CAACuC,CAAW,CAAC,EAAE,CAAC,CAAC,EAAE,CACnDK,EAAgBpQ,OAAOwN,MAAM,CAACwC,CAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,OACnD,CAAKG,GAAD,CAAsBC,GACnBN,EAA4BK,EAAkBC,EACvD,MAF2C,CAAhB,MAAuB,4PC7BlD,2CACA,6BACA,+BACA,kCACA,+BACA,+BACA,8BACA,kCACA,+BACA,2BACA,2BACA,kBAQA,GACA,qBACA,QACA,CAAK,CACL,+BAAsC,CACtC,gCAAuC,CACvC,4BACA,CAAG,CACH,gBACA,KACA,kBACA,aACA,eACA,YACA,iBACA,CAgBA,cAEA,kBACA,aACA,eACA,YACA,iBACA,CAtBA,gCACA,mCACA,GACA,oBACA,sBACA,QAEA,YACA,0GAEA,iDACA,EACA,oCACA,qDACA,EAEA,wBAOA,uBACA,iBACA,iBACA,0BACA,oBACA,cACA,OAA6B,4BAAoC,CACjE,kCACA,wBAEA,OACA,WACA,OACA,MACA,aALA,UAKA,OACA,OACA,CACA,CAWA,cACA,MACA,oBACA,UACA,cAEA,CAUA,aACA,oBAVA,EACA,EAUA,iDAXA,EAYA,SAXA,GAAwB,mBAExB,IACA,8BACA,YACK,GAOL,cACA,CA8IA,kBACA,oBACA,SACA,IAIA,OApHA,sBACA,IAjEA,IAhEA,EAiIA,UACA,4CACA,SACA,sBAEA,UACA,aACA,aACA,aACA,KACA,KACA,cACA,mBACA,OACA,OACA,KACA,KACA,QACA,OACA,cAEA,YACA,EACA,EACA,EACA,EAGA,CACA,CACA,KACA,OACA,OACA,EACA,oBACA,KACA,MACA,SACA,GACA,wBACA,uBACA,QACA,EAAW,EACX,SACA,QA7GA,EA+GA,EA/GA,EAgHA,EACA,cACA,iBACA,GACA,mBACA,EACA,OACA,KACA,EAVA,EA7GA,EACA,OACA,EACA,OACA,OACA,OACA,UAmHA,WACA,EAEA,IACA,uBACA,QACA,YAAoB,WAAqB,IAEzC,MADA,OACA,GACA,KACA,EACA,EACA,EACA,EACA,QAEA,wBAzMA,QADA,EA0MA,IAzMA,wBAIA,kBAHA,GACA,SACA,iBACA,MAqMA,EACA,IACA,gBACA,oBAIA,MADA,UACA,KACA,KACA,EACA,EACA,EACA,EACA,QAEA,iBACA,6BACA,SA3HA,YACA,iBACA,gBACA,mBACA,WACA,uBAEA,OACA,0BACA,YACA,oBACA,OACA,YACA,sBACA,sBACA,UACA,CAAe,CACf,YACA,sBACA,gCACA,EACA,EACA,UAEA,gBACA,cACA,gBACA,eAEA,CACA,OACA,EA6FA,GACA,EACA,EACA,EACA,EAGA,aACA,kDACA,qBAHA,cAIA,mBAA+B,8BAAyC,EACxE,GACA,4EAEA,CACA,QACA,EAKA,sBACA,sBACA,CAAG,EACH,CACA,CACA,cACA,mBACA,gBAEA,CADA,OACA,KACA,YACA,iCACA,yBACA,CAAO,CACP,YACA,iCACA,yBACA,GAEA,yCACA,CACA,gDACA,UAEA,MACA,+BACA,YACA,YACA,GACA,yBACA,qCACA,CACA,qCACA,WACA,cACA,QACA,oBACA,UACA,2BACA,kBACA,UACA,OACA,CAAW,EACX,kCACA,EAAU,OACV,iBAA8B,GAC9B,IADqC,QACrC,OAAgC,EAAO,iBAE7B,EAAO,4BAGjB,gBACA,EACA,UAAgB,EAChB,MACA,wBACA,EACA,EACA,WACA,uBACA,CAAO,CACP,EAEA,CAAG,CACH,kBACA,QAIA,OAHA,eACA,GACA,CAAK,EACL,CACA,CAAG,CACH,oBACA,OACA,gBACA,QACA,CAAO,MAEJ,CACH,iBACA,SACA,YACA,yEAEA,QACA,CACA,EACA,WAAiB,GACjB,UAAgB,GAChB,UAAgB,GAChB,eAAqB,GACrB,YAAkB,GAClB,UAAgB,GAChB,iEAAuE,CACvE,EACA,oBAA0B,EAC1B,eACA,cACA,0BACA,CACA,EACA,OAAa,aACb,kBACA,8BACA,CACA,EACA,aAAmB,YACnB,WACA,EACA,cAAoB,iBACpB,WACA,YACA,+DAEA,UAAuB,UACvB,QACA,SACA,WACA,oCACA,6BACA,EACA,aACA,WACA,cACA,gBACA,6BACA,YACA,yBACA,2BACA,QACA,uBAAkD,IAAc,IAChE,oBACA,YACA,CACA,oCACA,EACA,eAAqB,aAcrB,MALA,CARA,GACA,WACA,gBACA,iBACA,eACA,cACA,aACA,GACA,WACA,YACA,WACA,UACA,EACA,CACA,EACA,eAAqB,iBACrB,MACA,IAAc,CACd,OACA,WACA,wCACA,aACA,WACA,cACA,gBACA,YACA,yBACA,2BACA,QACA,uBAAwD,IAAoB,IAC5E,oBACA,YACA,CACA,qBACA,0BACA,eACA,YACA,kCACA,EACA,WAAiB,YACjB,OAAW,aACX,EACA,YAAkB,aAClB,OAAW,oBACX,EACA,gBAAsB,GACtB,MAAY,aACZ,OACA,WACA,UAAgB,qBAA4B,CAC5C,OACA,CACA,EACA,MAAY,eACZ,OACA,WACA,OACA,yBACA,CACA,EACA,iBAAuB,aACvB,UACA,IACA,OACA,IACA,UACA,aACA,GACA,OACA,oBACA,UACA,2BACA,WACA,CAAI,SACJ,IACA,EAAI,OACJ,UACA,gBACA,kBACA,KACA,CACA,EACA,0BAAgC,YAChC,4BACA,EACA,KAAW,aACX,iBACA,EACA,gBAAsB,iBACtB,gCACA,EACA,aAAmB,eACnB,2BACA,EACA,YAAkB,aAClB,wBACA,EACA,eAAqB,cACrB,kBAAwB,eACxB,gCACA,EACA,WAAiB,eACjB,yBACA,EACA,OAAa,YACb,kBACA,EACA,qBAA2B,iBAC3B,qCACA,EACA,oBAA0B,eAC1B,kCACA,EACA,iBAAuB,eACvB,+BACA,EACA,SAAe,eACf,uBACA,EACA,eAAqB,eACrB,6BACA,EACA,YAAkB,i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GAAqB,WA0CrB,UACA,cACA,MAAgB,EAAmB,SACnC,QADmC,IACnC,sCACA,MACA,OACA,YACA,qBACA,SACA,CAAK,CACL,YACA,oBACA,UACA,GAEA,EACA,CACA,cACA,cACA,wBAAuD,YAAmB,CAC1E,aACA,SACA,UACA,YACA,YACA,EAAyB,GAAsB,IAC/C,UACA,uBACA,YACA,YACA,mBACA,CACA,oBACA,aACA,QACA,+BACA,cACA,CAAS,EACT,WACA,eACA,IACA,CACA,cACA,MAAsB,EAAmB,MACzC,WADyC,IACzC,4BACA,0BACA,eACA,eACA,iBACA,EACA,UACA,aACA,UACA,EACA,QAEA,cACA,EAA4B,EAAmB,EAC/C,EAAmB,aAD4B,CAE/C,GADmB,CACnB,WACA,kBACA,EACA,IACA,EACA,MACA,+DACA,2CACA,2BACA,kBAQA,uBACA,gBACA,wBACA,mBACA,cAsXA,kBACA,UACA,SACA,KACA,oBACA,OACA,CAAK,CACL,CAiBA,kBACA,cACA,aACA,aACA,CA2BA,cACA,iBACA,qBACA,KACA,KACA,uBACA,IACA,CACA,iBACA,gBACA,cACA,eACA,cACA,aACA,OACA,SACA,eAEA,CACA,gBACA,YAAkB,WAAsB,KACxC,WACA,qBACA,KACA,MACA,CACA,CACA,gBACA,YAAkB,WAAsB,KACxC,WACA,qBACA,KACA,MACA,CACA,CACA,gBACA,sBACA,wBACA,0BAEA,UADA,YAEA,IACA,IACA,WACA,IACA,CACA,WACA,GACA,sBACA,kBAGA,QACA,CACA,WACA,CACA,kBACA,iBACA,gBACA,aACA,KACA,eACA,YAAsB,WAA6B,KACnD,WACA,yBACA,YACA,WACA,cACA,cACA,IACA,UAEA,KADA,kBACA,cACA,CACA,CACA,cACA,WACA,QAAoB,WAA6B,IACjD,wBACA,UACA,YACA,MACA,IACA,IACA,WACA,IAEA,yBACQ,WACR,KACA,gBACA,gBACA,CACA,CACA,kBACA,2CACA,kBACA,YACA,oBACA,WACA,iBACA,CACA,kBACA,aACA,iBACA,KAAc,wBAA0B,4BAAoC,EAC5E,EAEA,CACA,oBACA,EACA,EACA,EACA,KAAc,wBAA0B,4BAAoC,EAE5E,CACA,kBACA,qDACA,CACA,cACA,WACA,0BACA,UACA,WACA,UACA,MACA,SACA,CACA,CACA,kBACA,+CACA,UACA,eACA,2BACA,UACA,UACA,MACA,SACA,CACA,CArKA,6CACA,+BACA,oBACA,qBACA,QACA,KACA,uBACA,OACA,CACA,oBACA,gBACA,oCACA,KACA,eACA,cACA,sBACA,wDACA,sBACA,2DACA,KACA,cACA,KACA,SACA,oCACA,CACA,EA6IA,WACA,cACA,QACA,OACA,cACA,WACA,mBACA,aACA,cACA,IACA,gCACA,UAKA,GAJA,UACA,cACA,cACA,QACA,UACA,2BACA,aACA,UACA,UACA,MACA,CACA,CACA,qBACA,SACA,CAAI,SACJ,8BACA,EAAI,OACJ,GACA,CACA,CACA,cACA,IACA,gBACA,sBACA,SACA,CAAI,SACJ,8BACA,CACA,CACA,gBACA,aACA,kBACA,8BACA,sBACA,QACA,CAAG,CACH,CACA,cACA,OAAW,8BACX,CACA,gBACA,gBACA,WAMA,OALA,GACA,aACA,uCACA,2BACA,YACA,CACA,CACA,gBACA,IACA,iBACA,YACA,iBACA,QACA,QACA,SACA,IACA,WACA,IACA,CACA,KAAW,gBACX,cAD+C,EAC/C,YACA,cACA,CACA,iBACA,qBACA,KACA,KACA,uBACA,IACA,CACA,iBACA,gBACA,UACA,QACA,eACA,aACA,aACA,UACA,QACA,CACA,cACA,gBACA,eACA,YACA,gBACA,gBACA,aACA,iBACA,MACA,cACA,MACA,SACA,cACA,MACA,CACA,CACA,UAEA,aACA,OACA,oCAEA,UACA,0BACA,gBACA,uBAEA,oBAEA,YAEA,SACA,YAEA,OADA,aAEA,sBACA,WACA,qBACA,gBACA,uBACA,CACA,gBACA,gBACA,aACA,WACA,cACA,UAEA,OADA,aAEA,sBACA,SACA,CACA,WACA,EACA,EACA,EACA,EACA,EACA,GAEA,MACA,OACA,SACA,EAAI,IACJ,KACA,YACA,WACA,WACA,OACA,UACA,EAeA,OAdA,GACA,WACA,UACA,eACA,MACA,MACA,MACA,EACA,eACA,YACA,gBACA,gBACA,aACA,iBACA,IACA,CACA,oBACA,6BACA,gBAnXA,KACA,aACA,4CACA,SACA,uBACA,uBACA,oCACA,uBACA,CAAW,EACX,MACA,CACA,WACA,UAEA,OADA,SACA,CACA,EAoWA,iBACA,MAt1BA,cACA,SACA,OACA,kBACA,CACA,yBAIA,GAHA,QACA,gBACA,mBACA,GACA,YACA,8BACA,EACA,iGAEA,CACA,eACA,oBACA,mBAq0BA,yBACA,MAEA,OACA,KACA,2CACA,YAEA,OACA,SACA,cACA,EALA,2BAOA,MACA,OACA,SACA,EAAI,IACJ,KACA,YACA,WACA,WACA,OACA,UACA,EA2CA,OA1CA,OACA,WACA,WACA,YACA,6BACA,gBACA,mBACA,CACA,kBACA,OACA,oCAEA,UACA,0BACA,gBACA,uBAEA,oBAEA,YAEA,SACA,YAEA,OADA,aAEA,sBACA,WACA,qBACA,gBACA,uBACA,CAAK,CACL,YACA,eACA,aACA,UACA,qBACA,GACA,sBACA,QACA,CACA,GAEA,IACA,CACA,sBAEA,eADA,gBACA,QAEA,QADA,UACA,QACA,qBACA,KACA,KACA,uBACA,IACA,CACA,iBACA,gBACA,cACA,QAAmB,WAAuB,KAC1C,KAAe,gBAAoC,CAEnD,QADA,KADmD,OACnD,EACA,QACA,qBACA,KACA,KACA,uBACA,IACA,CACA,iBACA,gBACA,UACA,KACA,eACA,cACA,SACA,EACA,EACA,EACA,EACA,EACA,aAEA,cACA,OACA,EACA,eACA,GACA,YACA,WACA,WACA,OACA,UACA,CAAqB,CACrB,IAEA,SACA,OACA,EACA,cACA,kBACA,GACA,YACA,WACA,eACA,OACA,UACA,CAAqB,CACrB,IAEA,CACA,CACA,SACA,CACA,iBACA,eACA,cACA,qBACA,cACA,OACA,EACA,eACA,GACA,YACA,WACA,WACA,OACA,UACA,CAAa,CACb,IAEA,SACA,OACA,EACA,cACA,kBACA,GACA,YACA,WACA,eACA,OACA,UACA,CAAa,CACb,IAEA,CACA,CACA,gBACA,iBACA,CACA,gBACA,iBACA,CACA,gBACA,4BAAoC,UAAgB,CACpD,CACA,gBACA,eACA,YAAkB,WAAkB,IACpC,0BACA,QACA,CACA,gBACA,2BACA,CACA,gBACA,QACA,CAmGA,aACA,YACA,oHAEA,CACA,WACA,EACA,EACA,EACA,EACA,EACA,EACA,GAEA,IA0aA,EA1aA,SACA,uBACA,8BACA,sBACA,gCACA,yBACA,cACA,eACA,oCACA,oBACA,gBACA,wBACA,iBACA,gBA6ZA,EA7ZA,KA8ZA,cACA,sBACA,KA7hBA,EA6hBA,EA7hBA,EA6hBA,KA7hBA,EA6hBA,EA7hBA,EA6hBA,EA5hBA,eACA,WACA,OACA,UACA,SACA,IACA,SACA,WACA,WACA,OACA,UACA,EAAW,CACX,EAEA,aACA,QACA,iBACA,SACA,OACA,EACA,MADA,2BAIA,SACA,OACA,EACA,EADA,0BAGA,SACA,6BACA,SACA,OACA,EAEA,EAFA,aAIA,EACA,EACA,EAGA,SAGA,GAFA,iBAEA,MADA,gBAEA,YACA,sKAEA,eACA,SACA,OAEA,IADA,aACA,MAEA,SACA,OACA,EACA,EADA,aACA,MAEA,SACA,OACA,EACA,EADA,aACA,MAEA,SACA,OAEA,IADA,aACA,MAEA,SACA,WACA,SACA,OACA,EACA,EADA,aACA,MAEA,SACA,UACA,SACA,uBACA,SACA,UACA,SACA,MACA,SACA,uCACA,SACA,yBACA,SACA,OAEA,IADA,aACA,MAEA,CACA,CACA,QA6bA,CACA,iCACA,YACA,IACA,GACA,WACA,UACA,SACA,SACA,WACW,CACX,SAEA,IACA,QACA,OACA,UAGA,IADA,uCAEA,aACA,gCACA,WACA,UACA,MACA,QACQ,IACR,QACA,CACA,QACA,EA7bA,CACA,kBAEA,MADA,cACA,MACA,yBACA,yBACA,kCACA,CA6BA,oBACA,gBACA,aAEA,sBACA,WACA,qBACA,UACA,WACA,wBACA,+BACA,CACA,mBACA,WACA,sBACA,OACA,kBACA,GACA,CACA,CAAG,EACH,WACA,SACA,yBACA,SACA,aACA,kBACA,YACA,CAAW,CACX,CAAK,CACL,yBACA,aACA,kCACA,KACA,uBACA,mBACA,QACA,YACA,mBACA,CAAe,CACf,YACA,iBACA,GAEA,IACA,EAAQ,IACR,IACA,iCACA,OACA,YACA,mBACA,CAAW,CACX,YACA,iBACA,GAEA,IACA,kBACA,gBACA,QACA,CAAS,CACT,CACA,CAAK,CACL,iBACA,0BACA,CACA,QACA,OACA,kBACA,gBACA,CAAS,CACT,CACA,CAAK,CACL,kBACA,2BACA,CACA,QACA,OACA,kBACA,iBACA,CAAS,CACT,CACA,CACA,CAAG,CACH,CACA,cACA,YAOA,mBACA,SACA,KACA,IACA,IACA,iBACA,IAXA,EAWA,IACA,MAXA,IAAW,KADX,EAYA,YACA,cACA,YACA,oFAEA,iBACA,KACA,aACA,YACA,CAAc,qBAAyB,CACvC,KAEA,gCACA,CACA,cAzBW,EACX,OACA,CAyBA,EACA,EACA,EACA,EACA,WACA,CACA,yBACA,gBACA,WACA,YACA,CAAc,gBAAwB,CACtC,UAEA,CACA,WACA,UACA,WACA,qBACA,SAA0B,iBAC1B,UACA,QACA,CACA,GACA,CAAO,CACP,yBACA,aACA,OACA,EACA,EACA,IAEA,EACA,EACA,KACA,EACA,IAEA,GACA,CAAO,CACP,kBAcA,IAbA,KACA,aACA,OACA,EACA,EACA,IAEA,EACA,EACA,KACA,EACA,IAEA,IAA+B,YAC/B,EACA,EACA,OACA,eACA,GAEA,CAAO,CACP,kBAEA,IADA,KAEA,cACA,kCACA,YAGA,aACA,CACA,EAEA,CACA,cACA,YACA,wQAGA,OADA,4BACA,CACA,CACA,iBACA,kCAAoE,IAAO,IAC3E,mBACA,oBACA,cAA2B,IAAU,KACrC,WACA,WACA,eACA,CAEA,OADA,WACA,CACA,CACA,YACA,EACA,EACA,EACA,EACA,EACA,GAWA,MALA,QAJA,GACA,gCACA,EACA,SAEA,OACA,aACA,gBAGA,CAyLA,eACA,aACA,KACA,KACA,KACA,oCACA,OACA,OACA,yBACA,sBACA,OAEA,CACA,mBAuFA,cACA,MACA,CACA,OACA,YACA,SACA,UACA,aACA,WACK,CACL,gBACA,cAjGA,cACA,cACA,UACA,GACA,qCACA,CACA,QACA,cACA,WACA,IACA,gBACA,eACA,YACA,WACA,KAEA,CACA,SACA,UACA,OAEA,KADA,WAEA,IACA,EACA,sBACA,QACA,QAEA,KADA,UAEA,QACA,QACA,SACA,QACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,SACA,OACA,cACA,YACA,QACA,SACA,QACA,cACA,UACA,QACA,QAEA,KADA,WAEA,IACA,EACA,KACA,iBACA,QACA,QACA,kBACA,KACA,QACA,wBACA,CACA,qBACA,QAvQA,qBACA,UACA,QACA,sBACA,MACA,SACA,wBACA,MACA,UACA,EACA,EACA,EACA,wBAEA,MACA,SACA,gCACA,MACA,SACA,yBACA,MACA,UACA,0BACA,MACA,SACA,yBACA,MACA,UACA,0BACA,MACA,SACA,2BACA,MACA,UACA,2BACA,MACA,SACA,4BACA,MACA,UACA,6BACA,MACA,SACA,uBACA,MACA,CACA,IACA,gCACA,WACA,IAEA,oBAEA,OADA,iBACA,GACA,YArTA,EAsTA,EAtTA,EAsTA,EAtTA,EAsTA,EArTA,YACA,WACA,4BACA,eArrCA,KACA,MACA,cACA,gBACA,aACA,CAEA,IADA,cAEA,YACA,8BACA,KACA,2GAEA,OAEA,oBACA,oBACA,kBAEA,QACA,EAiqCA,oBACA,WACA,MACA,OACA,mBACA,EAAM,IACN,6BACA,WACA,OACA,WACA,eACA,CAAO,CACP,YACA,eACA,EAEA,EAAI,IACJ,EACA,SACA,MACA,EACA,iCA8RA,KACA,SAKA,OAJA,OAEA,aADA,aACA,aACA,MACA,GACA,QACA,OACA,KACA,SACA,mBACA,OACA,eACA,KACA,SACA,OACA,OACA,aACA,cACA,SACA,KACA,SACA,mBACA,OACA,eACA,KACA,SACA,mBACA,OACA,eACA,KACA,SACA,mBACA,OACA,IACA,KACA,qBACA,0BAEA,KACA,SACA,mBACA,OACA,cACA,CACA,KACA,SACA,gBACA,SACA,gBAEA,GADA,cACA,QACA,SACA,kCACA,KACA,SAEA,GADA,cACA,8BACA,yBACA,mCACA,KACA,SACA,QACA,QACA,QACA,YACA,kMAEA,SACA,eACA,KACA,UACA,gBACA,KACA,SACA,WACA,KACA,UACA,WACA,KACA,SACA,sBACA,wBACA,wCACA,KACA,SACA,CACA,GADA,aACA,QACA,SACA,oCACA,EACA,EAqHA,QADA,kCAEA,IACA,WACA,UACA,eACA,CACA,4CACA,UACA,gBACA,KACA,CACA,CAKA,OAJA,cACA,WACA,YACA,eACA,yBACA,CACA,GAYA,QACA,CACA,iBAAuB,eACvB,YASA,OARA,OACA,YACA,eACA,CAAK,CACL,YACA,MACA,GAEA,MACA,EACA,0BAAgC,eAGhC,OADA,GADA,QACA,MACA,MACA,EACA,uBAA6B,eAC7B,aACA,4CACA,aACA,CAEA,OADA,YACA,CACA,EACA,6BAAmC,YACnC,cACA,EACA,aAAmB,eACnB,iCACA,eAjnDA,EACA,EACA,EACA,EACA,GAEA,gBACA,YACA,eACA,SACA,aACA,cAEA,EACA,UAGA,OAFA,2BACA,SAmmDA,GAnmDA,KACA,oBACA,CAsFA,gBACA,wBACA,uBACA,mBACA,OACA,oCACA,IAtIA,EAgGA,IAyBA,EAEA,EAWA,cACA,cACA,OACA,iBACA,IAEA,CACA,YACA,qJAEA,QACA,aACA,qBACA,oBACA,IACA,IACA,WACA,MACA,SAEA,OADA,SAk/CA,GAl/CA,KACA,kBACA,CAAY,SACZ,GACA,oBACA,UACA,0BACA,CACA,IACA,UAaA,OAZA,aACA,IACA,aACA,IACA,gBACA,IACA,WACA,CAAkB,SAClB,IACA,CACA,EACA,YACA,kBACA,CAEA,OADA,KACA,IACA,EAAY,OACZ,GACA,CACA,CACA,8BACA,2BACA,IACA,UAYA,OAXA,mBACA,IACA,aAEA,CADA,KACA,cACA,IACA,WACA,CAAY,SACZ,IACA,CACA,CAAS,IACT,mBACA,CAEA,YADA,aAEA,SACA,cADA,YAGA,qBAEA,SADA,iBAEA,WACA,WACA,YACA,YACA,iBACA,0BACA,2BACA,QAEA,IADA,QACA,IAIA,OAHA,wBACA,eACA,CAAS,EACT,mBACA,CACA,oBACA,OACA,MACA,qBACA,2BACA,gBACA,oBAEA,oBACA,OACA,MACA,qBACA,2BACA,gBACA,oBAEA,4BACA,OACA,gBACA,MACA,2BACA,gBACA,oBAEA,0CACA,2CACA,kCACA,gBACA,2CACA,4CACA,2CACA,4CACA,6CACA,6CACA,8BACA,gBACA,+BACA,gBACA,yCACA,8CACA,OACA,2BACA,MACA,gBACA,oBAEA,KA5QA,QADA,EA6QA,IA5QA,wBAIA,kBAHA,GACA,SACA,iBACA,OAyQA,MACA,gBACA,EACA,OACA,IACA,cACA,GAEA,2BACA,gBACA,qBACA,cAEA,GACA,mCACA,4BAEA,gBAvMA,GACA,IACA,IAxBA,EAgBA,EAEA,EAzCA,EAgBA,EAEA,EACA,EA4BA,eAA4C,YAAc,CAC1D,CAAM,SACN,OA1BA,EA0BA,cAXA,2BACA,IACA,IACA,MACA,cAlBA,cACA,UACA,kBAEA,kBAEA,IACA,gCACA,gBACA,kBACA,CAAU,SACV,IACA,CACA,EAKA,GACA,mBAOA,CACA,OAnDA,EAmDA,EApCA,2BACA,IACA,IACA,MACA,KACA,kCAnBA,cACA,OACA,OACA,0BACA,SACA,IACA,0BAEA,kBAEA,cACA,iBACA,uCACA,EAMA,GACA,mBA+BA,EAgMA,GAEA,qBADA,SAEA,OAlMA,EAkMA,EAlMA,EAkMA,UA1KA,2BACA,IACA,IACA,MACA,QACA,cA5BA,cACA,WACA,oBACA,uBAEA,IACA,gCACA,mBACA,CAAY,SACZ,KACA,MACA,CAEA,YACA,EAAQ,IACR,IACA,gCACA,gBACA,kBACA,CAAU,SACV,IACA,CACA,EAMA,GACA,+BAsKA,GADA,WAEA,GACA,wBACA,CACA,cACA,YACA,6HAEA,UACA,CACA,Q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HAEA,CACA,cACA,OACA,GACA,IACA,aACA,mBACA,CAAO,CACP,IACA,IACA,IACA,IACA,IACA,IACA,GACA,CAAK,CACL,IACA,gBACA,CAAG,CACH,6BAYA,EACA,kEACA,sBACA,cACA,mBACA,iCACA,CACA,8DAAoE,CACpE,EACA,cAAoB,eACpB,MACA,4DACA,GACA,IACA,gBACA,gBACA,gBAEA,oBACA,OA9BA,gBACA,MACA,4DACA,OACA,WACA,sBACA,WACA,gBACA,gBACA,CACA,EAoBA,WACA,EACA,WAAiB,aACjB,UACA,MACA,IACA,8BACA,EAAI,OACJ,MACA,MACA,OACA,CACA,EACA,YAAkB,eAClB,oBACA,CAEA,EAFA,EAGA,gBAFA,kBAGA,sBACA,EACA,GACA,OACA,KACA,WACA,EACA,aAAmB,aACnB,4BACA,EACA,SAAe,eACf,iDACA,WACA,qBACA,EACA,gDACA,EACA,iCACA,gBACA,MACA,aACA,MACA,EACA,kDACA,CACA,cACA,YACA,eACA,GAEA,cACA,SACA,cACA,YACA,gBACA,6CACA,CAAS,CACT,CACA,EACA,eAAqB,eACrB,sBACA,gCACA,iCACA,QACA,KACA,eAEA,SACA,cACA,UACA,gDACA,6CACA,CAAS,CACT,OACM,iBACN,EACA,SAAe,eACf,GACA,oBACA,oBACA,UACA,sBACA,CACA,WACA,qBACA,WACA,cACA,UACA,gDACA,8CACA,2CACA,cACA,iCACA,gBACA,OACA,eACA,kCACA,iBACA,OACA,YACA,oDACA,WACA,kDACA,6CACA,CAAK,CACL,CACA,EACA,eAAqB,eACrB,sBACA,MACA,4BACA,SACA,GACA,uCACA,KACA,OACA,cACA,UACA,+CACA,CAAO,CACP,EAAM,YACN,EACA,kBAAwB,aACxB,QACA,EACA,yBAA+B,eAC/B,WACA,EACA,cAAoB,iBACpB,8BACA,EACA,eAAqB,YACrB,oCACA,EACA,SAAe,0JCxMC7zB,qCAAAA,aATU,OASnB,SAASA,EAAcxE,CAAY,CAAEmP,CAAc,EACxD,GAAoB,UAAhB,OAAOnP,EA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A,EAlIA,cACE,cAAoB,YACtB,cACA,CACA,EAAE,IACF,WACA,SACE,eAAoB,YACtB,gBACA,CACA,CACA,SACA,KACA,IACA,OACA,IACA,KACA,KACA,KACA,KACA,gDACA,oDACA,qDACA,cACA,eAAqC,UAAgB,CACrD,+BACA,kBACA,KACA,6BACA,YACA,MACA,MACA,CACA,CACA,cAGA,GAFA,KACA,KACA,GACA,eACA,KACA,GACA,eACA,CACA,UACA,WACA,kBACA,CACA,CACA,SACA,KACA,IACA,KACA,aACA,YAEA,sBAGA,CACA,aAEA,GADA,KACA,GACA,uBACA,IACA,SACA,IACA,GACA,KACA,GACA,MACA,KACA,MACA,KACA,QACA,IACA,GAEA,IADA,KAEA,OACA,UACA,CACA,2BAGA,CACA,iBACA,yBACA,gBACA,kBACA,QACA,qBAGA,GADA,mBACA,sBACA,aACA,KACA,KACA,OACA,CACA,eACA,IACA,EAAgB,SAChB,MACA,CACA,qBACA,CACA,UACA,WACA,EACA,EACA,eAEA,IACA,CACA,CACA,OACA,EAAU,OACV,OACA,IACA,IACA,CAEA,CACA,EAAM,OACN,EACA,IACA,IACA,CACA,CACA,CAEA,wBACA,aACA,IACA,OACA,uCACA,yBACA,UACA,oBACA,aACA,mBACA,CACA,EAAE,IACF,aACA,MACA,EACA,gBACA,eACA,mBACA,CAAG,GACH,CACA,uBAA6B,GAC7B,4BAAkC,GAClC,sBAA4B,GAC5B,yBAA+B,GAC/B,oBAA0B,MAC1B,+BAAqC,GACrC,yBAA+B,aAC/B,eACA,EACA,yBAA+B,aAC/B,WACA,cACA,mHAEA,yBACA,EACA,kCAAwC,YACxC,QACA,EACA,eAAqB,aACrB,UACA,OACA,OACA,OACA,QACA,KACA,SACA,GACA,CACA,QACA,IACA,IACA,UACA,EAAI,OACJ,GACA,CACA,EACA,uBAA6B,YAC7B,IACA,EACA,0BAAgC,eAChC,UACA,OACA,OACA,OACA,OACA,OACA,KACA,SACA,GACA,CACA,QACA,IACA,IACA,UACA,EAAI,OACJ,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","sources":["webpack://_N_E/../../../src/client/components/router-reducer/create-initial-router-state.ts","webpack://_N_E/../../../src/client/components/router-reducer/apply-flight-data.ts","webpack://_N_E/../../../src/shared/lib/page-path/ensure-leading-slash.ts","webpack://_N_E/../../../src/client/react-client-callbacks/report-global-error.ts","webpack://_N_E/../../../src/client/components/router-reducer/fill-cache-with-new-subtree-data.ts","webpack://_N_E/../../node_modules/.bun/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_interop_require_default.js?a492","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/lib/metadata/metadata-constants.js","webpack://_N_E/../../../src/client/components/unstable-rethrow.browser.ts","webpack://_N_E/../../../src/client/components/errors/graceful-degrade-boundary.tsx","webpack://_N_E/../../src/client/has-base-path.ts","webpack://_N_E/../../../src/client/components/match-segments.ts","webpack://_N_E/../../../src/client/components/router-reducer/set-cache-busting-search-param.ts","webpack://_N_E/../../../src/shared/lib/is-plain-object.ts","webpack://_N_E/../../../src/client/components/is-next-router-error.ts","webpack://_N_E/../../../src/client/components/router-reducer/create-router-cache-key.ts","webpack://_N_E/../../../src/client/components/app-router-announcer.tsx","webpack://_N_E/../../../src/client/request/search-params.browser.prod.ts","webpack://_N_E/../../../src/shared/lib/router/utils/cache-busting-search-param.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react-dom/client.js","webpack://_N_E/../../../src/client/components/links.ts","webpack://_N_E/../../../src/client/components/bfcache.ts","webpack://_N_E/../../../src/shared/lib/utils/warn-once.ts","webpack://_N_E/../../../src/client/request/params.browser.prod.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/scheduler/index.js","webpack://_N_E/../../../src/client/components/router-reducer/prefetch-cache-utils.ts","webpack://_N_E/../../../src/shared/lib/router/utils/disable-smooth-scroll.ts","webpack://_N_E/../../../src/client/components/router-reducer/is-navigating-to-new-root-layout.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react/cjs/react.production.js","webpack://_N_E/../../../src/shared/lib/router/utils/interception-routes.ts","webpack://_N_E/../../../src/client/components/layout-router.tsx","webpack://_N_E/../../../src/client/components/router-reducer/reducers/get-segment-value.ts","webpack://_N_E/../../../src/client/components/app-router-headers.ts","webpack://_N_E/../../../src/client/components/http-access-fallback/error-boundary.tsx","webpack://_N_E/../../../src/client/components/router-reducer/ppr-navigations.ts","webpack://_N_E/../../../src/client/components/router-reducer/aliased-prefetch-navigations.ts","webpack://_N_E/../../../src/shared/lib/router/utils/app-paths.ts","webpack://_N_E/../../../src/client/components/metadata/async-metadata.tsx","webpack://_N_E/../../../src/client/components/router-reducer/reducers/refresh-reducer.ts","webpack://_N_E/../../../src/client/components/router-reducer/invalidate-cache-by-router-state.ts","webpack://_N_E/../../../src/client/components/router-reducer/refetch-inactive-parallel-segments.ts","webpack://_N_E/../../../src/client/components/redirect.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/lib/is-error.js?b157","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react/jsx-runtime.js","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/build/polyfills/polyfill-module.js?b24f","webpack://_N_E/../../../src/client/components/router-reducer/handle-mutable.ts","webpack://_N_E/../../../src/client/components/redirect-boundary.tsx","webpack://_N_E/../../src/client/normalize-trailing-slash.ts","webpack://_N_E/../../../src/client/components/unauthorized.ts","webpack://_N_E/../../node_modules/.bun/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_class_private_field_loose_key.js","webpack://_N_E/../../src/client/app-globals.ts","webpack://_N_E/../../../src/shared/lib/encode-uri-path.ts","webpack://_N_E/../../../src/client/components/router-reducer/compute-changed-path.ts","webpack://_N_E/../../../src/client/components/router-reducer/reducers/prefetch-reducer.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react/cjs/react-jsx-runtime.production.js","webpack://_N_E/../../../src/shared/lib/router/utils/add-path-prefix.ts","webpack://_N_E/../../src/client/remove-base-path.ts","webpack://_N_E/../../src/client/app-find-source-map-url.ts","webpack://_N_E/../../../src/client/components/use-action-queue.ts","webpack://_N_E/../../../src/client/components/router-reducer/clear-cache-node-data-for-segment-path.ts","webpack://_N_E/../../../src/shared/lib/hash.ts","webpack://_N_E/../../../src/shared/lib/router/utils/is-bot.ts","webpack://_N_E/../../../src/shared/lib/lazy-dynamic/bailout-to-csr.ts","webpack://_N_E/../../../src/client/components/client-segment.tsx","webpack://_N_E/../../node_modules/.bun/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_interop_require_wildcard.js?d1e3","webpack://_N_E/../../../src/client/components/navigation.ts","webpack://_N_E/../../../src/lib/metadata/generate/icon-mark.tsx","webpack://_N_E/../../../src/client/components/handle-isr-error.tsx","webpack://_N_E/../../../src/shared/lib/hooks-client-context.shared-runtime.ts","webpack://_N_E/../../../src/shared/lib/is-thenable.ts","webpack://_N_E/../../../src/client/components/router-reducer/router-reducer.ts","webpack://_N_E/../../../src/client/request/params.browser.ts","webpack://_N_E/../../../src/client/components/router-reducer/reducers/find-head-in-cache.ts","webpack://_N_E/../../../src/client/components/error-boundary.tsx","webpack://_N_E/../../node_modules/.bun/@swc+helpers@0.5.15/node_modules/@swc/helpers/esm/_class_private_field_loose_base.js","webpack://_N_E/../../src/client/app-bootstrap.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/build/polyfills/process.js","webpack://_N_E/../../../src/client/components/router-reducer/reducers/server-patch-reducer.ts","webpack://_N_E/../../../src/client/components/metadata/metadata-boundary.tsx","webpack://_N_E/../../../src/client/components/not-found.ts","webpack://_N_E/../../../src/client/react-client-callbacks/on-recoverable-error.ts","webpack://_N_E/../../src/client/assign-location.ts","webpack://_N_E/../../../src/shared/lib/router/utils/html-bots.ts","webpack://_N_E/../../../src/client/components/navigation-untracked.ts","webpack://_N_E/../../../src/shared/lib/server-inserted-html.shared-runtime.tsx","webpack://_N_E/../../../src/client/components/router-reducer/create-href-from-url.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.production.js","webpack://_N_E/../../../src/client/components/router-reducer/fetch-server-response.ts","webpack://_N_E/../../src/client/app-call-server.ts","webpack://_N_E/../../../src/client/components/unstable-rethrow.ts","webpack://_N_E/../../../src/client/components/router-reducer/reducers/hmr-refresh-reducer.ts","webpack://_N_E/../../../src/client/components/router-reducer/should-hard-navigate.ts","webpack://_N_E/../../../src/shared/lib/router/utils/remove-trailing-slash.ts","webpack://_N_E/../../../src/client/components/forbidden.ts","webpack://_N_E/../../src/client/add-base-path.ts","webpack://_N_E/../../../src/client/components/nav-failure-handler.ts","webpack://_N_E/../../../src/shared/lib/utils/reflect-utils.ts","webpack://_N_E/../../src/client/app-next.ts","webpack://_N_E/../../../src/client/components/http-access-fallback/http-access-fallback.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react-server-dom-webpack/client.browser.js","webpack://_N_E/../../src/client/app-index.tsx","webpack://_N_E/../../src/client/app-build-id.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react-dom/cjs/react-dom.production.js","webpack://_N_E/../../../src/shared/lib/router/utils/path-has-prefix.ts","webpack://_N_E/../../../src/client/components/app-router-instance.ts","webpack://_N_E/../../../src/shared/lib/segment.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react/index.js","webpack://_N_E/../../../src/client/components/builtin/global-error.tsx","webpack://_N_E/../../../src/client/components/redirect-status-code.ts","webpack://_N_E/../../../src/shared/lib/server-reference-info.ts","webpack://_N_E/../../../src/shared/lib/invariant-error.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/process/browser.js","webpack://_N_E/../../src/client/flight-data-helpers.ts","webpack://_N_E/../../../src/client/components/router-reducer/reducers/server-action-reducer.ts","webpack://_N_E/../../../src/client/components/render-from-template-context.tsx","webpack://_N_E/../../../src/client/components/app-router.tsx","webpack://_N_E/../../../src/shared/lib/app-router-context.shared-runtime.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/react-dom/index.js","webpack://_N_E/../../../src/client/react-client-callbacks/error-boundary-callbacks.ts","webpack://_N_E/../../../src/shared/lib/router/utils/parse-path.ts","webpack://_N_E/../../../src/client/components/unresolved-thenable.ts","webpack://_N_E/../../src/client/app-webpack.ts","webpack://_N_E/../../../src/client/components/segment-cache.ts","webpack://_N_E/../../../src/client/components/router-reducer/handle-segment-mismatch.ts","webpack://_N_E/../../../src/client/components/navigation.react-server.ts","webpack://_N_E/../../../src/client/components/router-reducer/fill-lazy-items-till-leaf-with-head.ts","webpack://_N_E/../../../src/client/components/redirect-error.ts","webpack://_N_E/../../../src/client/components/promise-queue.ts","webpack://_N_E/../../../src/client/components/router-reducer/reducers/restore-reducer.ts","webpack://_N_E/../../../src/client/components/client-page.tsx","webpack://_N_E/../../../src/client/request/search-params.browser.ts","webpack://_N_E/../../../src/client/components/router-reducer/router-reducer-types.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/build/deployment-id.js?4152","webpack://_N_E/../../../src/client/components/router-reducer/invalidate-cache-below-flight-segmentpath.ts","webpack://_N_E/../../../src/client/components/router-reducer/reducers/navigate-reducer.ts","webpack://_N_E/../../../src/client/components/router-reducer/reducers/has-interception-route-in-current-tree.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/compiled/scheduler/cjs/scheduler.production.js","webpack://_N_E/../../../src/client/components/router-reducer/apply-router-state-patch-to-tree.ts","webpack://_N_E/../../../src/shared/lib/head-manager-context.shared-runtime.ts","webpack://_N_E/../../node_modules/.bun/next@15.4.5+6dbf9a050bc9aadb/node_modules/next/dist/lib/require-instrumentation-client.js?e0d1"],"sourcesContent":["import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { FlightDataPath } from '../../../server/app-render/types'\n\nimport { createHrefFromUrl } from './create-href-from-url'\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head'\nimport { extractPathFromFlightRouterState } from './compute-changed-path'\nimport {\n  createSeededPrefetchCacheEntry,\n  STATIC_STALETIME_MS,\n} from './prefetch-cache-utils'\nimport { PrefetchKind, type PrefetchCacheEntry } from './router-reducer-types'\nimport { addRefreshMarkerToActiveParallelSegments } from './refetch-inactive-parallel-segments'\nimport { getFlightDataPartsFromPath } from '../../flight-data-helpers'\n\nexport interface InitialRouterStateParameters {\n  navigatedAt: number\n  initialCanonicalUrlParts: string[]\n  initialParallelRoutes: CacheNode['parallelRoutes']\n  initialFlightData: FlightDataPath[]\n  location: Location | null\n  couldBeIntercepted: boolean\n  postponed: boolean\n  prerendered: boolean\n}\n\nexport function createInitialRouterState({\n  navigatedAt,\n  initialFlightData,\n  initialCanonicalUrlParts,\n  initialParallelRoutes,\n  location,\n  couldBeIntercepted,\n  postponed,\n  prerendered,\n}: InitialRouterStateParameters) {\n  // When initialized on the server, the canonical URL is provided as an array of parts.\n  // This is to ensure that when the RSC payload streamed to the client, crawlers don't interpret it\n  // as a URL that should be crawled.\n  const initialCanonicalUrl = initialCanonicalUrlParts.join('/')\n  const normalizedFlightData = getFlightDataPartsFromPath(initialFlightData[0])\n  const {\n    tree: initialTree,\n    seedData: initialSeedData,\n    head: initialHead,\n  } = normalizedFlightData\n  // For the SSR render, seed data should always be available (we only send back a `null` response\n  // in the case of a `loading` segment, pre-PPR.)\n  const rsc = initialSeedData?.[1]\n  const loading = initialSeedData?.[3] ?? null\n\n  const cache: CacheNode = {\n    lazyData: null,\n    rsc,\n    prefetchRsc: null,\n    head: null,\n    prefetchHead: null,\n    // The cache gets seeded during the first render. `initialParallelRoutes` ensures the cache from the first render is there during the second render.\n    parallelRoutes: initialParallelRoutes,\n    loading,\n    navigatedAt,\n  }\n\n  const canonicalUrl =\n    // location.href is read as the initial value for canonicalUrl in the browser\n    // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.\n    location\n      ? // window.location does not have the same type as URL but has all the fields createHrefFromUrl needs.\n        createHrefFromUrl(location)\n      : initialCanonicalUrl\n\n  addRefreshMarkerToActiveParallelSegments(initialTree, canonicalUrl)\n\n  const prefetchCache = new Map<string, PrefetchCacheEntry>()\n\n  // When the cache hasn't been seeded yet we fill the cache with the head.\n  if (initialParallelRoutes === null || initialParallelRoutes.size === 0) {\n    fillLazyItemsTillLeafWithHead(\n      navigatedAt,\n      cache,\n      undefined,\n      initialTree,\n      initialSeedData,\n      initialHead,\n      undefined\n    )\n  }\n\n  const initialState = {\n    tree: initialTree,\n    cache,\n    prefetchCache,\n    pushRef: {\n      pendingPush: false,\n      mpaNavigation: false,\n      // First render needs to preserve the previous window.history.state\n      // to avoid it being overwritten on navigation back/forward with MPA Navigation.\n      preserveCustomHistoryState: true,\n    },\n    focusAndScrollRef: {\n      apply: false,\n      onlyHashChange: false,\n      hashFragment: null,\n      segmentPaths: [],\n    },\n    canonicalUrl,\n    nextUrl:\n      // the || operator is intentional, the pathname can be an empty string\n      (extractPathFromFlightRouterState(initialTree) || location?.pathname) ??\n      null,\n  }\n\n  if (process.env.NODE_ENV !== 'development' && location) {\n    // Seed the prefetch cache with this page's data.\n    // This is to prevent needlessly re-prefetching a page that is already reusable,\n    // and will avoid triggering a loading state/data fetch stall when navigating back to the page.\n    // We don't currently do this in development because links aren't prefetched in development\n    // so having a mismatch between prefetch/no prefetch provides inconsistent behavior based on which page\n    // was loaded first.\n    const url = new URL(\n      `${location.pathname}${location.search}`,\n      location.origin\n    )\n\n    createSeededPrefetchCacheEntry({\n      url,\n      data: {\n        flightData: [normalizedFlightData],\n        canonicalUrl: undefined,\n        couldBeIntercepted: !!couldBeIntercepted,\n        prerendered,\n        postponed,\n        // TODO: The initial RSC payload includes both static and dynamic data\n        // in the same response, even if PPR is enabled. So if there's any\n        // dynamic data at all, we can't set a stale time. In the future we may\n        // add a way to split a single Flight stream into static and dynamic\n        // parts. But in the meantime we should at least make this work for\n        // fully static pages.\n        staleTime:\n          // In the old router, there was only a single configurable staleTime (experimental.staleTimes)\n          // As an abundance of caution, this will only set the initial staleTime to the configured value\n          // if we're not leveraging the segment cache, which has its own prefetching semantics.\n          prerendered && !process.env.__NEXT_CLIENT_SEGMENT_CACHE\n            ? STATIC_STALETIME_MS\n            : -1,\n      },\n      tree: initialState.tree,\n      prefetchCache: initialState.prefetchCache,\n      nextUrl: initialState.nextUrl,\n      kind: prerendered ? PrefetchKind.FULL : PrefetchKind.AUTO,\n    })\n  }\n\n  return initialState\n}\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head'\nimport { fillCacheWithNewSubTreeData } from './fill-cache-with-new-subtree-data'\nimport type { PrefetchCacheEntry } from './router-reducer-types'\nimport type { NormalizedFlightData } from '../../flight-data-helpers'\n\nexport function applyFlightData(\n  navigatedAt: number,\n  existingCache: CacheNode,\n  cache: CacheNode,\n  flightData: NormalizedFlightData,\n  prefetchEntry?: PrefetchCacheEntry\n): boolean {\n  // The one before last item is the router state tree patch\n  const { tree: treePatch, seedData, head, isRootRender } = flightData\n\n  // Handles case where prefetch only returns the router tree patch without rendered components.\n  if (seedData === null) {\n    return false\n  }\n\n  if (isRootRender) {\n    const rsc = seedData[1]\n    const loading = seedData[3]\n    cache.loading = loading\n    cache.rsc = rsc\n    // This is a PPR-only field. When PPR is enabled, we shouldn't hit\n    // this path during a navigation, but until PPR is fully implemented\n    // yet it's possible the existing node does have a non-null\n    // `prefetchRsc`. As an incremental step, we'll just de-opt to the\n    // old behavior — no PPR value.\n    cache.prefetchRsc = null\n    fillLazyItemsTillLeafWithHead(\n      navigatedAt,\n      cache,\n      existingCache,\n      treePatch,\n      seedData,\n      head,\n      prefetchEntry\n    )\n  } else {\n    // Copy rsc for the root node of the cache.\n    cache.rsc = existingCache.rsc\n    // This is a PPR-only field. Unlike the previous branch, since we're\n    // just cloning the existing cache node, we might as well keep the\n    // PPR value, if it exists.\n    cache.prefetchRsc = existingCache.prefetchRsc\n    cache.parallelRoutes = new Map(existingCache.parallelRoutes)\n    cache.loading = existingCache.loading\n    // Create a copy of the existing cache with the rsc applied.\n    fillCacheWithNewSubTreeData(\n      navigatedAt,\n      cache,\n      existingCache,\n      flightData,\n      prefetchEntry\n    )\n  }\n\n  return true\n}\n","/**\n * For a given page path, this function ensures that there is a leading slash.\n * If there is not a leading slash, one is added, otherwise it is noop.\n */\nexport function ensureLeadingSlash(path: string) {\n  return path.startsWith('/') ? path : `/${path}`\n}\n","export const reportGlobalError =\n  typeof reportError === 'function'\n    ? // In modern browsers, reportError will dispatch an error event,\n      // emulating an uncaught JavaScript error.\n      reportError\n    : (error: unknown) => {\n        // TODO: Dispatch error event\n        globalThis.console.error(error)\n      }\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { Segment } from '../../../server/app-render/types'\nimport { invalidateCacheByRouterState } from './invalidate-cache-by-router-state'\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport type { PrefetchCacheEntry } from './router-reducer-types'\nimport { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment'\nimport type { NormalizedFlightData } from '../../flight-data-helpers'\n\n/**\n * Common logic for filling cache with new sub tree data.\n */\nfunction fillCacheHelper(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightData: NormalizedFlightData,\n  prefetchEntry: PrefetchCacheEntry | undefined,\n  fillLazyItems: boolean\n): void {\n  const {\n    segmentPath,\n    seedData: cacheNodeSeedData,\n    tree: treePatch,\n    head,\n  } = flightData\n  let newCacheNode = newCache\n  let existingCacheNode = existingCache\n\n  for (let i = 0; i < segmentPath.length; i += 2) {\n    const parallelRouteKey: string = segmentPath[i]\n    const segment: Segment = segmentPath[i + 1]\n\n    // segmentPath is a repeating tuple of parallelRouteKey and segment\n    // we know we've hit the last entry we've reached our final pair\n    const isLastEntry = i === segmentPath.length - 2\n    const cacheKey = createRouterCacheKey(segment)\n\n    const existingChildSegmentMap =\n      existingCacheNode.parallelRoutes.get(parallelRouteKey)\n\n    if (!existingChildSegmentMap) {\n      // Bailout because the existing cache does not have the path to the leaf node\n      // Will trigger lazy fetch in layout-router because of missing segment\n      continue\n    }\n\n    let childSegmentMap = newCacheNode.parallelRoutes.get(parallelRouteKey)\n    if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n      childSegmentMap = new Map(existingChildSegmentMap)\n      newCacheNode.parallelRoutes.set(parallelRouteKey, childSegmentMap)\n    }\n\n    const existingChildCacheNode = existingChildSegmentMap.get(cacheKey)\n    let childCacheNode = childSegmentMap.get(cacheKey)\n\n    if (isLastEntry) {\n      if (\n        cacheNodeSeedData &&\n        (!childCacheNode ||\n          !childCacheNode.lazyData ||\n          childCacheNode === existingChildCacheNode)\n      ) {\n        const incomingSegment = cacheNodeSeedData[0]\n        const rsc = cacheNodeSeedData[1]\n        const loading = cacheNodeSeedData[3]\n\n        childCacheNode = {\n          lazyData: null,\n          // When `fillLazyItems` is false, we only want to fill the RSC data for the layout,\n          // not the page segment.\n          rsc:\n            fillLazyItems || incomingSegment !== PAGE_SEGMENT_KEY ? rsc : null,\n          prefetchRsc: null,\n          head: null,\n          prefetchHead: null,\n          loading,\n          parallelRoutes:\n            fillLazyItems && existingChildCacheNode\n              ? new Map(existingChildCacheNode.parallelRoutes)\n              : new Map(),\n          navigatedAt,\n        }\n\n        if (existingChildCacheNode && fillLazyItems) {\n          invalidateCacheByRouterState(\n            childCacheNode,\n            existingChildCacheNode,\n            treePatch\n          )\n        }\n        if (fillLazyItems) {\n          fillLazyItemsTillLeafWithHead(\n            navigatedAt,\n            childCacheNode,\n            existingChildCacheNode,\n            treePatch,\n            cacheNodeSeedData,\n            head,\n            prefetchEntry\n          )\n        }\n\n        childSegmentMap.set(cacheKey, childCacheNode)\n      }\n      continue\n    }\n\n    if (!childCacheNode || !existingChildCacheNode) {\n      // Bailout because the existing cache does not have the path to the leaf node\n      // Will trigger lazy fetch in layout-router because of missing segment\n      continue\n    }\n\n    if (childCacheNode === existingChildCacheNode) {\n      childCacheNode = {\n        lazyData: childCacheNode.lazyData,\n        rsc: childCacheNode.rsc,\n        prefetchRsc: childCacheNode.prefetchRsc,\n        head: childCacheNode.head,\n        prefetchHead: childCacheNode.prefetchHead,\n        parallelRoutes: new Map(childCacheNode.parallelRoutes),\n        loading: childCacheNode.loading,\n      } as CacheNode\n      childSegmentMap.set(cacheKey, childCacheNode)\n    }\n\n    // Move deeper into the cache nodes\n    newCacheNode = childCacheNode\n    existingCacheNode = existingChildCacheNode\n  }\n}\n\n/**\n * Fill cache with rsc based on flightDataPath\n */\nexport function fillCacheWithNewSubTreeData(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightData: NormalizedFlightData,\n  prefetchEntry?: PrefetchCacheEntry\n): void {\n  fillCacheHelper(\n    navigatedAt,\n    newCache,\n    existingCache,\n    flightData,\n    prefetchEntry,\n    true\n  )\n}\n\nexport function fillCacheWithNewSubTreeDataButOnlyLoading(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightData: NormalizedFlightData,\n  prefetchEntry?: PrefetchCacheEntry\n): void {\n  fillCacheHelper(\n    navigatedAt,\n    newCache,\n    existingCache,\n    flightData,\n    prefetchEntry,\n    false\n  )\n}\n","function _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\nexport { _interop_require_default as _ };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    METADATA_BOUNDARY_NAME: null,\n    OUTLET_BOUNDARY_NAME: null,\n    VIEWPORT_BOUNDARY_NAME: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    METADATA_BOUNDARY_NAME: function() {\n        return METADATA_BOUNDARY_NAME;\n    },\n    OUTLET_BOUNDARY_NAME: function() {\n        return OUTLET_BOUNDARY_NAME;\n    },\n    VIEWPORT_BOUNDARY_NAME: function() {\n        return VIEWPORT_BOUNDARY_NAME;\n    }\n});\nconst METADATA_BOUNDARY_NAME = '__next_metadata_boundary__';\nconst VIEWPORT_BOUNDARY_NAME = '__next_viewport_boundary__';\nconst OUTLET_BOUNDARY_NAME = '__next_outlet_boundary__';\n\n//# sourceMappingURL=metadata-constants.js.map","import { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNextRouterError } from './is-next-router-error'\n\nexport function unstable_rethrow(error: unknown): void {\n  if (isNextRouterError(error) || isBailoutToCSRError(error)) {\n    throw error\n  }\n\n  if (error instanceof Error && 'cause' in error) {\n    unstable_rethrow(error.cause)\n  }\n}\n","'use client'\n\nimport { Component, createRef, type ReactNode } from 'react'\n\ninterface ErrorBoundaryProps {\n  children: ReactNode\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean\n}\n\nfunction getDomNodeAttributes(node: HTMLElement): Record<string, string> {\n  const result: Record<string, string> = {}\n  for (let i = 0; i < node.attributes.length; i++) {\n    const attr = node.attributes[i]\n    result[attr.name] = attr.value\n  }\n  return result\n}\n\nexport class GracefulDegradeBoundary extends Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  private rootHtml: string\n  private htmlAttributes: Record<string, string>\n  private htmlRef: React.RefObject<HTMLHtmlElement | null>\n\n  constructor(props: ErrorBoundaryProps) {\n    super(props)\n    this.state = { hasError: false }\n    this.rootHtml = ''\n    this.htmlAttributes = {}\n    this.htmlRef = createRef<HTMLHtmlElement>()\n  }\n\n  static getDerivedStateFromError(_: unknown): ErrorBoundaryState {\n    return { hasError: true }\n  }\n\n  componentDidMount() {\n    const htmlNode = this.htmlRef.current\n    if (this.state.hasError && htmlNode) {\n      // Reapply the cached HTML attributes to the root element\n      Object.entries(this.htmlAttributes).forEach(([key, value]) => {\n        htmlNode.setAttribute(key, value)\n      })\n    }\n  }\n\n  render() {\n    const { hasError } = this.state\n    // Cache the root HTML content on the first render\n    if (typeof window !== 'undefined' && !this.rootHtml) {\n      this.rootHtml = document.documentElement.innerHTML\n      this.htmlAttributes = getDomNodeAttributes(document.documentElement)\n    }\n\n    if (hasError) {\n      // Render the current HTML content without hydration\n      return (\n        <html\n          ref={this.htmlRef}\n          suppressHydrationWarning\n          dangerouslySetInnerHTML={{\n            __html: this.rootHtml,\n          }}\n        />\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nexport default GracefulDegradeBoundary\n","import { pathHasPrefix } from '../shared/lib/router/utils/path-has-prefix'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function hasBasePath(path: string): boolean {\n  return pathHasPrefix(path, basePath)\n}\n","import type { Segment } from '../../server/app-render/types'\n\nexport const matchSegment = (\n  existingSegment: Segment,\n  segment: Segment\n): boolean => {\n  // segment is either Array or string\n  if (typeof existingSegment === 'string') {\n    if (typeof segment === 'string') {\n      // Common case: segment is just a string\n      return existingSegment === segment\n    }\n    return false\n  }\n\n  if (typeof segment === 'string') {\n    return false\n  }\n  return existingSegment[0] === segment[0] && existingSegment[1] === segment[1]\n}\n","'use client'\n\nimport { computeCacheBustingSearchParam } from '../../../shared/lib/router/utils/cache-busting-search-param'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  NEXT_RSC_UNION_QUERY,\n} from '../app-router-headers'\nimport type { RequestHeaders } from './fetch-server-response'\n\n/**\n * Mutates the provided URL by adding a cache-busting search parameter for CDNs that don't\n * support custom headers. This helps avoid caching conflicts by making each request unique.\n *\n * Rather than relying on the Vary header which some CDNs ignore, we append a search param\n * to create a unique URL that forces a fresh request.\n *\n * Example:\n * URL before: https://example.com/path?query=1\n * URL after: https://example.com/path?query=1&_rsc=abc123\n *\n * Note: This function mutates the input URL directly and does not return anything.\n *\n * TODO: Since we need to use a search param anyway, we could simplify by removing the custom\n * headers approach entirely and just use search params.\n */\nexport const setCacheBustingSearchParam = (\n  url: URL,\n  headers: RequestHeaders\n): void => {\n  const uniqueCacheKey = computeCacheBustingSearchParam(\n    headers[NEXT_ROUTER_PREFETCH_HEADER],\n    headers[NEXT_ROUTER_SEGMENT_PREFETCH_HEADER],\n    headers[NEXT_ROUTER_STATE_TREE_HEADER],\n    headers[NEXT_URL]\n  )\n  setCacheBustingSearchParamWithHash(url, uniqueCacheKey)\n}\n\n/**\n * Sets a cache-busting search parameter on a URL using a provided hash value.\n *\n * This function performs the same logic as `setCacheBustingSearchParam` but accepts\n * a pre-computed hash instead of computing it from headers.\n *\n * Example:\n * URL before: https://example.com/path?query=1\n * hash: \"abc123\"\n * URL after: https://example.com/path?query=1&_rsc=abc123\n *\n * If the hash is null, we will set `_rsc` search param without a value.\n * Like this: https://example.com/path?query=1&_rsc\n *\n * Note: This function mutates the input URL directly and does not return anything.\n */\nexport const setCacheBustingSearchParamWithHash = (\n  url: URL,\n  hash: string\n): void => {\n  /**\n   * Note that we intentionally do not use `url.searchParams.set` here:\n   *\n   * const url = new URL('https://example.com/search?q=custom%20spacing');\n   * url.searchParams.set('_rsc', 'abc123');\n   * console.log(url.toString()); // Outputs: https://example.com/search?q=custom+spacing&_rsc=abc123\n   *                                                                             ^ <--- this is causing confusion\n   * This is in fact intended based on https://url.spec.whatwg.org/#interface-urlsearchparams, but\n   * we want to preserve the %20 as %20 if that's what the user passed in, hence the custom\n   * logic below.\n   */\n  const existingSearch = url.search\n  const rawQuery = existingSearch.startsWith('?')\n    ? existingSearch.slice(1)\n    : existingSearch\n\n  // Always remove any existing cache busting param and add a fresh one to ensure\n  // we have the correct value based on current request headers\n  const pairs = rawQuery\n    .split('&')\n    .filter((pair) => pair && !pair.startsWith(`${NEXT_RSC_UNION_QUERY}=`))\n\n  if (hash.length > 0) {\n    pairs.push(`${NEXT_RSC_UNION_QUERY}=${hash}`)\n  } else {\n    pairs.push(`${NEXT_RSC_UNION_QUERY}`)\n  }\n  url.search = pairs.length ? `?${pairs.join('&')}` : ''\n}\n","export function getObjectClassLabel(value: any): string {\n  return Object.prototype.toString.call(value)\n}\n\nexport function isPlainObject(value: any): boolean {\n  if (getObjectClassLabel(value) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(value)\n\n  /**\n   * this used to be previously:\n   *\n   * `return prototype === null || prototype === Object.prototype`\n   *\n   * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.\n   *\n   * It was changed to the current implementation since it's resilient to serialization.\n   */\n  return prototype === null || prototype.hasOwnProperty('isPrototypeOf')\n}\n","import {\n  isHTTPAccessFallbackError,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\nimport { isRedirectError, type RedirectError } from './redirect-error'\n\n/**\n * Returns true if the error is a navigation signal error. These errors are\n * thrown by user code to perform navigation operations and interrupt the React\n * render.\n */\nexport function isNextRouterError(\n  error: unknown\n): error is RedirectError | HTTPAccessFallbackError {\n  return isRedirectError(error) || isHTTPAccessFallbackError(error)\n}\n","import type { Segment } from '../../../server/app-render/types'\nimport { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment'\n\nexport function createRouterCacheKey(\n  segment: Segment,\n  withoutSearchParameters: boolean = false\n) {\n  // if the segment is an array, it means it's a dynamic segment\n  // for example, ['lang', 'en', 'd']. We need to convert it to a string to store it as a cache node key.\n  if (Array.isArray(segment)) {\n    return `${segment[0]}|${segment[1]}|${segment[2]}`\n  }\n\n  // Page segments might have search parameters, ie __PAGE__?foo=bar\n  // When `withoutSearchParameters` is true, we only want to return the page segment\n  if (withoutSearchParameters && segment.startsWith(PAGE_SEGMENT_KEY)) {\n    return PAGE_SEGMENT_KEY\n  }\n\n  return segment\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport type { FlightRouterState } from '../../server/app-render/types'\n\nconst ANNOUNCER_TYPE = 'next-route-announcer'\nconst ANNOUNCER_ID = '__next-route-announcer__'\n\nfunction getAnnouncerNode() {\n  const existingAnnouncer = document.getElementsByName(ANNOUNCER_TYPE)[0]\n  if (existingAnnouncer?.shadowRoot?.childNodes[0]) {\n    return existingAnnouncer.shadowRoot.childNodes[0] as HTMLElement\n  } else {\n    const container = document.createElement(ANNOUNCER_TYPE)\n    container.style.cssText = 'position:absolute'\n    const announcer = document.createElement('div')\n    announcer.ariaLive = 'assertive'\n    announcer.id = ANNOUNCER_ID\n    announcer.role = 'alert'\n    announcer.style.cssText =\n      'position:absolute;border:0;height:1px;margin:-1px;padding:0;width:1px;clip:rect(0 0 0 0);overflow:hidden;white-space:nowrap;word-wrap:normal'\n\n    // Use shadow DOM here to avoid any potential CSS bleed\n    const shadow = container.attachShadow({ mode: 'open' })\n    shadow.appendChild(announcer)\n    document.body.appendChild(container)\n    return announcer\n  }\n}\n\nexport function AppRouterAnnouncer({ tree }: { tree: FlightRouterState }) {\n  const [portalNode, setPortalNode] = useState<HTMLElement | null>(null)\n\n  useEffect(() => {\n    const announcer = getAnnouncerNode()\n    setPortalNode(announcer)\n    return () => {\n      const container = document.getElementsByTagName(ANNOUNCER_TYPE)[0]\n      if (container?.isConnected) {\n        document.body.removeChild(container)\n      }\n    }\n  }, [])\n\n  const [routeAnnouncement, setRouteAnnouncement] = useState('')\n  const previousTitle = useRef<string | undefined>(undefined)\n\n  useEffect(() => {\n    let currentTitle = ''\n    if (document.title) {\n      currentTitle = document.title\n    } else {\n      const pageHeader = document.querySelector('h1')\n      if (pageHeader) {\n        currentTitle = pageHeader.innerText || pageHeader.textContent || ''\n      }\n    }\n\n    // Only announce the title change, but not for the first load because screen\n    // readers do that automatically.\n    if (\n      previousTitle.current !== undefined &&\n      previousTitle.current !== currentTitle\n    ) {\n      setRouteAnnouncement(currentTitle)\n    }\n    previousTitle.current = currentTitle\n  }, [tree])\n\n  return portalNode ? createPortal(routeAnnouncement, portalNode) : null\n}\n","import type { SearchParams } from '../../server/request/search-params'\n\nimport { wellKnownProperties } from '../../shared/lib/utils/reflect-utils'\n\ninterface CacheLifetime {}\nconst CachedSearchParams = new WeakMap<CacheLifetime, Promise<SearchParams>>()\n\nfunction makeUntrackedExoticSearchParams(\n  underlyingSearchParams: SearchParams\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  // We don't use makeResolvedReactPromise here because searchParams\n  // supports copying with spread and we don't want to unnecessarily\n  // instrument the promise with spreadable properties of ReactPromise.\n  const promise = Promise.resolve(underlyingSearchParams)\n  CachedSearchParams.set(underlyingSearchParams, promise)\n\n  Object.keys(underlyingSearchParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n    } else {\n      ;(promise as any)[prop] = underlyingSearchParams[prop]\n    }\n  })\n\n  return promise\n}\n\nfunction makeUntrackedSearchParams(\n  underlyingSearchParams: SearchParams\n): Promise<SearchParams> {\n  const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams)\n  if (cachedSearchParams) {\n    return cachedSearchParams\n  }\n\n  const promise = Promise.resolve(underlyingSearchParams)\n  CachedSearchParams.set(underlyingSearchParams, promise)\n\n  return promise\n}\n\nexport function createRenderSearchParamsFromClient(\n  underlyingSearchParams: SearchParams\n): Promise<SearchParams> {\n  if (process.env.__NEXT_DYNAMIC_IO) {\n    return makeUntrackedSearchParams(underlyingSearchParams)\n  }\n\n  return makeUntrackedExoticSearchParams(underlyingSearchParams)\n}\n","import { hexHash } from '../../hash'\n\nexport function computeCacheBustingSearchParam(\n  prefetchHeader: string | string[] | undefined,\n  segmentPrefetchHeader: string | string[] | undefined,\n  stateTreeHeader: string | string[] | undefined,\n  nextUrlHeader: string | string[] | undefined\n): string {\n  if (\n    prefetchHeader === undefined &&\n    segmentPrefetchHeader === undefined &&\n    stateTreeHeader === undefined &&\n    nextUrlHeader === undefined\n  ) {\n    return ''\n  }\n  return hexHash(\n    [\n      prefetchHeader || '0',\n      segmentPrefetchHeader || '0',\n      stateTreeHeader || '0',\n      nextUrlHeader || '0',\n    ].join(',')\n  )\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom-client.production.js');\n} else {\n  module.exports = require('./cjs/react-dom-client.development.js');\n}\n","import type { FlightRouterState } from '../../server/app-render/types'\nimport type { AppRouterInstance } from '../../shared/lib/app-router-context.shared-runtime'\nimport { getCurrentAppRouterState } from './app-router-instance'\nimport { createPrefetchURL } from './app-router'\nimport { PrefetchKind } from './router-reducer/router-reducer-types'\nimport { isPrefetchTaskDirty } from './segment-cache'\nimport { createCacheKey } from './segment-cache'\nimport {\n  type PrefetchTask,\n  PrefetchPriority,\n  schedulePrefetchTask as scheduleSegmentPrefetchTask,\n  cancelPrefetchTask,\n  reschedulePrefetchTask,\n} from './segment-cache'\nimport { startTransition } from 'react'\n\ntype LinkElement = HTMLAnchorElement | SVGAElement\n\ntype Element = LinkElement | HTMLFormElement\n\n// Properties that are shared between Link and Form instances. We use the same\n// shape for both to prevent a polymorphic de-opt in the VM.\ntype LinkOrFormInstanceShared = {\n  router: AppRouterInstance\n  kind: PrefetchKind.AUTO | PrefetchKind.FULL\n\n  isVisible: boolean\n\n  // The most recently initiated prefetch task. It may or may not have\n  // already completed. The same prefetch task object can be reused across\n  // multiple prefetches of the same link.\n  prefetchTask: PrefetchTask | null\n}\n\nexport type FormInstance = LinkOrFormInstanceShared & {\n  prefetchHref: string\n  setOptimisticLinkStatus: null\n}\n\ntype PrefetchableLinkInstance = LinkOrFormInstanceShared & {\n  prefetchHref: string\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n}\n\ntype NonPrefetchableLinkInstance = LinkOrFormInstanceShared & {\n  prefetchHref: null\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n}\n\ntype PrefetchableInstance = PrefetchableLinkInstance | FormInstance\n\nexport type LinkInstance =\n  | PrefetchableLinkInstance\n  | NonPrefetchableLinkInstance\n\n// Tracks the most recently navigated link instance. When null, indicates\n// the current navigation was not initiated by a link click.\nlet linkForMostRecentNavigation: LinkInstance | null = null\n\n// Status object indicating link is pending\nexport const PENDING_LINK_STATUS = { pending: true }\n\n// Status object indicating link is idle\nexport const IDLE_LINK_STATUS = { pending: false }\n\n// Updates the loading state when navigating between links\n// - Resets the previous link's loading state\n// - Sets the new link's loading state\n// - Updates tracking of current navigation\nexport function setLinkForCurrentNavigation(link: LinkInstance | null) {\n  startTransition(() => {\n    linkForMostRecentNavigation?.setOptimisticLinkStatus(IDLE_LINK_STATUS)\n    link?.setOptimisticLinkStatus(PENDING_LINK_STATUS)\n    linkForMostRecentNavigation = link\n  })\n}\n\n// Unmounts the current link instance from navigation tracking\nexport function unmountLinkForCurrentNavigation(link: LinkInstance) {\n  if (linkForMostRecentNavigation === link) {\n    linkForMostRecentNavigation = null\n  }\n}\n\n// Use a WeakMap to associate a Link instance with its DOM element. This is\n// used by the IntersectionObserver to track the link's visibility.\nconst prefetchable:\n  | WeakMap<Element, PrefetchableInstance>\n  | Map<Element, PrefetchableInstance> =\n  typeof WeakMap === 'function' ? new WeakMap() : new Map()\n\n// A Set of the currently visible links. We re-prefetch visible links after a\n// cache invalidation, or when the current URL changes. It's a separate data\n// structure from the WeakMap above because only the visible links need to\n// be enumerated.\nconst prefetchableAndVisible: Set<PrefetchableInstance> = new Set()\n\n// A single IntersectionObserver instance shared by all <Link> components.\nconst observer: IntersectionObserver | null =\n  typeof IntersectionObserver === 'function'\n    ? new IntersectionObserver(handleIntersect, {\n        rootMargin: '200px',\n      })\n    : null\n\nfunction observeVisibility(element: Element, instance: PrefetchableInstance) {\n  const existingInstance = prefetchable.get(element)\n  if (existingInstance !== undefined) {\n    // This shouldn't happen because each <Link> component should have its own\n    // anchor tag instance, but it's defensive coding to avoid a memory leak in\n    // case there's a logical error somewhere else.\n    unmountPrefetchableInstance(element)\n  }\n  // Only track prefetchable links that have a valid prefetch URL\n  prefetchable.set(element, instance)\n  if (observer !== null) {\n    observer.observe(element)\n  }\n}\n\nfunction coercePrefetchableUrl(href: string): URL | null {\n  try {\n    return createPrefetchURL(href)\n  } catch {\n    // createPrefetchURL sometimes throws an error if an invalid URL is\n    // provided, though I'm not sure if it's actually necessary.\n    // TODO: Consider removing the throw from the inner function, or change it\n    // to reportError. Or maybe the error isn't even necessary for automatic\n    // prefetches, just navigations.\n    const reportErrorFn =\n      typeof reportError === 'function' ? reportError : console.error\n    reportErrorFn(\n      `Cannot prefetch '${href}' because it cannot be converted to a URL.`\n    )\n    return null\n  }\n}\n\nexport function mountLinkInstance(\n  element: LinkElement,\n  href: string,\n  router: AppRouterInstance,\n  kind: PrefetchKind.AUTO | PrefetchKind.FULL,\n  prefetchEnabled: boolean,\n  setOptimisticLinkStatus: (status: { pending: boolean }) => void\n): LinkInstance {\n  if (prefetchEnabled) {\n    const prefetchURL = coercePrefetchableUrl(href)\n    if (prefetchURL !== null) {\n      const instance: PrefetchableLinkInstance = {\n        router,\n        kind,\n        isVisible: false,\n        prefetchTask: null,\n        prefetchHref: prefetchURL.href,\n        setOptimisticLinkStatus,\n      }\n      // We only observe the link's visibility if it's prefetchable. For\n      // example, this excludes links to external URLs.\n      observeVisibility(element, instance)\n      return instance\n    }\n  }\n  // If the link is not prefetchable, we still create an instance so we can\n  // track its optimistic state (i.e. useLinkStatus).\n  const instance: NonPrefetchableLinkInstance = {\n    router,\n    kind,\n    isVisible: false,\n    prefetchTask: null,\n    prefetchHref: null,\n    setOptimisticLinkStatus,\n  }\n  return instance\n}\n\nexport function mountFormInstance(\n  element: HTMLFormElement,\n  href: string,\n  router: AppRouterInstance,\n  kind: PrefetchKind.AUTO | PrefetchKind.FULL\n): void {\n  const prefetchURL = coercePrefetchableUrl(href)\n  if (prefetchURL === null) {\n    // This href is not prefetchable, so we don't track it.\n    // TODO: We currently observe/unobserve a form every time its href changes.\n    // For Links, this isn't a big deal because the href doesn't usually change,\n    // but for forms it's extremely common. We should optimize this.\n    return\n  }\n  const instance: FormInstance = {\n    router,\n    kind,\n    isVisible: false,\n    prefetchTask: null,\n    prefetchHref: prefetchURL.href,\n    setOptimisticLinkStatus: null,\n  }\n  observeVisibility(element, instance)\n}\n\nexport function unmountPrefetchableInstance(element: Element) {\n  const instance = prefetchable.get(element)\n  if (instance !== undefined) {\n    prefetchable.delete(element)\n    prefetchableAndVisible.delete(instance)\n    const prefetchTask = instance.prefetchTask\n    if (prefetchTask !== null) {\n      cancelPrefetchTask(prefetchTask)\n    }\n  }\n  if (observer !== null) {\n    observer.unobserve(element)\n  }\n}\n\nfunction handleIntersect(entries: Array<IntersectionObserverEntry>) {\n  for (const entry of entries) {\n    // Some extremely old browsers or polyfills don't reliably support\n    // isIntersecting so we check intersectionRatio instead. (Do we care? Not\n    // really. But whatever this is fine.)\n    const isVisible = entry.intersectionRatio > 0\n    onLinkVisibilityChanged(entry.target as HTMLAnchorElement, isVisible)\n  }\n}\n\nexport function onLinkVisibilityChanged(element: Element, isVisible: boolean) {\n  if (process.env.NODE_ENV !== 'production') {\n    // Prefetching on viewport is disabled in development for performance\n    // reasons, because it requires compiling the target page.\n    // TODO: Investigate re-enabling this.\n    return\n  }\n\n  const instance = prefetchable.get(element)\n  if (instance === undefined) {\n    return\n  }\n\n  instance.isVisible = isVisible\n  if (isVisible) {\n    prefetchableAndVisible.add(instance)\n  } else {\n    prefetchableAndVisible.delete(instance)\n  }\n  rescheduleLinkPrefetch(instance, PrefetchPriority.Default)\n}\n\nexport function onNavigationIntent(\n  element: HTMLAnchorElement | SVGAElement,\n  unstable_upgradeToDynamicPrefetch: boolean\n) {\n  const instance = prefetchable.get(element)\n  if (instance === undefined) {\n    return\n  }\n  // Prefetch the link on hover/touchstart.\n  if (instance !== undefined) {\n    if (\n      process.env.__NEXT_DYNAMIC_ON_HOVER &&\n      unstable_upgradeToDynamicPrefetch\n    ) {\n      // Switch to a full, dynamic prefetch\n      instance.kind = PrefetchKind.FULL\n    }\n    rescheduleLinkPrefetch(instance, PrefetchPriority.Intent)\n  }\n}\n\nfunction rescheduleLinkPrefetch(\n  instance: PrefetchableInstance,\n  priority: PrefetchPriority.Default | PrefetchPriority.Intent\n) {\n  const existingPrefetchTask = instance.prefetchTask\n\n  if (!instance.isVisible) {\n    // Cancel any in-progress prefetch task. (If it already finished then this\n    // is a no-op.)\n    if (existingPrefetchTask !== null) {\n      cancelPrefetchTask(existingPrefetchTask)\n    }\n    // We don't need to reset the prefetchTask to null upon cancellation; an\n    // old task object can be rescheduled with reschedulePrefetchTask. This is a\n    // micro-optimization but also makes the code simpler (don't need to\n    // worry about whether an old task object is stale).\n    return\n  }\n\n  if (!process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n    // The old prefetch implementation does not have different priority levels.\n    // Just schedule a new prefetch task.\n    prefetchWithOldCacheImplementation(instance)\n    return\n  }\n\n  const appRouterState = getCurrentAppRouterState()\n  if (appRouterState !== null) {\n    const treeAtTimeOfPrefetch = appRouterState.tree\n    if (existingPrefetchTask === null) {\n      // Initiate a prefetch task.\n      const nextUrl = appRouterState.nextUrl\n      const cacheKey = createCacheKey(instance.prefetchHref, nextUrl)\n      instance.prefetchTask = scheduleSegmentPrefetchTask(\n        cacheKey,\n        treeAtTimeOfPrefetch,\n        instance.kind === PrefetchKind.FULL,\n        priority,\n        null\n      )\n    } else {\n      // We already have an old task object that we can reschedule. This is\n      // effectively the same as canceling the old task and creating a new one.\n      reschedulePrefetchTask(\n        existingPrefetchTask,\n        treeAtTimeOfPrefetch,\n        instance.kind === PrefetchKind.FULL,\n        priority\n      )\n    }\n  }\n}\n\nexport function pingVisibleLinks(\n  nextUrl: string | null,\n  tree: FlightRouterState\n) {\n  // For each currently visible link, cancel the existing prefetch task (if it\n  // exists) and schedule a new one. This is effectively the same as if all the\n  // visible links left and then re-entered the viewport.\n  //\n  // This is called when the Next-Url or the base tree changes, since those\n  // may affect the result of a prefetch task. It's also called after a\n  // cache invalidation.\n  for (const instance of prefetchableAndVisible) {\n    const task = instance.prefetchTask\n    if (task !== null && !isPrefetchTaskDirty(task, nextUrl, tree)) {\n      // The cache has not been invalidated, and none of the inputs have\n      // changed. Bail out.\n      continue\n    }\n    // Something changed. Cancel the existing prefetch task and schedule a\n    // new one.\n    if (task !== null) {\n      cancelPrefetchTask(task)\n    }\n    const cacheKey = createCacheKey(instance.prefetchHref, nextUrl)\n    instance.prefetchTask = scheduleSegmentPrefetchTask(\n      cacheKey,\n      tree,\n      instance.kind === PrefetchKind.FULL,\n      PrefetchPriority.Default,\n      null\n    )\n  }\n}\n\nfunction prefetchWithOldCacheImplementation(instance: PrefetchableInstance) {\n  // This is the path used when the Segment Cache is not enabled.\n  if (typeof window === 'undefined') {\n    return\n  }\n\n  const doPrefetch = async () => {\n    // note that `appRouter.prefetch()` is currently sync,\n    // so we have to wrap this call in an async function to be able to catch() errors below.\n    return instance.router.prefetch(instance.prefetchHref, {\n      kind: instance.kind,\n    })\n  }\n\n  // Prefetch the page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n  doPrefetch().catch((err) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // rethrow to show invalid URL errors\n      throw err\n    }\n  })\n}\n","import type { FlightRouterState } from '../../server/app-render/types'\nimport { useState } from 'react'\n\n// When the flag is disabled, only track the currently active tree\nconst MAX_BF_CACHE_ENTRIES = process.env.__NEXT_ROUTER_BF_CACHE ? 3 : 1\n\nexport type RouterBFCacheEntry = {\n  tree: FlightRouterState\n  stateKey: string\n  // The entries form a linked list, sorted in order of most recently active.\n  next: RouterBFCacheEntry | null\n}\n\n/**\n * Keeps track of the most recent N trees (FlightRouterStates) that were active\n * at a certain segment level. E.g. for a segment \"/a/b/[param]\", this hook\n * tracks the last N param values that the router rendered for N.\n *\n * The result of this hook precisely determines the number and order of\n * trees that are rendered in parallel at their segment level.\n *\n * The purpose of this cache is to we can preserve the React and DOM state of\n * some number of inactive trees, by rendering them in an <Activity> boundary.\n * That means it would not make sense for the the lifetime of the cache to be\n * any longer than the lifetime of the React tree; e.g. if the hook were\n * unmounted, then the React tree would be, too. So, we use React state to\n * manage it.\n *\n * Note that we don't store the RSC data for the cache entries in this hook —\n * the data for inactive segments is stored in the parent CacheNode, which\n * *does* have a longer lifetime than the React tree. This hook only determines\n * which of those trees should have their *state* preserved, by <Activity>.\n */\nexport function useRouterBFCache(\n  activeTree: FlightRouterState,\n  activeStateKey: string\n): RouterBFCacheEntry {\n  // The currently active entry. The entries form a linked list, sorted in\n  // order of most recently active. This allows us to reuse parts of the list\n  // without cloning, unless there's a reordering or removal.\n  // TODO: Once we start tracking back/forward history at each route level,\n  // we should use the history order instead. In other words, when traversing\n  // to an existing entry as a result of a popstate event, we should maintain\n  // the existing order instead of moving it to the front of the list. I think\n  // an initial implementation of this could be to pass an incrementing id\n  // to history.pushState/replaceState, then use that here for ordering.\n  const [prevActiveEntry, setPrevActiveEntry] = useState<RouterBFCacheEntry>(\n    () => {\n      const initialEntry: RouterBFCacheEntry = {\n        tree: activeTree,\n        stateKey: activeStateKey,\n        next: null,\n      }\n      return initialEntry\n    }\n  )\n\n  if (prevActiveEntry.tree === activeTree) {\n    // Fast path. The active tree hasn't changed, so we can reuse the\n    // existing state.\n    return prevActiveEntry\n  }\n\n  // The route tree changed. Note that this doesn't mean that the tree changed\n  // *at this level* — the change may be due to a child route. Either way, we\n  // need to either add or update the router tree in the bfcache.\n  //\n  // The rest of the code looks more complicated than it actually is because we\n  // can't mutate the state in place; we have to copy-on-write.\n\n  // Create a new entry for the active cache key. This is the head of the new\n  // linked list.\n  const newActiveEntry: RouterBFCacheEntry = {\n    tree: activeTree,\n    stateKey: activeStateKey,\n    next: null,\n  }\n\n  // We need to append the old list onto the new list. If the head of the new\n  // list was already present in the cache, then we'll need to clone everything\n  // that came before it. Then we can reuse the rest.\n  let n = 1\n  let oldEntry: RouterBFCacheEntry | null = prevActiveEntry\n  let clonedEntry: RouterBFCacheEntry = newActiveEntry\n  while (oldEntry !== null && n < MAX_BF_CACHE_ENTRIES) {\n    if (oldEntry.stateKey === activeStateKey) {\n      // Fast path. This entry in the old list that corresponds to the key that\n      // is now active. We've already placed a clone of this entry at the front\n      // of the new list. We can reuse the rest of the old list without cloning.\n      // NOTE: We don't need to worry about eviction in this case because we\n      // haven't increased the size of the cache, and we assume the max size\n      // is constant across renders. If we were to change it to a dynamic limit,\n      // then the implementation would need to account for that.\n      clonedEntry.next = oldEntry.next\n      break\n    } else {\n      // Clone the entry and append it to the list.\n      n++\n      const entry: RouterBFCacheEntry = {\n        tree: oldEntry.tree,\n        stateKey: oldEntry.stateKey,\n        next: null,\n      }\n      clonedEntry.next = entry\n      clonedEntry = entry\n    }\n    oldEntry = oldEntry.next\n  }\n\n  setPrevActiveEntry(newActiveEntry)\n  return newActiveEntry\n}\n","let warnOnce = (_: string) => {}\nif (process.env.NODE_ENV !== 'production') {\n  const warnings = new Set<string>()\n  warnOnce = (msg: string) => {\n    if (!warnings.has(msg)) {\n      console.warn(msg)\n    }\n    warnings.add(msg)\n  }\n}\n\nexport { warnOnce }\n","import type { Params } from '../../server/request/params'\nimport { wellKnownProperties } from '../../shared/lib/utils/reflect-utils'\n\ninterface CacheLifetime {}\nconst CachedParams = new WeakMap<CacheLifetime, Promise<Params>>()\n\nfunction makeUntrackedExoticParams(underlyingParams: Params): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  const promise = Promise.resolve(underlyingParams)\n  CachedParams.set(underlyingParams, promise)\n\n  Object.keys(underlyingParams).forEach((prop) => {\n    if (wellKnownProperties.has(prop)) {\n      // These properties cannot be shadowed because they need to be the\n      // true underlying value for Promises to work correctly at runtime\n    } else {\n      ;(promise as any)[prop] = underlyingParams[prop]\n    }\n  })\n\n  return promise\n}\n\nfunction makeUntrackedParams(underlyingParams: Params): Promise<Params> {\n  const cachedParams = CachedParams.get(underlyingParams)\n  if (cachedParams) {\n    return cachedParams\n  }\n\n  const promise = Promise.resolve(underlyingParams)\n  CachedParams.set(underlyingParams, promise)\n\n  return promise\n}\n\nexport function createRenderParamsFromClient(\n  clientParams: Params\n): Promise<Params> {\n  if (process.env.__NEXT_DYNAMIC_IO) {\n    return makeUntrackedParams(clientParams)\n  }\n\n  return makeUntrackedExoticParams(clientParams)\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","import {\n  fetchServerResponse,\n  type FetchServerResponseResult,\n} from './fetch-server-response'\nimport {\n  PrefetchCacheEntryStatus,\n  type PrefetchCacheEntry,\n  PrefetchKind,\n  type ReadonlyReducerState,\n} from './router-reducer-types'\nimport { prefetchQueue } from './reducers/prefetch-reducer'\n\nconst INTERCEPTION_CACHE_KEY_MARKER = '%'\n\nexport type AliasedPrefetchCacheEntry = PrefetchCacheEntry & {\n  /** This is a special property that indicates a prefetch entry associated with a different URL\n   * was returned rather than the requested URL. This signals to the router that it should only\n   * apply the part that doesn't depend on searchParams (specifically the loading state).\n   */\n  aliased?: boolean\n}\n\n/**\n * Creates a cache key for the router prefetch cache\n *\n * @param url - The URL being navigated to\n * @param nextUrl - an internal URL, primarily used for handling rewrites. Defaults to '/'.\n * @return The generated prefetch cache key.\n */\nfunction createPrefetchCacheKeyImpl(\n  url: URL,\n  includeSearchParams: boolean,\n  prefix?: string | null\n) {\n  // Initially we only use the pathname as the cache key. We don't want to include\n  // search params so that multiple URLs with the same search parameter can re-use\n  // loading states.\n  let pathnameFromUrl = url.pathname\n\n  // RSC responses can differ based on search params, specifically in the case where we aren't\n  // returning a partial response (ie with `PrefetchKind.AUTO`).\n  // In the auto case, since loading.js & layout.js won't have access to search params,\n  // we can safely re-use that cache entry. But for full prefetches, we should not\n  // re-use the cache entry as the response may differ.\n  if (includeSearchParams) {\n    // if we have a full prefetch, we can include the search param in the key,\n    // as we'll be getting back a full response. The server might have read the search\n    // params when generating the full response.\n    pathnameFromUrl += url.search\n  }\n\n  if (prefix) {\n    return `${prefix}${INTERCEPTION_CACHE_KEY_MARKER}${pathnameFromUrl}`\n  }\n\n  return pathnameFromUrl\n}\n\nfunction createPrefetchCacheKey(\n  url: URL,\n  kind: PrefetchKind | undefined,\n  nextUrl?: string | null\n) {\n  return createPrefetchCacheKeyImpl(url, kind === PrefetchKind.FULL, nextUrl)\n}\n\nfunction getExistingCacheEntry(\n  url: URL,\n  kind: PrefetchKind = PrefetchKind.TEMPORARY,\n  nextUrl: string | null,\n  prefetchCache: Map<string, PrefetchCacheEntry>,\n  allowAliasing: boolean\n): AliasedPrefetchCacheEntry | undefined {\n  // We first check if there's a more specific interception route prefetch entry\n  // This is because when we detect a prefetch that corresponds with an interception route, we prefix it with nextUrl (see `createPrefetchCacheKey`)\n  // to avoid conflicts with other pages that may have the same URL but render different things depending on the `Next-URL` header.\n  for (const maybeNextUrl of [nextUrl, null]) {\n    const cacheKeyWithParams = createPrefetchCacheKeyImpl(\n      url,\n      true,\n      maybeNextUrl\n    )\n    const cacheKeyWithoutParams = createPrefetchCacheKeyImpl(\n      url,\n      false,\n      maybeNextUrl\n    )\n\n    // First, we check if we have a cache entry that exactly matches the URL\n    const cacheKeyToUse = url.search\n      ? cacheKeyWithParams\n      : cacheKeyWithoutParams\n\n    const existingEntry = prefetchCache.get(cacheKeyToUse)\n    if (existingEntry && allowAliasing) {\n      // We know we're returning an aliased entry when the pathname matches but the search params don't,\n      const isAliased =\n        existingEntry.url.pathname === url.pathname &&\n        existingEntry.url.search !== url.search\n\n      if (isAliased) {\n        return {\n          ...existingEntry,\n          aliased: true,\n        }\n      }\n\n      return existingEntry\n    }\n\n    // If the request contains search params, and we're not doing a full prefetch, we can return the\n    // param-less entry if it exists.\n    // This is technically covered by the check at the bottom of this function, which iterates over cache entries,\n    // but lets us arrive there quicker in the param-full case.\n    const entryWithoutParams = prefetchCache.get(cacheKeyWithoutParams)\n    if (\n      process.env.NODE_ENV !== 'development' &&\n      allowAliasing &&\n      url.search &&\n      kind !== PrefetchKind.FULL &&\n      entryWithoutParams &&\n      // We shouldn't return the aliased entry if it was relocated to a new cache key.\n      // Since it's rewritten, it could respond with a completely different loading state.\n      !entryWithoutParams.key.includes(INTERCEPTION_CACHE_KEY_MARKER)\n    ) {\n      return { ...entryWithoutParams, aliased: true }\n    }\n  }\n\n  // If we've gotten to this point, we didn't find a specific cache entry that matched\n  // the request URL.\n  // We attempt a partial match by checking if there's a cache entry with the same pathname.\n  // Regardless of what we find, since it doesn't correspond with the requested URL, we'll mark it \"aliased\".\n  // This will signal to the router that it should only apply the loading state on the prefetched data.\n  if (\n    process.env.NODE_ENV !== 'development' &&\n    kind !== PrefetchKind.FULL &&\n    allowAliasing\n  ) {\n    for (const cacheEntry of prefetchCache.values()) {\n      if (\n        cacheEntry.url.pathname === url.pathname &&\n        // We shouldn't return the aliased entry if it was relocated to a new cache key.\n        // Since it's rewritten, it could respond with a completely different loading state.\n        !cacheEntry.key.includes(INTERCEPTION_CACHE_KEY_MARKER)\n      ) {\n        return { ...cacheEntry, aliased: true }\n      }\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns a prefetch cache entry if one exists. Otherwise creates a new one and enqueues a fetch request\n * to retrieve the prefetch data from the server.\n */\nexport function getOrCreatePrefetchCacheEntry({\n  url,\n  nextUrl,\n  tree,\n  prefetchCache,\n  kind,\n  allowAliasing = true,\n}: Pick<ReadonlyReducerState, 'nextUrl' | 'prefetchCache' | 'tree'> & {\n  url: URL\n  kind?: PrefetchKind\n  allowAliasing: boolean\n}): AliasedPrefetchCacheEntry {\n  const existingCacheEntry = getExistingCacheEntry(\n    url,\n    kind,\n    nextUrl,\n    prefetchCache,\n    allowAliasing\n  )\n\n  if (existingCacheEntry) {\n    // Grab the latest status of the cache entry and update it\n    existingCacheEntry.status = getPrefetchEntryCacheStatus(existingCacheEntry)\n\n    // when `kind` is provided, an explicit prefetch was requested.\n    // if the requested prefetch is \"full\" and the current cache entry wasn't, we want to re-prefetch with the new intent\n    const switchedToFullPrefetch =\n      existingCacheEntry.kind !== PrefetchKind.FULL &&\n      kind === PrefetchKind.FULL\n\n    if (switchedToFullPrefetch) {\n      // If we switched to a full prefetch, validate that the existing cache entry contained partial data.\n      // It's possible that the cache entry was seeded with full data but has a cache type of \"auto\" (ie when cache entries\n      // are seeded but without a prefetch intent)\n      existingCacheEntry.data.then((prefetchResponse) => {\n        const isFullPrefetch =\n          Array.isArray(prefetchResponse.flightData) &&\n          prefetchResponse.flightData.some((flightData) => {\n            // If we started rendering from the root and we returned RSC data (seedData), we already had a full prefetch.\n            return flightData.isRootRender && flightData.seedData !== null\n          })\n\n        if (!isFullPrefetch) {\n          return createLazyPrefetchEntry({\n            tree,\n            url,\n            nextUrl,\n            prefetchCache,\n            // If we didn't get an explicit prefetch kind, we want to set a temporary kind\n            // rather than assuming the same intent as the previous entry, to be consistent with how we\n            // lazily create prefetch entries when intent is left unspecified.\n            kind: kind ?? PrefetchKind.TEMPORARY,\n          })\n        }\n      })\n    }\n\n    // If the existing cache entry was marked as temporary, it means it was lazily created when attempting to get an entry,\n    // where we didn't have the prefetch intent. Now that we have the intent (in `kind`), we want to update the entry to the more accurate kind.\n    if (kind && existingCacheEntry.kind === PrefetchKind.TEMPORARY) {\n      existingCacheEntry.kind = kind\n    }\n\n    // We've determined that the existing entry we found is still valid, so we return it.\n    return existingCacheEntry\n  }\n\n  // If we didn't return an entry, create a new one.\n  return createLazyPrefetchEntry({\n    tree,\n    url,\n    nextUrl,\n    prefetchCache,\n    kind: kind || PrefetchKind.TEMPORARY,\n  })\n}\n\n/*\n * Used to take an existing cache entry and prefix it with the nextUrl, if it exists.\n * This ensures that we don't have conflicting cache entries for the same URL (as is the case with route interception).\n */\nfunction prefixExistingPrefetchCacheEntry({\n  url,\n  nextUrl,\n  prefetchCache,\n  existingCacheKey,\n}: Pick<ReadonlyReducerState, 'nextUrl' | 'prefetchCache'> & {\n  url: URL\n  existingCacheKey: string\n}) {\n  const existingCacheEntry = prefetchCache.get(existingCacheKey)\n  if (!existingCacheEntry) {\n    // no-op -- there wasn't an entry to move\n    return\n  }\n\n  const newCacheKey = createPrefetchCacheKey(\n    url,\n    existingCacheEntry.kind,\n    nextUrl\n  )\n  prefetchCache.set(newCacheKey, { ...existingCacheEntry, key: newCacheKey })\n  prefetchCache.delete(existingCacheKey)\n\n  return newCacheKey\n}\n\n/**\n * Use to seed the prefetch cache with data that has already been fetched.\n */\nexport function createSeededPrefetchCacheEntry({\n  nextUrl,\n  tree,\n  prefetchCache,\n  url,\n  data,\n  kind,\n}: Pick<ReadonlyReducerState, 'nextUrl' | 'tree' | 'prefetchCache'> & {\n  url: URL\n  data: FetchServerResponseResult\n  kind: PrefetchKind\n}) {\n  // The initial cache entry technically includes full data, but it isn't explicitly prefetched -- we just seed the\n  // prefetch cache so that we can skip an extra prefetch request later, since we already have the data.\n  // if the prefetch corresponds with an interception route, we use the nextUrl to prefix the cache key\n  const prefetchCacheKey = data.couldBeIntercepted\n    ? createPrefetchCacheKey(url, kind, nextUrl)\n    : createPrefetchCacheKey(url, kind)\n\n  const prefetchEntry = {\n    treeAtTimeOfPrefetch: tree,\n    data: Promise.resolve(data),\n    kind,\n    prefetchTime: Date.now(),\n    lastUsedTime: Date.now(),\n    staleTime: data.staleTime,\n    key: prefetchCacheKey,\n    status: PrefetchCacheEntryStatus.fresh,\n    url,\n  } satisfies PrefetchCacheEntry\n\n  prefetchCache.set(prefetchCacheKey, prefetchEntry)\n\n  return prefetchEntry\n}\n\n/**\n * Creates a prefetch entry entry and enqueues a fetch request to retrieve the data.\n */\nfunction createLazyPrefetchEntry({\n  url,\n  kind,\n  tree,\n  nextUrl,\n  prefetchCache,\n}: Pick<ReadonlyReducerState, 'nextUrl' | 'tree' | 'prefetchCache'> & {\n  url: URL\n  kind: PrefetchKind\n}): PrefetchCacheEntry {\n  const prefetchCacheKey = createPrefetchCacheKey(url, kind)\n\n  // initiates the fetch request for the prefetch and attaches a listener\n  // to the promise to update the prefetch cache entry when the promise resolves (if necessary)\n  const data = prefetchQueue.enqueue(() =>\n    fetchServerResponse(url, {\n      flightRouterState: tree,\n      nextUrl,\n      prefetchKind: kind,\n    }).then((prefetchResponse) => {\n      // TODO: `fetchServerResponse` should be more tighly coupled to these prefetch cache operations\n      // to avoid drift between this cache key prefixing logic\n      // (which is currently directly influenced by the server response)\n      let newCacheKey\n\n      if (prefetchResponse.couldBeIntercepted) {\n        // Determine if we need to prefix the cache key with the nextUrl\n        newCacheKey = prefixExistingPrefetchCacheEntry({\n          url,\n          existingCacheKey: prefetchCacheKey,\n          nextUrl,\n          prefetchCache,\n        })\n      }\n\n      // If the prefetch was a cache hit, we want to update the existing cache entry to reflect that it was a full prefetch.\n      // This is because we know that a static response will contain the full RSC payload, and can be updated to respect the `static`\n      // staleTime.\n      if (prefetchResponse.prerendered) {\n        const existingCacheEntry = prefetchCache.get(\n          // if we prefixed the cache key due to route interception, we want to use the new key. Otherwise we use the original key\n          newCacheKey ?? prefetchCacheKey\n        )\n        if (existingCacheEntry) {\n          existingCacheEntry.kind = PrefetchKind.FULL\n          if (prefetchResponse.staleTime !== -1) {\n            // This is the stale time that was collected by the server during\n            // static generation. Use this in place of the default stale time.\n            existingCacheEntry.staleTime = prefetchResponse.staleTime\n          }\n        }\n      }\n\n      return prefetchResponse\n    })\n  )\n\n  const prefetchEntry = {\n    treeAtTimeOfPrefetch: tree,\n    data,\n    kind,\n    prefetchTime: Date.now(),\n    lastUsedTime: null,\n    staleTime: -1,\n    key: prefetchCacheKey,\n    status: PrefetchCacheEntryStatus.fresh,\n    url,\n  }\n\n  prefetchCache.set(prefetchCacheKey, prefetchEntry)\n\n  return prefetchEntry\n}\n\nexport function prunePrefetchCache(\n  prefetchCache: ReadonlyReducerState['prefetchCache']\n) {\n  for (const [href, prefetchCacheEntry] of prefetchCache) {\n    if (\n      getPrefetchEntryCacheStatus(prefetchCacheEntry) ===\n      PrefetchCacheEntryStatus.expired\n    ) {\n      prefetchCache.delete(href)\n    }\n  }\n}\n\n// These values are set by `define-env-plugin` (based on `nextConfig.experimental.staleTimes`)\n// and default to 5 minutes (static) / 0 seconds (dynamic)\nexport const DYNAMIC_STALETIME_MS =\n  Number(process.env.__NEXT_CLIENT_ROUTER_DYNAMIC_STALETIME) * 1000\n\nexport const STATIC_STALETIME_MS =\n  Number(process.env.__NEXT_CLIENT_ROUTER_STATIC_STALETIME) * 1000\n\nfunction getPrefetchEntryCacheStatus({\n  kind,\n  prefetchTime,\n  lastUsedTime,\n  staleTime,\n}: PrefetchCacheEntry): PrefetchCacheEntryStatus {\n  if (staleTime !== -1) {\n    // `staleTime` is the value sent by the server during static generation.\n    // When this is available, it takes precedence over any of the heuristics\n    // that follow.\n    //\n    // TODO: When PPR is enabled, the server will *always* return a stale time\n    // when prefetching. We should never use a prefetch entry that hasn't yet\n    // received data from the server. So the only two cases should be 1) we use\n    // the server-generated stale time 2) the unresolved entry is discarded.\n    return Date.now() < prefetchTime + staleTime\n      ? PrefetchCacheEntryStatus.fresh\n      : PrefetchCacheEntryStatus.stale\n  }\n\n  // We will re-use the cache entry data for up to the `dynamic` staletime window.\n  if (Date.now() < (lastUsedTime ?? prefetchTime) + DYNAMIC_STALETIME_MS) {\n    return lastUsedTime\n      ? PrefetchCacheEntryStatus.reusable\n      : PrefetchCacheEntryStatus.fresh\n  }\n\n  // For \"auto\" prefetching, we'll re-use only the loading boundary for up to `static` staletime window.\n  // A stale entry will only re-use the `loading` boundary, not the full data.\n  // This will trigger a \"lazy fetch\" for the full data.\n  if (kind === PrefetchKind.AUTO) {\n    if (Date.now() < prefetchTime + STATIC_STALETIME_MS) {\n      return PrefetchCacheEntryStatus.stale\n    }\n  }\n\n  // for \"full\" prefetching, we'll re-use the cache entry data for up to `static` staletime window.\n  if (kind === PrefetchKind.FULL) {\n    if (Date.now() < prefetchTime + STATIC_STALETIME_MS) {\n      return PrefetchCacheEntryStatus.reusable\n    }\n  }\n\n  return PrefetchCacheEntryStatus.expired\n}\n","import { warnOnce } from '../../utils/warn-once'\n\n/**\n * Run function with `scroll-behavior: auto` applied to `<html/>`.\n * This css change will be reverted after the function finishes.\n */\nexport function disableSmoothScrollDuringRouteTransition(\n  fn: () => void,\n  options: { dontForceLayout?: boolean; onlyHashChange?: boolean } = {}\n) {\n  // if only the hash is changed, we don't need to disable smooth scrolling\n  // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX\n  if (options.onlyHashChange) {\n    fn()\n    return\n  }\n\n  const htmlElement = document.documentElement\n  const hasDataAttribute = htmlElement.dataset.scrollBehavior === 'smooth'\n\n  // Since this is a breaking change, this is temporarily flagged\n  // and will be false by default.\n  // In the next major (v16), this will be automatically enabled\n  if (process.env.__NEXT_OPTIMIZE_ROUTER_SCROLL) {\n    if (!hasDataAttribute) {\n      // No smooth scrolling configured, run directly without style manipulation\n      fn()\n      return\n    }\n  } else {\n    // Old behavior: always manipulate styles, but warn about upcoming change\n\n    // Warn if smooth scrolling is detected but no data attribute is present\n    if (\n      process.env.NODE_ENV === 'development' &&\n      !hasDataAttribute &&\n      getComputedStyle(htmlElement).scrollBehavior === 'smooth'\n    ) {\n      warnOnce(\n        'Detected `scroll-behavior: smooth` on the `<html>` element. In a future version, ' +\n          'Next.js will no longer automatically disable smooth scrolling during route transitions. ' +\n          'To prepare for this change, add `data-scroll-behavior=\"smooth\"` to your <html> element. ' +\n          'Learn more: https://nextjs.org/docs/messages/missing-data-scroll-behavior'\n      )\n    }\n  }\n\n  // Proceed with temporarily disabling smooth scrolling\n  const existing = htmlElement.style.scrollBehavior\n  htmlElement.style.scrollBehavior = 'auto'\n  if (!options.dontForceLayout) {\n    // In Chrome-based browsers we need to force reflow before calling `scrollTo`.\n    // Otherwise it will not pickup the change in scrollBehavior\n    // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042\n    htmlElement.getClientRects()\n  }\n  fn()\n  htmlElement.style.scrollBehavior = existing\n}\n","import type { FlightRouterState } from '../../../server/app-render/types'\n\nexport function isNavigatingToNewRootLayout(\n  currentTree: FlightRouterState,\n  nextTree: FlightRouterState\n): boolean {\n  // Compare segments\n  const currentTreeSegment = currentTree[0]\n  const nextTreeSegment = nextTree[0]\n\n  // If any segment is different before we find the root layout, the root layout has changed.\n  // E.g. /same/(group1)/layout.js -> /same/(group2)/layout.js\n  // First segment is 'same' for both, keep looking. (group1) changed to (group2) before the root layout was found, it must have changed.\n  if (Array.isArray(currentTreeSegment) && Array.isArray(nextTreeSegment)) {\n    // Compare dynamic param name and type but ignore the value, different values would not affect the current root layout\n    // /[name] - /slug1 and /slug2, both values (slug1 & slug2) still has the same layout /[name]/layout.js\n    if (\n      currentTreeSegment[0] !== nextTreeSegment[0] ||\n      currentTreeSegment[2] !== nextTreeSegment[2]\n    ) {\n      return true\n    }\n  } else if (currentTreeSegment !== nextTreeSegment) {\n    return true\n  }\n\n  // Current tree root layout found\n  if (currentTree[4]) {\n    // If the next tree doesn't have the root layout flag, it must have changed.\n    return !nextTree[4]\n  }\n  // Current tree didn't have its root layout here, must have changed.\n  if (nextTree[4]) {\n    return true\n  }\n  // We can't assume it's `parallelRoutes.children` here in case the root layout is `app/@something/layout.js`\n  // But it's not possible to be more than one parallelRoutes before the root layout is found\n  // TODO-APP: change to traverse all parallel routes\n  const currentTreeChild = Object.values(currentTree[1])[0]\n  const nextTreeChild = Object.values(nextTree[1])[0]\n  if (!currentTreeChild || !nextTreeChild) return true\n  return isNavigatingToNewRootLayout(currentTreeChild, nextTreeChild)\n}\n","/**\n * @license React\n * react.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n  REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n  REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\"),\n  REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n  REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n  REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n  REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n  REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n  REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nfunction getIteratorFn(maybeIterable) {\n  if (null === maybeIterable || \"object\" !== typeof maybeIterable) return null;\n  maybeIterable =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[\"@@iterator\"];\n  return \"function\" === typeof maybeIterable ? maybeIterable : null;\n}\nvar ReactNoopUpdateQueue = {\n    isMounted: function () {\n      return !1;\n    },\n    enqueueForceUpdate: function () {},\n    enqueueReplaceState: function () {},\n    enqueueSetState: function () {}\n  },\n  assign = Object.assign,\n  emptyObject = {};\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\nComponent.prototype.isReactComponent = {};\nComponent.prototype.setState = function (partialState, callback) {\n  if (\n    \"object\" !== typeof partialState &&\n    \"function\" !== typeof partialState &&\n    null != partialState\n  )\n    throw Error(\n      \"takes an object of state variables to update or a function which returns an object of state variables.\"\n    );\n  this.updater.enqueueSetState(this, partialState, callback, \"setState\");\n};\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, \"forceUpdate\");\n};\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\nvar pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());\npureComponentPrototype.constructor = PureComponent;\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = !0;\nvar isArrayImpl = Array.isArray;\nfunction noop() {}\nvar ReactSharedInternals = { H: null, A: null, T: null, S: null },\n  hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction ReactElement(type, key, self, source, owner, props) {\n  self = props.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== self ? self : null,\n    props: props\n  };\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  return ReactElement(\n    oldElement.type,\n    newKey,\n    void 0,\n    void 0,\n    void 0,\n    oldElement.props\n  );\n}\nfunction isValidElement(object) {\n  return (\n    \"object\" === typeof object &&\n    null !== object &&\n    object.$$typeof === REACT_ELEMENT_TYPE\n  );\n}\nfunction escape(key) {\n  var escaperLookup = { \"=\": \"=0\", \":\": \"=2\" };\n  return (\n    \"$\" +\n    key.replace(/[=:]/g, function (match) {\n      return escaperLookup[match];\n    })\n  );\n}\nvar userProvidedKeyEscapeRegex = /\\/+/g;\nfunction getElementKey(element, index) {\n  return \"object\" === typeof element && null !== element && null != element.key\n    ? escape(\"\" + element.key)\n    : index.toString(36);\n}\nfunction resolveThenable(thenable) {\n  switch (thenable.status) {\n    case \"fulfilled\":\n      return thenable.value;\n    case \"rejected\":\n      throw thenable.reason;\n    default:\n      switch (\n        (\"string\" === typeof thenable.status\n          ? thenable.then(noop, noop)\n          : ((thenable.status = \"pending\"),\n            thenable.then(\n              function (fulfilledValue) {\n                \"pending\" === thenable.status &&\n                  ((thenable.status = \"fulfilled\"),\n                  (thenable.value = fulfilledValue));\n              },\n              function (error) {\n                \"pending\" === thenable.status &&\n                  ((thenable.status = \"rejected\"), (thenable.reason = error));\n              }\n            )),\n        thenable.status)\n      ) {\n        case \"fulfilled\":\n          return thenable.value;\n        case \"rejected\":\n          throw thenable.reason;\n      }\n  }\n  throw thenable;\n}\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n  if (\"undefined\" === type || \"boolean\" === type) children = null;\n  var invokeCallback = !1;\n  if (null === children) invokeCallback = !0;\n  else\n    switch (type) {\n      case \"bigint\":\n      case \"string\":\n      case \"number\":\n        invokeCallback = !0;\n        break;\n      case \"object\":\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = !0;\n            break;\n          case REACT_LAZY_TYPE:\n            return (\n              (invokeCallback = children._init),\n              mapIntoArray(\n                invokeCallback(children._payload),\n                array,\n                escapedPrefix,\n                nameSoFar,\n                callback\n              )\n            );\n        }\n    }\n  if (invokeCallback)\n    return (\n      (callback = callback(children)),\n      (invokeCallback =\n        \"\" === nameSoFar ? \".\" + getElementKey(children, 0) : nameSoFar),\n      isArrayImpl(callback)\n        ? ((escapedPrefix = \"\"),\n          null != invokeCallback &&\n            (escapedPrefix =\n              invokeCallback.replace(userProvidedKeyEscapeRegex, \"$&/\") + \"/\"),\n          mapIntoArray(callback, array, escapedPrefix, \"\", function (c) {\n            return c;\n          }))\n        : null != callback &&\n          (isValidElement(callback) &&\n            (callback = cloneAndReplaceKey(\n              callback,\n              escapedPrefix +\n                (null == callback.key ||\n                (children && children.key === callback.key)\n                  ? \"\"\n                  : (\"\" + callback.key).replace(\n                      userProvidedKeyEscapeRegex,\n                      \"$&/\"\n                    ) + \"/\") +\n                invokeCallback\n            )),\n          array.push(callback)),\n      1\n    );\n  invokeCallback = 0;\n  var nextNamePrefix = \"\" === nameSoFar ? \".\" : nameSoFar + \":\";\n  if (isArrayImpl(children))\n    for (var i = 0; i < children.length; i++)\n      (nameSoFar = children[i]),\n        (type = nextNamePrefix + getElementKey(nameSoFar, i)),\n        (invokeCallback += mapIntoArray(\n          nameSoFar,\n          array,\n          escapedPrefix,\n          type,\n          callback\n        ));\n  else if (((i = getIteratorFn(children)), \"function\" === typeof i))\n    for (\n      children = i.call(children), i = 0;\n      !(nameSoFar = children.next()).done;\n\n    )\n      (nameSoFar = nameSoFar.value),\n        (type = nextNamePrefix + getElementKey(nameSoFar, i++)),\n        (invokeCallback += mapIntoArray(\n          nameSoFar,\n          array,\n          escapedPrefix,\n          type,\n          callback\n        ));\n  else if (\"object\" === type) {\n    if (\"function\" === typeof children.then)\n      return mapIntoArray(\n        resolveThenable(children),\n        array,\n        escapedPrefix,\n        nameSoFar,\n        callback\n      );\n    array = String(children);\n    throw Error(\n      \"Objects are not valid as a React child (found: \" +\n        (\"[object Object]\" === array\n          ? \"object with keys {\" + Object.keys(children).join(\", \") + \"}\"\n          : array) +\n        \"). If you meant to render a collection of children, use an array instead.\"\n    );\n  }\n  return invokeCallback;\n}\nfunction mapChildren(children, func, context) {\n  if (null == children) return children;\n  var result = [],\n    count = 0;\n  mapIntoArray(children, result, \"\", \"\", function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\nfunction lazyInitializer(payload) {\n  if (-1 === payload._status) {\n    var ctor = payload._result;\n    ctor = ctor();\n    ctor.then(\n      function (moduleObject) {\n        if (0 === payload._status || -1 === payload._status)\n          (payload._status = 1), (payload._result = moduleObject);\n      },\n      function (error) {\n        if (0 === payload._status || -1 === payload._status)\n          (payload._status = 2), (payload._result = error);\n      }\n    );\n    -1 === payload._status && ((payload._status = 0), (payload._result = ctor));\n  }\n  if (1 === payload._status) return payload._result.default;\n  throw payload._result;\n}\nvar reportGlobalError =\n  \"function\" === typeof reportError\n    ? reportError\n    : function (error) {\n        if (\n          \"object\" === typeof window &&\n          \"function\" === typeof window.ErrorEvent\n        ) {\n          var event = new window.ErrorEvent(\"error\", {\n            bubbles: !0,\n            cancelable: !0,\n            message:\n              \"object\" === typeof error &&\n              null !== error &&\n              \"string\" === typeof error.message\n                ? String(error.message)\n                : String(error),\n            error: error\n          });\n          if (!window.dispatchEvent(event)) return;\n        } else if (\n          \"object\" === typeof process &&\n          \"function\" === typeof process.emit\n        ) {\n          process.emit(\"uncaughtException\", error);\n          return;\n        }\n        console.error(error);\n      };\nexports.Children = {\n  map: mapChildren,\n  forEach: function (children, forEachFunc, forEachContext) {\n    mapChildren(\n      children,\n      function () {\n        forEachFunc.apply(this, arguments);\n      },\n      forEachContext\n    );\n  },\n  count: function (children) {\n    var n = 0;\n    mapChildren(children, function () {\n      n++;\n    });\n    return n;\n  },\n  toArray: function (children) {\n    return (\n      mapChildren(children, function (child) {\n        return child;\n      }) || []\n    );\n  },\n  only: function (children) {\n    if (!isValidElement(children))\n      throw Error(\n        \"React.Children.only expected to receive a single React element child.\"\n      );\n    return children;\n  }\n};\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =\n  ReactSharedInternals;\nexports.__COMPILER_RUNTIME = {\n  __proto__: null,\n  c: function (size) {\n    return ReactSharedInternals.H.useMemoCache(size);\n  }\n};\nexports.cache = function (fn) {\n  return function () {\n    return fn.apply(null, arguments);\n  };\n};\nexports.cacheSignal = function () {\n  return null;\n};\nexports.cloneElement = function (element, config, children) {\n  if (null === element || void 0 === element)\n    throw Error(\n      \"The argument must be a React element, but you passed \" + element + \".\"\n    );\n  var props = assign({}, element.props),\n    key = element.key,\n    owner = void 0;\n  if (null != config)\n    for (propName in (void 0 !== config.ref && (owner = void 0),\n    void 0 !== config.key && (key = \"\" + config.key),\n    config))\n      !hasOwnProperty.call(config, propName) ||\n        \"key\" === propName ||\n        \"__self\" === propName ||\n        \"__source\" === propName ||\n        (\"ref\" === propName && void 0 === config.ref) ||\n        (props[propName] = config[propName]);\n  var propName = arguments.length - 2;\n  if (1 === propName) props.children = children;\n  else if (1 < propName) {\n    for (var childArray = Array(propName), i = 0; i < propName; i++)\n      childArray[i] = arguments[i + 2];\n    props.children = childArray;\n  }\n  return ReactElement(element.type, key, void 0, void 0, owner, props);\n};\nexports.createContext = function (defaultValue) {\n  defaultValue = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    _threadCount: 0,\n    Provider: null,\n    Consumer: null\n  };\n  defaultValue.Provider = defaultValue;\n  defaultValue.Consumer = {\n    $$typeof: REACT_CONSUMER_TYPE,\n    _context: defaultValue\n  };\n  return defaultValue;\n};\nexports.createElement = function (type, config, children) {\n  var propName,\n    props = {},\n    key = null;\n  if (null != config)\n    for (propName in (void 0 !== config.key && (key = \"\" + config.key), config))\n      hasOwnProperty.call(config, propName) &&\n        \"key\" !== propName &&\n        \"__self\" !== propName &&\n        \"__source\" !== propName &&\n        (props[propName] = config[propName]);\n  var childrenLength = arguments.length - 2;\n  if (1 === childrenLength) props.children = children;\n  else if (1 < childrenLength) {\n    for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)\n      childArray[i] = arguments[i + 2];\n    props.children = childArray;\n  }\n  if (type && type.defaultProps)\n    for (propName in ((childrenLength = type.defaultProps), childrenLength))\n      void 0 === props[propName] &&\n        (props[propName] = childrenLength[propName]);\n  return ReactElement(type, key, void 0, void 0, null, props);\n};\nexports.createRef = function () {\n  return { current: null };\n};\nexports.forwardRef = function (render) {\n  return { $$typeof: REACT_FORWARD_REF_TYPE, render: render };\n};\nexports.isValidElement = isValidElement;\nexports.lazy = function (ctor) {\n  return {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: { _status: -1, _result: ctor },\n    _init: lazyInitializer\n  };\n};\nexports.memo = function (type, compare) {\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: void 0 === compare ? null : compare\n  };\n};\nexports.startTransition = function (scope) {\n  var prevTransition = ReactSharedInternals.T,\n    currentTransition = {};\n  ReactSharedInternals.T = currentTransition;\n  try {\n    var returnValue = scope(),\n      onStartTransitionFinish = ReactSharedInternals.S;\n    null !== onStartTransitionFinish &&\n      onStartTransitionFinish(currentTransition, returnValue);\n    \"object\" === typeof returnValue &&\n      null !== returnValue &&\n      \"function\" === typeof returnValue.then &&\n      returnValue.then(noop, reportGlobalError);\n  } catch (error) {\n    reportGlobalError(error);\n  } finally {\n    null !== prevTransition &&\n      null !== currentTransition.types &&\n      (prevTransition.types = currentTransition.types),\n      (ReactSharedInternals.T = prevTransition);\n  }\n};\nexports.unstable_useCacheRefresh = function () {\n  return ReactSharedInternals.H.useCacheRefresh();\n};\nexports.use = function (usable) {\n  return ReactSharedInternals.H.use(usable);\n};\nexports.useActionState = function (action, initialState, permalink) {\n  return ReactSharedInternals.H.useActionState(action, initialState, permalink);\n};\nexports.useCallback = function (callback, deps) {\n  return ReactSharedInternals.H.useCallback(callback, deps);\n};\nexports.useContext = function (Context) {\n  return ReactSharedInternals.H.useContext(Context);\n};\nexports.useDebugValue = function () {};\nexports.useDeferredValue = function (value, initialValue) {\n  return ReactSharedInternals.H.useDeferredValue(value, initialValue);\n};\nexports.useEffect = function (create, deps) {\n  return ReactSharedInternals.H.useEffect(create, deps);\n};\nexports.useId = function () {\n  return ReactSharedInternals.H.useId();\n};\nexports.useImperativeHandle = function (ref, create, deps) {\n  return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);\n};\nexports.useInsertionEffect = function (create, deps) {\n  return ReactSharedInternals.H.useInsertionEffect(create, deps);\n};\nexports.useLayoutEffect = function (create, deps) {\n  return ReactSharedInternals.H.useLayoutEffect(create, deps);\n};\nexports.useMemo = function (create, deps) {\n  return ReactSharedInternals.H.useMemo(create, deps);\n};\nexports.useOptimistic = function (passthrough, reducer) {\n  return ReactSharedInternals.H.useOptimistic(passthrough, reducer);\n};\nexports.useReducer = function (reducer, initialArg, init) {\n  return ReactSharedInternals.H.useReducer(reducer, initialArg, init);\n};\nexports.useRef = function (initialValue) {\n  return ReactSharedInternals.H.useRef(initialValue);\n};\nexports.useState = function (initialState) {\n  return ReactSharedInternals.H.useState(initialState);\n};\nexports.useSyncExternalStore = function (\n  subscribe,\n  getSnapshot,\n  getServerSnapshot\n) {\n  return ReactSharedInternals.H.useSyncExternalStore(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot\n  );\n};\nexports.useTransition = function () {\n  return ReactSharedInternals.H.useTransition();\n};\nexports.version = \"19.2.0-canary-97cdd5d3-20250710\";\n","import { normalizeAppPath } from './app-paths'\n\n// order matters here, the first match will be used\nexport const INTERCEPTION_ROUTE_MARKERS = [\n  '(..)(..)',\n  '(.)',\n  '(..)',\n  '(...)',\n] as const\n\nexport function isInterceptionRouteAppPath(path: string): boolean {\n  // TODO-APP: add more serious validation\n  return (\n    path\n      .split('/')\n      .find((segment) =>\n        INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n      ) !== undefined\n  )\n}\n\nexport function extractInterceptionRouteInformation(path: string) {\n  let interceptingRoute: string | undefined,\n    marker: (typeof INTERCEPTION_ROUTE_MARKERS)[number] | undefined,\n    interceptedRoute: string | undefined\n\n  for (const segment of path.split('/')) {\n    marker = INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))\n    if (marker) {\n      ;[interceptingRoute, interceptedRoute] = path.split(marker, 2)\n      break\n    }\n  }\n\n  if (!interceptingRoute || !marker || !interceptedRoute) {\n    throw new Error(\n      `Invalid interception route: ${path}. Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>`\n    )\n  }\n\n  interceptingRoute = normalizeAppPath(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed\n\n  switch (marker) {\n    case '(.)':\n      // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route\n      if (interceptingRoute === '/') {\n        interceptedRoute = `/${interceptedRoute}`\n      } else {\n        interceptedRoute = interceptingRoute + '/' + interceptedRoute\n      }\n      break\n    case '(..)':\n      // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route\n      if (interceptingRoute === '/') {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..) marker at the root level, use (.) instead.`\n        )\n      }\n      interceptedRoute = interceptingRoute\n        .split('/')\n        .slice(0, -1)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    case '(...)':\n      // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route\n      interceptedRoute = '/' + interceptedRoute\n      break\n    case '(..)(..)':\n      // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route\n\n      const splitInterceptingRoute = interceptingRoute.split('/')\n      if (splitInterceptingRoute.length <= 2) {\n        throw new Error(\n          `Invalid interception route: ${path}. Cannot use (..)(..) marker at the root level or one level up.`\n        )\n      }\n\n      interceptedRoute = splitInterceptingRoute\n        .slice(0, -2)\n        .concat(interceptedRoute)\n        .join('/')\n      break\n    default:\n      throw new Error('Invariant: unexpected marker')\n  }\n\n  return { interceptingRoute, interceptedRoute }\n}\n","'use client'\n\nimport type {\n  CacheNode,\n  LazyCacheNode,\n  LoadingModuleData,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../server/app-render/types'\nimport type { ErrorComponent } from './error-boundary'\nimport {\n  ACTION_SERVER_PATCH,\n  type FocusAndScrollRef,\n} from './router-reducer/router-reducer-types'\n\nimport React, {\n  useContext,\n  use,\n  startTransition,\n  Suspense,\n  useDeferredValue,\n  type JSX,\n} from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  LayoutRouterContext,\n  GlobalLayoutRouterContext,\n  TemplateContext,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport { fetchServerResponse } from './router-reducer/fetch-server-response'\nimport { unresolvedThenable } from './unresolved-thenable'\nimport { ErrorBoundary } from './error-boundary'\nimport { matchSegment } from './match-segments'\nimport { disableSmoothScrollDuringRouteTransition } from '../../shared/lib/router/utils/disable-smooth-scroll'\nimport { RedirectBoundary } from './redirect-boundary'\nimport { HTTPAccessFallbackBoundary } from './http-access-fallback/error-boundary'\nimport { createRouterCacheKey } from './router-reducer/create-router-cache-key'\nimport { hasInterceptionRouteInCurrentTree } from './router-reducer/reducers/has-interception-route-in-current-tree'\nimport { dispatchAppRouterAction } from './use-action-queue'\nimport { useRouterBFCache, type RouterBFCacheEntry } from './bfcache'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\n\nconst Activity = process.env.__NEXT_ROUTER_BF_CACHE\n  ? (require('react') as typeof import('react')).unstable_Activity\n  : null!\n\n/**\n * Add refetch marker to router state at the point of the current layout segment.\n * This ensures the response returned is not further down than the current layout segment.\n */\nfunction walkAddRefetch(\n  segmentPathToWalk: FlightSegmentPath | undefined,\n  treeToRecreate: FlightRouterState\n): FlightRouterState {\n  if (segmentPathToWalk) {\n    const [segment, parallelRouteKey] = segmentPathToWalk\n    const isLast = segmentPathToWalk.length === 2\n\n    if (matchSegment(treeToRecreate[0], segment)) {\n      if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {\n        if (isLast) {\n          const subTree = walkAddRefetch(\n            undefined,\n            treeToRecreate[1][parallelRouteKey]\n          )\n          return [\n            treeToRecreate[0],\n            {\n              ...treeToRecreate[1],\n              [parallelRouteKey]: [\n                subTree[0],\n                subTree[1],\n                subTree[2],\n                'refetch',\n              ],\n            },\n          ]\n        }\n\n        return [\n          treeToRecreate[0],\n          {\n            ...treeToRecreate[1],\n            [parallelRouteKey]: walkAddRefetch(\n              segmentPathToWalk.slice(2),\n              treeToRecreate[1][parallelRouteKey]\n            ),\n          },\n        ]\n      }\n    }\n  }\n\n  return treeToRecreate\n}\n\nconst __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = (\n  ReactDOM as any\n).__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE\n\n// TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available\n/**\n * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning\n */\nfunction findDOMNode(\n  instance: React.ReactInstance | null | undefined\n): Element | Text | null {\n  // Tree-shake for server bundle\n  if (typeof window === 'undefined') return null\n\n  // __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode is null during module init.\n  // We need to lazily reference it.\n  const internal_reactDOMfindDOMNode =\n    __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode\n  return internal_reactDOMfindDOMNode(instance)\n}\n\nconst rectProperties = [\n  'bottom',\n  'height',\n  'left',\n  'right',\n  'top',\n  'width',\n  'x',\n  'y',\n] as const\n/**\n * Check if a HTMLElement is hidden or fixed/sticky position\n */\nfunction shouldSkipElement(element: HTMLElement) {\n  // we ignore fixed or sticky positioned elements since they'll likely pass the \"in-viewport\" check\n  // and will result in a situation we bail on scroll because of something like a fixed nav,\n  // even though the actual page content is offscreen\n  if (['sticky', 'fixed'].includes(getComputedStyle(element).position)) {\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(\n        'Skipping auto-scroll behavior due to `position: sticky` or `position: fixed` on element:',\n        element\n      )\n    }\n    return true\n  }\n\n  // Uses `getBoundingClientRect` to check if the element is hidden instead of `offsetParent`\n  // because `offsetParent` doesn't consider document/body\n  const rect = element.getBoundingClientRect()\n  return rectProperties.every((item) => rect[item] === 0)\n}\n\n/**\n * Check if the top corner of the HTMLElement is in the viewport.\n */\nfunction topOfElementInViewport(element: HTMLElement, viewportHeight: number) {\n  const rect = element.getBoundingClientRect()\n  return rect.top >= 0 && rect.top <= viewportHeight\n}\n\n/**\n * Find the DOM node for a hash fragment.\n * If `top` the page has to scroll to the top of the page. This mirrors the browser's behavior.\n * If the hash fragment is an id, the page has to scroll to the element with that id.\n * If the hash fragment is a name, the page has to scroll to the first element with that name.\n */\nfunction getHashFragmentDomNode(hashFragment: string) {\n  // If the hash fragment is `top` the page has to scroll to the top of the page.\n  if (hashFragment === 'top') {\n    return document.body\n  }\n\n  // If the hash fragment is an id, the page has to scroll to the element with that id.\n  return (\n    document.getElementById(hashFragment) ??\n    // If the hash fragment is a name, the page has to scroll to the first element with that name.\n    document.getElementsByName(hashFragment)[0]\n  )\n}\ninterface ScrollAndFocusHandlerProps {\n  focusAndScrollRef: FocusAndScrollRef\n  children: React.ReactNode\n  segmentPath: FlightSegmentPath\n}\nclass InnerScrollAndFocusHandler extends React.Component<ScrollAndFocusHandlerProps> {\n  handlePotentialScroll = () => {\n    // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.\n    const { focusAndScrollRef, segmentPath } = this.props\n\n    if (focusAndScrollRef.apply) {\n      // segmentPaths is an array of segment paths that should be scrolled to\n      // if the current segment path is not in the array, the scroll is not applied\n      // unless the array is empty, in which case the scroll is always applied\n      if (\n        focusAndScrollRef.segmentPaths.length !== 0 &&\n        !focusAndScrollRef.segmentPaths.some((scrollRefSegmentPath) =>\n          segmentPath.every((segment, index) =>\n            matchSegment(segment, scrollRefSegmentPath[index])\n          )\n        )\n      ) {\n        return\n      }\n\n      let domNode:\n        | ReturnType<typeof getHashFragmentDomNode>\n        | ReturnType<typeof findDOMNode> = null\n      const hashFragment = focusAndScrollRef.hashFragment\n\n      if (hashFragment) {\n        domNode = getHashFragmentDomNode(hashFragment)\n      }\n\n      // `findDOMNode` is tricky because it returns just the first child if the component is a fragment.\n      // This already caused a bug where the first child was a <link/> in head.\n      if (!domNode) {\n        domNode = findDOMNode(this)\n      }\n\n      // If there is no DOM node this layout-router level is skipped. It'll be handled higher-up in the tree.\n      if (!(domNode instanceof Element)) {\n        return\n      }\n\n      // Verify if the element is a HTMLElement and if we want to consider it for scroll behavior.\n      // If the element is skipped, try to select the next sibling and try again.\n      while (!(domNode instanceof HTMLElement) || shouldSkipElement(domNode)) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (domNode.parentElement?.localName === 'head') {\n            // TODO: We enter this state when metadata was rendered as part of the page or via Next.js.\n            // This is always a bug in Next.js and caused by React hoisting metadata.\n            // We need to replace `findDOMNode` in favor of Fragment Refs (when available) so that we can skip over metadata.\n          }\n        }\n\n        // No siblings found that match the criteria are found, so handle scroll higher up in the tree instead.\n        if (domNode.nextElementSibling === null) {\n          return\n        }\n        domNode = domNode.nextElementSibling\n      }\n\n      // State is mutated to ensure that the focus and scroll is applied only once.\n      focusAndScrollRef.apply = false\n      focusAndScrollRef.hashFragment = null\n      focusAndScrollRef.segmentPaths = []\n\n      disableSmoothScrollDuringRouteTransition(\n        () => {\n          // In case of hash scroll, we only need to scroll the element into view\n          if (hashFragment) {\n            ;(domNode as HTMLElement).scrollIntoView()\n\n            return\n          }\n          // Store the current viewport height because reading `clientHeight` causes a reflow,\n          // and it won't change during this function.\n          const htmlElement = document.documentElement\n          const viewportHeight = htmlElement.clientHeight\n\n          // If the element's top edge is already in the viewport, exit early.\n          if (topOfElementInViewport(domNode as HTMLElement, viewportHeight)) {\n            return\n          }\n\n          // Otherwise, try scrolling go the top of the document to be backward compatible with pages\n          // scrollIntoView() called on `<html/>` element scrolls horizontally on chrome and firefox (that shouldn't happen)\n          // We could use it to scroll horizontally following RTL but that also seems to be broken - it will always scroll left\n          // scrollLeft = 0 also seems to ignore RTL and manually checking for RTL is too much hassle so we will scroll just vertically\n          htmlElement.scrollTop = 0\n\n          // Scroll to domNode if domNode is not in viewport when scrolled to top of document\n          if (!topOfElementInViewport(domNode as HTMLElement, viewportHeight)) {\n            // Scroll into view doesn't scroll horizontally by default when not needed\n            ;(domNode as HTMLElement).scrollIntoView()\n          }\n        },\n        {\n          // We will force layout by querying domNode position\n          dontForceLayout: true,\n          onlyHashChange: focusAndScrollRef.onlyHashChange,\n        }\n      )\n\n      // Mutate after scrolling so that it can be read by `disableSmoothScrollDuringRouteTransition`\n      focusAndScrollRef.onlyHashChange = false\n\n      // Set focus on the element\n      domNode.focus()\n    }\n  }\n\n  componentDidMount() {\n    this.handlePotentialScroll()\n  }\n\n  componentDidUpdate() {\n    // Because this property is overwritten in handlePotentialScroll it's fine to always run it when true as it'll be set to false for subsequent renders.\n    if (this.props.focusAndScrollRef.apply) {\n      this.handlePotentialScroll()\n    }\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n\nfunction ScrollAndFocusHandler({\n  segmentPath,\n  children,\n}: {\n  segmentPath: FlightSegmentPath\n  children: React.ReactNode\n}) {\n  const context = useContext(GlobalLayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant global layout router not mounted')\n  }\n\n  return (\n    <InnerScrollAndFocusHandler\n      segmentPath={segmentPath}\n      focusAndScrollRef={context.focusAndScrollRef}\n    >\n      {children}\n    </InnerScrollAndFocusHandler>\n  )\n}\n\n/**\n * InnerLayoutRouter handles rendering the provided segment based on the cache.\n */\nfunction InnerLayoutRouter({\n  tree,\n  segmentPath,\n  cacheNode,\n  url,\n}: {\n  tree: FlightRouterState\n  segmentPath: FlightSegmentPath\n  cacheNode: CacheNode\n  url: string\n}) {\n  const context = useContext(GlobalLayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant global layout router not mounted')\n  }\n\n  const { tree: fullTree } = context\n\n  // `rsc` represents the renderable node for this segment.\n\n  // If this segment has a `prefetchRsc`, it's the statically prefetched data.\n  // We should use that on initial render instead of `rsc`. Then we'll switch\n  // to `rsc` when the dynamic response streams in.\n  //\n  // If no prefetch data is available, then we go straight to rendering `rsc`.\n  const resolvedPrefetchRsc =\n    cacheNode.prefetchRsc !== null ? cacheNode.prefetchRsc : cacheNode.rsc\n\n  // We use `useDeferredValue` to handle switching between the prefetched and\n  // final values. The second argument is returned on initial render, then it\n  // re-renders with the first argument.\n  const rsc: any = useDeferredValue(cacheNode.rsc, resolvedPrefetchRsc)\n\n  // `rsc` is either a React node or a promise for a React node, except we\n  // special case `null` to represent that this segment's data is missing. If\n  // it's a promise, we need to unwrap it so we can determine whether or not the\n  // data is missing.\n  const resolvedRsc: React.ReactNode =\n    typeof rsc === 'object' && rsc !== null && typeof rsc.then === 'function'\n      ? use(rsc)\n      : rsc\n\n  if (!resolvedRsc) {\n    // The data for this segment is not available, and there's no pending\n    // navigation that will be able to fulfill it. We need to fetch more from\n    // the server and patch the cache.\n\n    // Check if there's already a pending request.\n    let lazyData = cacheNode.lazyData\n    if (lazyData === null) {\n      /**\n       * Router state with refetch marker added\n       */\n      // TODO-APP: remove ''\n      const refetchTree = walkAddRefetch(['', ...segmentPath], fullTree)\n      const includeNextUrl = hasInterceptionRouteInCurrentTree(fullTree)\n      const navigatedAt = Date.now()\n      cacheNode.lazyData = lazyData = fetchServerResponse(\n        new URL(url, location.origin),\n        {\n          flightRouterState: refetchTree,\n          nextUrl: includeNextUrl ? context.nextUrl : null,\n        }\n      ).then((serverResponse) => {\n        startTransition(() => {\n          dispatchAppRouterAction({\n            type: ACTION_SERVER_PATCH,\n            previousTree: fullTree,\n            serverResponse,\n            navigatedAt,\n          })\n        })\n\n        return serverResponse\n      })\n\n      // Suspend while waiting for lazyData to resolve\n      use(lazyData)\n    }\n    // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.\n    // A falsey `resolvedRsc` indicates missing data -- we should not commit that branch, and we need to wait for the data to arrive.\n    use(unresolvedThenable) as never\n  }\n\n  // If we get to this point, then we know we have something we can render.\n  const subtree = (\n    // The layout router context narrows down tree and childNodes at each level.\n    <LayoutRouterContext.Provider\n      value={{\n        parentTree: tree,\n        parentCacheNode: cacheNode,\n        parentSegmentPath: segmentPath,\n\n        // TODO-APP: overriding of url for parallel routes\n        url: url,\n      }}\n    >\n      {resolvedRsc}\n    </LayoutRouterContext.Provider>\n  )\n  // Ensure root layout is not wrapped in a div as the root layout renders `<html>`\n  return subtree\n}\n\n/**\n * Renders suspense boundary with the provided \"loading\" property as the fallback.\n * If no loading property is provided it renders the children without a suspense boundary.\n */\nfunction LoadingBoundary({\n  loading,\n  children,\n}: {\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n  children: React.ReactNode\n}): JSX.Element {\n  // If loading is a promise, unwrap it. This happens in cases where we haven't\n  // yet received the loading data from the server — which includes whether or\n  // not this layout has a loading component at all.\n  //\n  // It's OK to suspend here instead of inside the fallback because this\n  // promise will resolve simultaneously with the data for the segment itself.\n  // So it will never suspend for longer than it would have if we didn't use\n  // a Suspense fallback at all.\n  let loadingModuleData\n  if (\n    typeof loading === 'object' &&\n    loading !== null &&\n    typeof (loading as any).then === 'function'\n  ) {\n    const promiseForLoading = loading as Promise<LoadingModuleData>\n    loadingModuleData = use(promiseForLoading)\n  } else {\n    loadingModuleData = loading as LoadingModuleData\n  }\n\n  if (loadingModuleData) {\n    const loadingRsc = loadingModuleData[0]\n    const loadingStyles = loadingModuleData[1]\n    const loadingScripts = loadingModuleData[2]\n    return (\n      <Suspense\n        fallback={\n          <>\n            {loadingStyles}\n            {loadingScripts}\n            {loadingRsc}\n          </>\n        }\n      >\n        {children}\n      </Suspense>\n    )\n  }\n\n  return <>{children}</>\n}\n\nfunction RenderChildren({ children }: { children: React.ReactNode }) {\n  return <>{children}</>\n}\n\n/**\n * OuterLayoutRouter handles the current segment as well as <Offscreen> rendering of other segments.\n * It can be rendered next to each other with a different `parallelRouterKey`, allowing for Parallel routes.\n */\nexport default function OuterLayoutRouter({\n  parallelRouterKey,\n  error,\n  errorStyles,\n  errorScripts,\n  templateStyles,\n  templateScripts,\n  template,\n  notFound,\n  forbidden,\n  unauthorized,\n  gracefullyDegrade,\n  segmentViewBoundaries,\n}: {\n  parallelRouterKey: string\n  error: ErrorComponent | undefined\n  errorStyles: React.ReactNode | undefined\n  errorScripts: React.ReactNode | undefined\n  templateStyles: React.ReactNode | undefined\n  templateScripts: React.ReactNode | undefined\n  template: React.ReactNode\n  notFound: React.ReactNode | undefined\n  forbidden: React.ReactNode | undefined\n  unauthorized: React.ReactNode | undefined\n  gracefullyDegrade?: boolean\n  segmentViewBoundaries?: React.ReactNode\n}) {\n  const context = useContext(LayoutRouterContext)\n  if (!context) {\n    throw new Error('invariant expected layout router to be mounted')\n  }\n\n  const { parentTree, parentCacheNode, parentSegmentPath, url } = context\n\n  // Get the CacheNode for this segment by reading it from the parent segment's\n  // child map.\n  const parentParallelRoutes = parentCacheNode.parallelRoutes\n  let segmentMap = parentParallelRoutes.get(parallelRouterKey)\n  // If the parallel router cache node does not exist yet, create it.\n  // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.\n  if (!segmentMap) {\n    segmentMap = new Map()\n    parentParallelRoutes.set(parallelRouterKey, segmentMap)\n  }\n  const parentTreeSegment = parentTree[0]\n  const segmentPath =\n    parentSegmentPath === null\n      ? // TODO: The root segment value is currently omitted from the segment\n        // path. This has led to a bunch of special cases scattered throughout\n        // the code. We should clean this up.\n        [parallelRouterKey]\n      : parentSegmentPath.concat([parentTreeSegment, parallelRouterKey])\n\n  // The \"state\" key of a segment is the one passed to React — it represents the\n  // identity of the UI tree. Whenever the state key changes, the tree is\n  // recreated and the state is reset. In the App Router model, search params do\n  // not cause state to be lost, so two segments with the same segment path but\n  // different search params should have the same state key.\n  //\n  // The \"cache\" key of a segment, however, *does* include the search params, if\n  // it's possible that the segment accessed the search params on the server.\n  // (This only applies to page segments; layout segments cannot access search\n  // params on the server.)\n  const activeTree = parentTree[1][parallelRouterKey]\n  const activeSegment = activeTree[0]\n  const activeStateKey = createRouterCacheKey(activeSegment, true) // no search params\n\n  // At each level of the route tree, not only do we render the currently\n  // active segment — we also render the last N segments that were active at\n  // this level inside a hidden <Activity> boundary, to preserve their state\n  // if or when the user navigates to them again.\n  //\n  // bfcacheEntry is a linked list of FlightRouterStates.\n  let bfcacheEntry: RouterBFCacheEntry | null = useRouterBFCache(\n    activeTree,\n    activeStateKey\n  )\n  let children: Array<React.ReactNode> = []\n  do {\n    const tree = bfcacheEntry.tree\n    const stateKey = bfcacheEntry.stateKey\n    const segment = tree[0]\n    const cacheKey = createRouterCacheKey(segment)\n\n    // Read segment path from the parallel router cache node.\n    let cacheNode = segmentMap.get(cacheKey)\n    if (cacheNode === undefined) {\n      // When data is not available during rendering client-side we need to fetch\n      // it from the server.\n      const newLazyCacheNode: LazyCacheNode = {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt: -1,\n      }\n\n      // Flight data fetch kicked off during render and put into the cache.\n      cacheNode = newLazyCacheNode\n      segmentMap.set(cacheKey, newLazyCacheNode)\n    }\n\n    /*\n    - Error boundary\n      - Only renders error boundary if error component is provided.\n      - Rendered for each segment to ensure they have their own error state.\n      - When gracefully degrade for bots, skip rendering error boundary.\n    - Loading boundary\n      - Only renders suspense boundary if loading components is provided.\n      - Rendered for each segment to ensure they have their own loading state.\n      - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.\n  */\n\n    const ErrorBoundaryComponent = gracefullyDegrade\n      ? RenderChildren\n      : ErrorBoundary\n\n    let segmentBoundaryTriggerNode: React.ReactNode = null\n    let segmentViewStateNode: React.ReactNode = null\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      process.env.__NEXT_DEVTOOL_SEGMENT_EXPLORER\n    ) {\n      const { SegmentBoundaryTriggerNode, SegmentViewStateNode } =\n        require('../../next-devtools/userspace/app/segment-explorer-node') as typeof import('../../next-devtools/userspace/app/segment-explorer-node')\n\n      const pagePrefix = normalizeAppPath(url)\n      segmentViewStateNode = (\n        <SegmentViewStateNode key={pagePrefix} page={pagePrefix} />\n      )\n\n      segmentBoundaryTriggerNode = (\n        <>\n          <SegmentBoundaryTriggerNode />\n        </>\n      )\n    }\n\n    // TODO: The loading module data for a segment is stored on the parent, then\n    // applied to each of that parent segment's parallel route slots. In the\n    // simple case where there's only one parallel route (the `children` slot),\n    // this is no different from if the loading module data where stored on the\n    // child directly. But I'm not sure this actually makes sense when there are\n    // multiple parallel routes. It's not a huge issue because you always have\n    // the option to define a narrower loading boundary for a particular slot. But\n    // this sort of smells like an implementation accident to me.\n    const loadingModuleData = parentCacheNode.loading\n    let child = (\n      <TemplateContext.Provider\n        key={stateKey}\n        value={\n          <ScrollAndFocusHandler segmentPath={segmentPath}>\n            <ErrorBoundaryComponent\n              errorComponent={error}\n              errorStyles={errorStyles}\n              errorScripts={errorScripts}\n            >\n              <LoadingBoundary loading={loadingModuleData}>\n                <HTTPAccessFallbackBoundary\n                  notFound={notFound}\n                  forbidden={forbidden}\n                  unauthorized={unauthorized}\n                >\n                  <RedirectBoundary>\n                    <InnerLayoutRouter\n                      url={url}\n                      tree={tree}\n                      cacheNode={cacheNode}\n                      segmentPath={segmentPath}\n                    />\n                    {segmentBoundaryTriggerNode}\n                  </RedirectBoundary>\n                </HTTPAccessFallbackBoundary>\n              </LoadingBoundary>\n            </ErrorBoundaryComponent>\n            {segmentViewStateNode}\n          </ScrollAndFocusHandler>\n        }\n      >\n        {templateStyles}\n        {templateScripts}\n        {template}\n      </TemplateContext.Provider>\n    )\n\n    if (process.env.NODE_ENV !== 'production') {\n      const { SegmentStateProvider } =\n        require('../../next-devtools/userspace/app/segment-explorer-node') as typeof import('../../next-devtools/userspace/app/segment-explorer-node')\n\n      child = (\n        <SegmentStateProvider key={stateKey}>\n          {child}\n          {segmentViewBoundaries}\n        </SegmentStateProvider>\n      )\n    }\n\n    if (process.env.__NEXT_ROUTER_BF_CACHE) {\n      child = (\n        <Activity\n          key={stateKey}\n          mode={stateKey === activeStateKey ? 'visible' : 'hidden'}\n        >\n          {child}\n        </Activity>\n      )\n    }\n\n    children.push(child)\n\n    bfcacheEntry = bfcacheEntry.next\n  } while (bfcacheEntry !== null)\n\n  return children\n}\n","import type { Segment } from '../../../../server/app-render/types'\n\nexport function getSegmentValue(segment: Segment) {\n  return Array.isArray(segment) ? segment[1] : segment\n}\n","export const RSC_HEADER = 'RSC' as const\nexport const ACTION_HEADER = 'Next-Action' as const\n// TODO: Instead of sending the full router state, we only need to send the\n// segment path. Saves bytes. Then we could also use this field for segment\n// prefetches, which also need to specify a particular segment.\nexport const NEXT_ROUTER_STATE_TREE_HEADER = 'Next-Router-State-Tree' as const\nexport const NEXT_ROUTER_PREFETCH_HEADER = 'Next-Router-Prefetch' as const\n// This contains the path to the segment being prefetched.\n// TODO: If we change Next-Router-State-Tree to be a segment path, we can use\n// that instead. Then Next-Router-Prefetch and Next-Router-Segment-Prefetch can\n// be merged into a single enum.\nexport const NEXT_ROUTER_SEGMENT_PREFETCH_HEADER =\n  'Next-Router-Segment-Prefetch' as const\nexport const NEXT_HMR_REFRESH_HEADER = 'Next-HMR-Refresh' as const\nexport const NEXT_HMR_REFRESH_HASH_COOKIE = '__next_hmr_refresh_hash__' as const\nexport const NEXT_URL = 'Next-Url' as const\nexport const RSC_CONTENT_TYPE_HEADER = 'text/x-component' as const\n\nexport const FLIGHT_HEADERS = [\n  RSC_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_SEGMENT_PREFETCH_HEADER,\n] as const\n\nexport const NEXT_RSC_UNION_QUERY = '_rsc' as const\n\nexport const NEXT_ROUTER_STALE_TIME_HEADER = 'x-nextjs-stale-time' as const\nexport const NEXT_DID_POSTPONE_HEADER = 'x-nextjs-postponed' as const\nexport const NEXT_REWRITTEN_PATH_HEADER = 'x-nextjs-rewritten-path' as const\nexport const NEXT_REWRITTEN_QUERY_HEADER = 'x-nextjs-rewritten-query' as const\nexport const NEXT_IS_PRERENDER_HEADER = 'x-nextjs-prerender' as const\nexport const NEXT_ACTION_NOT_FOUND_HEADER = 'x-nextjs-action-not-found' as const\n","'use client'\n\n/**\n * HTTPAccessFallbackBoundary is a boundary that catches errors and renders a\n * fallback component for HTTP errors.\n *\n * It receives the status code, and determine if it should render fallbacks for few HTTP 4xx errors.\n *\n * e.g. 404\n * 404 represents not found, and the fallback component pair contains the component and its styles.\n *\n */\n\nimport React, { useContext } from 'react'\nimport { useUntrackedPathname } from '../navigation-untracked'\nimport {\n  HTTPAccessErrorStatus,\n  getAccessFallbackHTTPStatus,\n  getAccessFallbackErrorTypeByStatus,\n  isHTTPAccessFallbackError,\n} from './http-access-fallback'\nimport { warnOnce } from '../../../shared/lib/utils/warn-once'\nimport { MissingSlotContext } from '../../../shared/lib/app-router-context.shared-runtime'\n\ninterface HTTPAccessFallbackBoundaryProps {\n  notFound?: React.ReactNode\n  forbidden?: React.ReactNode\n  unauthorized?: React.ReactNode\n  children: React.ReactNode\n  missingSlots?: Set<string>\n}\n\ninterface HTTPAccessFallbackErrorBoundaryProps\n  extends HTTPAccessFallbackBoundaryProps {\n  pathname: string | null\n  missingSlots?: Set<string>\n}\n\ninterface HTTPAccessBoundaryState {\n  triggeredStatus: number | undefined\n  previousPathname: string | null\n}\n\nclass HTTPAccessFallbackErrorBoundary extends React.Component<\n  HTTPAccessFallbackErrorBoundaryProps,\n  HTTPAccessBoundaryState\n> {\n  constructor(props: HTTPAccessFallbackErrorBoundaryProps) {\n    super(props)\n    this.state = {\n      triggeredStatus: undefined,\n      previousPathname: props.pathname,\n    }\n  }\n\n  componentDidCatch(): void {\n    if (\n      process.env.NODE_ENV === 'development' &&\n      this.props.missingSlots &&\n      this.props.missingSlots.size > 0 &&\n      // A missing children slot is the typical not-found case, so no need to warn\n      !this.props.missingSlots.has('children')\n    ) {\n      let warningMessage =\n        'No default component was found for a parallel route rendered on this page. Falling back to nearest NotFound boundary.\\n' +\n        'Learn more: https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs\\n\\n'\n\n      const formattedSlots = Array.from(this.props.missingSlots)\n        .sort((a, b) => a.localeCompare(b))\n        .map((slot) => `@${slot}`)\n        .join(', ')\n\n      warningMessage += 'Missing slots: ' + formattedSlots\n\n      warnOnce(warningMessage)\n    }\n  }\n\n  static getDerivedStateFromError(error: any) {\n    if (isHTTPAccessFallbackError(error)) {\n      const httpStatus = getAccessFallbackHTTPStatus(error)\n      return {\n        triggeredStatus: httpStatus,\n      }\n    }\n    // Re-throw if error is not for 404\n    throw error\n  }\n\n  static getDerivedStateFromProps(\n    props: HTTPAccessFallbackErrorBoundaryProps,\n    state: HTTPAccessBoundaryState\n  ): HTTPAccessBoundaryState | null {\n    /**\n     * Handles reset of the error boundary when a navigation happens.\n     * Ensures the error boundary does not stay enabled when navigating to a new page.\n     * Approach of setState in render is safe as it checks the previous pathname and then overrides\n     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders\n     */\n    if (props.pathname !== state.previousPathname && state.triggeredStatus) {\n      return {\n        triggeredStatus: undefined,\n        previousPathname: props.pathname,\n      }\n    }\n    return {\n      triggeredStatus: state.triggeredStatus,\n      previousPathname: props.pathname,\n    }\n  }\n\n  render() {\n    const { notFound, forbidden, unauthorized, children } = this.props\n    const { triggeredStatus } = this.state\n    const errorComponents = {\n      [HTTPAccessErrorStatus.NOT_FOUND]: notFound,\n      [HTTPAccessErrorStatus.FORBIDDEN]: forbidden,\n      [HTTPAccessErrorStatus.UNAUTHORIZED]: unauthorized,\n    }\n\n    if (triggeredStatus) {\n      const isNotFound =\n        triggeredStatus === HTTPAccessErrorStatus.NOT_FOUND && notFound\n      const isForbidden =\n        triggeredStatus === HTTPAccessErrorStatus.FORBIDDEN && forbidden\n      const isUnauthorized =\n        triggeredStatus === HTTPAccessErrorStatus.UNAUTHORIZED && unauthorized\n\n      // If there's no matched boundary in this layer, keep throwing the error by rendering the children\n      if (!(isNotFound || isForbidden || isUnauthorized)) {\n        return children\n      }\n\n      return (\n        <>\n          <meta name=\"robots\" content=\"noindex\" />\n          {process.env.NODE_ENV === 'development' && (\n            <meta\n              name=\"boundary-next-error\"\n              content={getAccessFallbackErrorTypeByStatus(triggeredStatus)}\n            />\n          )}\n          {errorComponents[triggeredStatus]}\n        </>\n      )\n    }\n\n    return children\n  }\n}\n\nexport function HTTPAccessFallbackBoundary({\n  notFound,\n  forbidden,\n  unauthorized,\n  children,\n}: HTTPAccessFallbackBoundaryProps) {\n  // When we're rendering the missing params shell, this will return null. This\n  // is because we won't be rendering any not found boundaries or error\n  // boundaries for the missing params shell. When this runs on the client\n  // (where these error can occur), we will get the correct pathname.\n  const pathname = useUntrackedPathname()\n  const missingSlots = useContext(MissingSlotContext)\n  const hasErrorFallback = !!(notFound || forbidden || unauthorized)\n\n  if (hasErrorFallback) {\n    return (\n      <HTTPAccessFallbackErrorBoundary\n        pathname={pathname}\n        notFound={notFound}\n        forbidden={forbidden}\n        unauthorized={unauthorized}\n        missingSlots={missingSlots}\n      >\n        {children}\n      </HTTPAccessFallbackErrorBoundary>\n    )\n  }\n\n  return <>{children}</>\n}\n","import type {\n  CacheNodeSeedData,\n  FlightRouterState,\n  FlightSegmentPath,\n  Segment,\n} from '../../../server/app-render/types'\nimport type {\n  CacheNode,\n  ChildSegmentMap,\n  HeadData,\n  LoadingModuleData,\n  ReadyCacheNode,\n} from '../../../shared/lib/app-router-context.shared-runtime'\nimport { DEFAULT_SEGMENT_KEY } from '../../../shared/lib/segment'\nimport { matchSegment } from '../match-segments'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport type { FetchServerResponseResult } from './fetch-server-response'\nimport { isNavigatingToNewRootLayout } from './is-navigating-to-new-root-layout'\nimport { DYNAMIC_STALETIME_MS } from './prefetch-cache-utils'\n\n// This is yet another tree type that is used to track pending promises that\n// need to be fulfilled once the dynamic data is received. The terminal nodes of\n// this tree represent the new Cache Node trees that were created during this\n// request. We can't use the Cache Node tree or Route State tree directly\n// because those include reused nodes, too. This tree is discarded as soon as\n// the navigation response is received.\ntype SPANavigationTask = {\n  // The router state that corresponds to the tree that this Task represents.\n  route: FlightRouterState\n  // The CacheNode that corresponds to the tree that this Task represents. If\n  // `children` is null (i.e. if this is a terminal task node), then `node`\n  // represents a brand new Cache Node tree, which way or may not need to be\n  // filled with dynamic data from the server.\n  node: CacheNode | null\n  // The tree sent to the server during the dynamic request. This is the\n  // same as `route`, except with the `refetch` marker set on dynamic segments.\n  // If all the segments are static, then this will be null, and no server\n  // request is required.\n  dynamicRequestTree: FlightRouterState | null\n  children: Map<string, SPANavigationTask> | null\n}\n\n// A special type used to bail out and trigger a full-page navigation.\ntype MPANavigationTask = {\n  // MPA tasks are distinguised from SPA tasks by having a null `route`.\n  route: null\n  node: null\n  dynamicRequestTree: null\n  children: null\n}\n\nconst MPA_NAVIGATION_TASK: MPANavigationTask = {\n  route: null,\n  node: null,\n  dynamicRequestTree: null,\n  children: null,\n}\n\nexport type Task = SPANavigationTask | MPANavigationTask\n\n// Creates a new Cache Node tree (i.e. copy-on-write) that represents the\n// optimistic result of a navigation, using both the current Cache Node tree and\n// data that was prefetched prior to navigation.\n//\n// At the moment we call this function, we haven't yet received the navigation\n// response from the server. It could send back something completely different\n// from the tree that was prefetched — due to rewrites, default routes, parallel\n// routes, etc.\n//\n// But in most cases, it will return the same tree that we prefetched, just with\n// the dynamic holes filled in. So we optimistically assume this will happen,\n// and accept that the real result could be arbitrarily different.\n//\n// We'll reuse anything that was already in the previous tree, since that's what\n// the server does.\n//\n// New segments (ones that don't appear in the old tree) are assigned an\n// unresolved promise. The data for these promises will be fulfilled later, when\n// the navigation response is received.\n//\n// The tree can be rendered immediately after it is created (that's why this is\n// a synchronous function). Any new trees that do not have prefetch data will\n// suspend during rendering, until the dynamic data streams in.\n//\n// Returns a Task object, which contains both the updated Cache Node and a path\n// to the pending subtrees that need to be resolved by the navigation response.\n//\n// A return value of `null` means there were no changes, and the previous tree\n// can be reused without initiating a server request.\nexport function startPPRNavigation(\n  navigatedAt: number,\n  oldCacheNode: CacheNode,\n  oldRouterState: FlightRouterState,\n  newRouterState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  isSamePageNavigation: boolean,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task | null {\n  const segmentPath: Array<FlightSegmentPath> = []\n  return updateCacheNodeOnNavigation(\n    navigatedAt,\n    oldCacheNode,\n    oldRouterState,\n    newRouterState,\n    false,\n    prefetchData,\n    prefetchHead,\n    isPrefetchHeadPartial,\n    isSamePageNavigation,\n    segmentPath,\n    scrollableSegmentsResult\n  )\n}\n\nfunction updateCacheNodeOnNavigation(\n  navigatedAt: number,\n  oldCacheNode: CacheNode,\n  oldRouterState: FlightRouterState,\n  newRouterState: FlightRouterState,\n  didFindRootLayout: boolean,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  isSamePageNavigation: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task | null {\n  // Diff the old and new trees to reuse the shared layouts.\n  const oldRouterStateChildren = oldRouterState[1]\n  const newRouterStateChildren = newRouterState[1]\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[2] : null\n\n  if (!didFindRootLayout) {\n    // We're currently traversing the part of the tree that was also part of\n    // the previous route. If we discover a root layout, then we don't need to\n    // trigger an MPA navigation. See beginRenderingNewRouteTree for context.\n    const isRootLayout = newRouterState[4] === true\n    if (isRootLayout) {\n      // Found a matching root layout.\n      didFindRootLayout = true\n    }\n  }\n\n  const oldParallelRoutes = oldCacheNode.parallelRoutes\n\n  // Clone the current set of segment children, even if they aren't active in\n  // the new tree.\n  // TODO: We currently retain all the inactive segments indefinitely, until\n  // there's an explicit refresh, or a parent layout is lazily refreshed. We\n  // rely on this for popstate navigations, which update the Router State Tree\n  // but do not eagerly perform a data fetch, because they expect the segment\n  // data to already be in the Cache Node tree. For highly static sites that\n  // are mostly read-only, this may happen only rarely, causing memory to\n  // leak. We should figure out a better model for the lifetime of inactive\n  // segments, so we can maintain instant back/forward navigations without\n  // leaking memory indefinitely.\n  const prefetchParallelRoutes = new Map(oldParallelRoutes)\n\n  // As we diff the trees, we may sometimes modify (copy-on-write, not mutate)\n  // the Route Tree that was returned by the server — for example, in the case\n  // of default parallel routes, we preserve the currently active segment. To\n  // avoid mutating the original tree, we clone the router state children along\n  // the return path.\n  let patchedRouterStateChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n  let taskChildren = null\n\n  // Most navigations require a request to fetch additional data from the\n  // server, either because the data was not already prefetched, or because the\n  // target route contains dynamic data that cannot be prefetched.\n  //\n  // However, if the target route is fully static, and it's already completely\n  // loaded into the segment cache, then we can skip the server request.\n  //\n  // This starts off as `false`, and is set to `true` if any of the child\n  // routes requires a dynamic request.\n  let needsDynamicRequest = false\n  // As we traverse the children, we'll construct a FlightRouterState that can\n  // be sent to the server to request the dynamic data. If it turns out that\n  // nothing in the subtree is dynamic (i.e. needsDynamicRequest is false at the\n  // end), then this will be discarded.\n  // TODO: We can probably optimize the format of this data structure to only\n  // include paths that are dynamic. Instead of reusing the\n  // FlightRouterState type.\n  let dynamicRequestTreeChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n\n  for (let parallelRouteKey in newRouterStateChildren) {\n    const newRouterStateChild: FlightRouterState =\n      newRouterStateChildren[parallelRouteKey]\n    const oldRouterStateChild: FlightRouterState | void =\n      oldRouterStateChildren[parallelRouteKey]\n    const oldSegmentMapChild = oldParallelRoutes.get(parallelRouteKey)\n    const prefetchDataChild: CacheNodeSeedData | void | null =\n      prefetchDataChildren !== null\n        ? prefetchDataChildren[parallelRouteKey]\n        : null\n\n    const newSegmentChild = newRouterStateChild[0]\n    const newSegmentPathChild = segmentPath.concat([\n      parallelRouteKey,\n      newSegmentChild,\n    ])\n    const newSegmentKeyChild = createRouterCacheKey(newSegmentChild)\n\n    const oldSegmentChild =\n      oldRouterStateChild !== undefined ? oldRouterStateChild[0] : undefined\n\n    const oldCacheNodeChild =\n      oldSegmentMapChild !== undefined\n        ? oldSegmentMapChild.get(newSegmentKeyChild)\n        : undefined\n\n    let taskChild: Task | null\n    if (newSegmentChild === DEFAULT_SEGMENT_KEY) {\n      // This is another kind of leaf segment — a default route.\n      //\n      // Default routes have special behavior. When there's no matching segment\n      // for a parallel route, Next.js preserves the currently active segment\n      // during a client navigation — but not for initial render. The server\n      // leaves it to the client to account for this. So we need to handle\n      // it here.\n      if (oldRouterStateChild !== undefined) {\n        // Reuse the existing Router State for this segment. We spawn a \"task\"\n        // just to keep track of the updated router state; unlike most, it's\n        // already fulfilled and won't be affected by the dynamic response.\n        taskChild = spawnReusedTask(oldRouterStateChild)\n      } else {\n        // There's no currently active segment. Switch to the \"create\" path.\n        taskChild = beginRenderingNewRouteTree(\n          navigatedAt,\n          oldRouterStateChild,\n          newRouterStateChild,\n          oldCacheNodeChild,\n          didFindRootLayout,\n          prefetchDataChild !== undefined ? prefetchDataChild : null,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      }\n    } else if (\n      isSamePageNavigation &&\n      // Check if this is a page segment.\n      // TODO: We're not consistent about how we do this check. Some places\n      // check if the segment starts with PAGE_SEGMENT_KEY, but most seem to\n      // check if there any any children, which is why I'm doing it here. We\n      // should probably encode an empty children set as `null` though. Either\n      // way, we should update all the checks to be consistent.\n      Object.keys(newRouterStateChild[1]).length === 0\n    ) {\n      // We special case navigations to the exact same URL as the current\n      // location. It's a common UI pattern for apps to refresh when you click a\n      // link to the current page. So when this happens, we refresh the dynamic\n      // data in the page segments.\n      //\n      // Note that this does not apply if the any part of the hash or search\n      // query has changed. This might feel a bit weird but it makes more sense\n      // when you consider that the way to trigger this behavior is to click\n      // the same link multiple times.\n      //\n      // TODO: We should probably refresh the *entire* route when this case\n      // occurs, not just the page segments. Essentially treating it the same as\n      // a refresh() triggered by an action, which is the more explicit way of\n      // modeling the UI pattern described above.\n      //\n      // Also note that this only refreshes the dynamic data, not static/\n      // cached data. If the page segment is fully static and prefetched, the\n      // request is skipped. (This is also how refresh() works.)\n      taskChild = beginRenderingNewRouteTree(\n        navigatedAt,\n        oldRouterStateChild,\n        newRouterStateChild,\n        oldCacheNodeChild,\n        didFindRootLayout,\n        prefetchDataChild !== undefined ? prefetchDataChild : null,\n        prefetchHead,\n        isPrefetchHeadPartial,\n        newSegmentPathChild,\n        scrollableSegmentsResult\n      )\n    } else if (\n      oldRouterStateChild !== undefined &&\n      oldSegmentChild !== undefined &&\n      matchSegment(newSegmentChild, oldSegmentChild)\n    ) {\n      if (\n        oldCacheNodeChild !== undefined &&\n        oldRouterStateChild !== undefined\n      ) {\n        // This segment exists in both the old and new trees. Recursively update\n        // the children.\n        taskChild = updateCacheNodeOnNavigation(\n          navigatedAt,\n          oldCacheNodeChild,\n          oldRouterStateChild,\n          newRouterStateChild,\n          didFindRootLayout,\n          prefetchDataChild,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          isSamePageNavigation,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      } else {\n        // There's no existing Cache Node for this segment. Switch to the\n        // \"create\" path.\n        taskChild = beginRenderingNewRouteTree(\n          navigatedAt,\n          oldRouterStateChild,\n          newRouterStateChild,\n          oldCacheNodeChild,\n          didFindRootLayout,\n          prefetchDataChild !== undefined ? prefetchDataChild : null,\n          prefetchHead,\n          isPrefetchHeadPartial,\n          newSegmentPathChild,\n          scrollableSegmentsResult\n        )\n      }\n    } else {\n      // This is a new tree. Switch to the \"create\" path.\n      taskChild = beginRenderingNewRouteTree(\n        navigatedAt,\n        oldRouterStateChild,\n        newRouterStateChild,\n        oldCacheNodeChild,\n        didFindRootLayout,\n        prefetchDataChild !== undefined ? prefetchDataChild : null,\n        prefetchHead,\n        isPrefetchHeadPartial,\n        newSegmentPathChild,\n        scrollableSegmentsResult\n      )\n    }\n\n    if (taskChild !== null) {\n      // Recursively propagate up the child tasks.\n\n      if (taskChild.route === null) {\n        // One of the child tasks discovered a change to the root layout.\n        // Immediately unwind from this recursive traversal.\n        return MPA_NAVIGATION_TASK\n      }\n\n      if (taskChildren === null) {\n        taskChildren = new Map()\n      }\n      taskChildren.set(parallelRouteKey, taskChild)\n      const newCacheNodeChild = taskChild.node\n      if (newCacheNodeChild !== null) {\n        const newSegmentMapChild: ChildSegmentMap = new Map(oldSegmentMapChild)\n        newSegmentMapChild.set(newSegmentKeyChild, newCacheNodeChild)\n        prefetchParallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n      }\n\n      // The child tree's route state may be different from the prefetched\n      // route sent by the server. We need to clone it as we traverse back up\n      // the tree.\n      const taskChildRoute = taskChild.route\n      patchedRouterStateChildren[parallelRouteKey] = taskChildRoute\n\n      const dynamicRequestTreeChild = taskChild.dynamicRequestTree\n      if (dynamicRequestTreeChild !== null) {\n        // Something in the child tree is dynamic.\n        needsDynamicRequest = true\n        dynamicRequestTreeChildren[parallelRouteKey] = dynamicRequestTreeChild\n      } else {\n        dynamicRequestTreeChildren[parallelRouteKey] = taskChildRoute\n      }\n    } else {\n      // The child didn't change. We can use the prefetched router state.\n      patchedRouterStateChildren[parallelRouteKey] = newRouterStateChild\n      dynamicRequestTreeChildren[parallelRouteKey] = newRouterStateChild\n    }\n  }\n\n  if (taskChildren === null) {\n    // No new tasks were spawned.\n    return null\n  }\n\n  const newCacheNode: ReadyCacheNode = {\n    lazyData: null,\n    rsc: oldCacheNode.rsc,\n    // We intentionally aren't updating the prefetchRsc field, since this node\n    // is already part of the current tree, because it would be weird for\n    // prefetch data to be newer than the final data. It probably won't ever be\n    // observable anyway, but it could happen if the segment is unmounted then\n    // mounted again, because LayoutRouter will momentarily switch to rendering\n    // prefetchRsc, via useDeferredValue.\n    prefetchRsc: oldCacheNode.prefetchRsc,\n    head: oldCacheNode.head,\n    prefetchHead: oldCacheNode.prefetchHead,\n    loading: oldCacheNode.loading,\n\n    // Everything is cloned except for the children, which we computed above.\n    parallelRoutes: prefetchParallelRoutes,\n\n    navigatedAt,\n  }\n\n  return {\n    // Return a cloned copy of the router state with updated children.\n    route: patchRouterStateWithNewChildren(\n      newRouterState,\n      patchedRouterStateChildren\n    ),\n    node: newCacheNode,\n    dynamicRequestTree: needsDynamicRequest\n      ? patchRouterStateWithNewChildren(\n          newRouterState,\n          dynamicRequestTreeChildren\n        )\n      : null,\n    children: taskChildren,\n  }\n}\n\nfunction beginRenderingNewRouteTree(\n  navigatedAt: number,\n  oldRouterState: FlightRouterState | void,\n  newRouterState: FlightRouterState,\n  existingCacheNode: CacheNode | void,\n  didFindRootLayout: boolean,\n  prefetchData: CacheNodeSeedData | null,\n  possiblyPartialPrefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): Task {\n  if (!didFindRootLayout) {\n    // The route tree changed before we reached a layout. (The highest-level\n    // layout in a route tree is referred to as the \"root\" layout.) This could\n    // mean that we're navigating between two different root layouts. When this\n    // happens, we perform a full-page (MPA-style) navigation.\n    //\n    // However, the algorithm for deciding where to start rendering a route\n    // (i.e. the one performed in order to reach this function) is stricter\n    // than the one used to detect a change in the root layout. So just because\n    // we're re-rendering a segment outside of the root layout does not mean we\n    // should trigger a full-page navigation.\n    //\n    // Specifically, we handle dynamic parameters differently: two segments are\n    // considered the same even if their parameter values are different.\n    //\n    // Refer to isNavigatingToNewRootLayout for details.\n    //\n    // Note that we only have to perform this extra traversal if we didn't\n    // already discover a root layout in the part of the tree that is unchanged.\n    // In the common case, this branch is skipped completely.\n    if (\n      oldRouterState === undefined ||\n      isNavigatingToNewRootLayout(oldRouterState, newRouterState)\n    ) {\n      // The root layout changed. Perform a full-page navigation.\n      return MPA_NAVIGATION_TASK\n    }\n  }\n  return createCacheNodeOnNavigation(\n    navigatedAt,\n    newRouterState,\n    existingCacheNode,\n    prefetchData,\n    possiblyPartialPrefetchHead,\n    isPrefetchHeadPartial,\n    segmentPath,\n    scrollableSegmentsResult\n  )\n}\n\nfunction createCacheNodeOnNavigation(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  existingCacheNode: CacheNode | void,\n  prefetchData: CacheNodeSeedData | null,\n  possiblyPartialPrefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): SPANavigationTask {\n  // Same traversal as updateCacheNodeNavigation, but we switch to this path\n  // once we reach the part of the tree that was not in the previous route. We\n  // don't need to diff against the old tree, we just need to create a new one.\n\n  // The head is assigned to every leaf segment delivered by the server. Based\n  // on corresponding logic in fill-lazy-items-till-leaf-with-head.ts\n  const routerStateChildren = routerState[1]\n  const isLeafSegment = Object.keys(routerStateChildren).length === 0\n\n  // Even we're rendering inside the \"new\" part of the target tree, we may have\n  // a locally cached segment that we can reuse. This may come from either 1)\n  // the CacheNode tree, which lives in React state and is populated by previous\n  // navigations; or 2) the prefetch cache, which is a separate cache that is\n  // populated by prefetches.\n  let rsc: React.ReactNode\n  let loading: LoadingModuleData | Promise<LoadingModuleData>\n  let head: HeadData | null\n  let cacheNodeNavigatedAt: number\n  if (\n    existingCacheNode !== undefined &&\n    // DYNAMIC_STALETIME_MS defaults to 0, but it can be increased using\n    // the experimental.staleTimes.dynamic config. When set, we'll avoid\n    // refetching dynamic data if it was fetched within the given threshold.\n    existingCacheNode.navigatedAt + DYNAMIC_STALETIME_MS > navigatedAt\n  ) {\n    // We have an existing CacheNode for this segment, and it's not stale. We\n    // should reuse it rather than request a new one.\n    rsc = existingCacheNode.rsc\n    loading = existingCacheNode.loading\n    head = existingCacheNode.head\n\n    // Don't update the navigatedAt timestamp, since we're reusing stale data.\n    cacheNodeNavigatedAt = existingCacheNode.navigatedAt\n  } else if (prefetchData !== null) {\n    // There's no existing CacheNode for this segment, but we do have prefetch\n    // data. If the prefetch data is fully static (i.e. does not contain any\n    // dynamic holes), we don't need to request it from the server.\n    rsc = prefetchData[1]\n    loading = prefetchData[3]\n    head = isLeafSegment ? possiblyPartialPrefetchHead : null\n    // Even though we're accessing the data from the prefetch cache, this is\n    // conceptually a new segment, not a reused one. So we should update the\n    // navigatedAt timestamp.\n    cacheNodeNavigatedAt = navigatedAt\n    const isPrefetchRscPartial = prefetchData[4]\n    if (\n      // Check if the segment data is partial\n      isPrefetchRscPartial ||\n      // Check if the head is partial (only relevant if this is a leaf segment)\n      (isPrefetchHeadPartial && isLeafSegment)\n    ) {\n      // We only have partial data from this segment. Like missing segments, we\n      // must request the full data from the server.\n      return spawnPendingTask(\n        navigatedAt,\n        routerState,\n        prefetchData,\n        possiblyPartialPrefetchHead,\n        isPrefetchHeadPartial,\n        segmentPath,\n        scrollableSegmentsResult\n      )\n    } else {\n      // The prefetch data is fully static, so we can omit it from the\n      // navigation request.\n    }\n  } else {\n    // There's no prefetch for this segment. Everything from this point will be\n    // requested from the server, even if there are static children below it.\n    // Create a terminal task node that will later be fulfilled by\n    // server response.\n    return spawnPendingTask(\n      navigatedAt,\n      routerState,\n      null,\n      possiblyPartialPrefetchHead,\n      isPrefetchHeadPartial,\n      segmentPath,\n      scrollableSegmentsResult\n    )\n  }\n\n  // We already have a full segment we can render, so we don't need to request a\n  // new one from the server. Keep traversing down the tree until we reach\n  // something that requires a dynamic request.\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[2] : null\n  const taskChildren = new Map()\n  const existingCacheNodeChildren =\n    existingCacheNode !== undefined ? existingCacheNode.parallelRoutes : null\n  const cacheNodeChildren = new Map(existingCacheNodeChildren)\n  let dynamicRequestTreeChildren: {\n    [parallelRouteKey: string]: FlightRouterState\n  } = {}\n  let needsDynamicRequest = false\n  if (isLeafSegment) {\n    // The segment path of every leaf segment (i.e. page) is collected into\n    // a result array. This is used by the LayoutRouter to scroll to ensure that\n    // new pages are visible after a navigation.\n    // TODO: We should use a string to represent the segment path instead of\n    // an array. We already use a string representation for the path when\n    // accessing the Segment Cache, so we can use the same one.\n    scrollableSegmentsResult.push(segmentPath)\n  } else {\n    for (let parallelRouteKey in routerStateChildren) {\n      const routerStateChild: FlightRouterState =\n        routerStateChildren[parallelRouteKey]\n      const prefetchDataChild: CacheNodeSeedData | void | null =\n        prefetchDataChildren !== null\n          ? prefetchDataChildren[parallelRouteKey]\n          : null\n      const existingSegmentMapChild =\n        existingCacheNodeChildren !== null\n          ? existingCacheNodeChildren.get(parallelRouteKey)\n          : undefined\n      const segmentChild = routerStateChild[0]\n      const segmentPathChild = segmentPath.concat([\n        parallelRouteKey,\n        segmentChild,\n      ])\n      const segmentKeyChild = createRouterCacheKey(segmentChild)\n\n      const existingCacheNodeChild =\n        existingSegmentMapChild !== undefined\n          ? existingSegmentMapChild.get(segmentKeyChild)\n          : undefined\n\n      const taskChild = createCacheNodeOnNavigation(\n        navigatedAt,\n        routerStateChild,\n        existingCacheNodeChild,\n        prefetchDataChild,\n        possiblyPartialPrefetchHead,\n        isPrefetchHeadPartial,\n        segmentPathChild,\n        scrollableSegmentsResult\n      )\n      taskChildren.set(parallelRouteKey, taskChild)\n      const dynamicRequestTreeChild = taskChild.dynamicRequestTree\n      if (dynamicRequestTreeChild !== null) {\n        // Something in the child tree is dynamic.\n        needsDynamicRequest = true\n        dynamicRequestTreeChildren[parallelRouteKey] = dynamicRequestTreeChild\n      } else {\n        dynamicRequestTreeChildren[parallelRouteKey] = routerStateChild\n      }\n      const newCacheNodeChild = taskChild.node\n      if (newCacheNodeChild !== null) {\n        const newSegmentMapChild: ChildSegmentMap = new Map()\n        newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n        cacheNodeChildren.set(parallelRouteKey, newSegmentMapChild)\n      }\n    }\n  }\n\n  return {\n    // Since we're inside a new route tree, unlike the\n    // `updateCacheNodeOnNavigation` path, the router state on the children\n    // tasks is always the same as the router state we pass in. So we don't need\n    // to clone/modify it.\n    route: routerState,\n    node: {\n      lazyData: null,\n      // Since this segment is already full, we don't need to use the\n      // `prefetchRsc` field.\n      rsc,\n      prefetchRsc: null,\n      head,\n      prefetchHead: null,\n      loading,\n      parallelRoutes: cacheNodeChildren,\n      navigatedAt: cacheNodeNavigatedAt,\n    },\n    dynamicRequestTree: needsDynamicRequest\n      ? patchRouterStateWithNewChildren(routerState, dynamicRequestTreeChildren)\n      : null,\n    children: taskChildren,\n  }\n}\n\nfunction patchRouterStateWithNewChildren(\n  baseRouterState: FlightRouterState,\n  newChildren: { [parallelRouteKey: string]: FlightRouterState }\n): FlightRouterState {\n  const clone: FlightRouterState = [baseRouterState[0], newChildren]\n  // Based on equivalent logic in apply-router-state-patch-to-tree, but should\n  // confirm whether we need to copy all of these fields. Not sure the server\n  // ever sends, e.g. the refetch marker.\n  if (2 in baseRouterState) {\n    clone[2] = baseRouterState[2]\n  }\n  if (3 in baseRouterState) {\n    clone[3] = baseRouterState[3]\n  }\n  if (4 in baseRouterState) {\n    clone[4] = baseRouterState[4]\n  }\n  return clone\n}\n\nfunction spawnPendingTask(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): SPANavigationTask {\n  // Create a task that will later be fulfilled by data from the server.\n\n  // Clone the prefetched route tree and the `refetch` marker to it. We'll send\n  // this to the server so it knows where to start rendering.\n  const dynamicRequestTree = patchRouterStateWithNewChildren(\n    routerState,\n    routerState[1]\n  )\n  dynamicRequestTree[3] = 'refetch'\n\n  const newTask: Task = {\n    route: routerState,\n\n    // Corresponds to the part of the route that will be rendered on the server.\n    node: createPendingCacheNode(\n      navigatedAt,\n      routerState,\n      prefetchData,\n      prefetchHead,\n      isPrefetchHeadPartial,\n      segmentPath,\n      scrollableSegmentsResult\n    ),\n    // Because this is non-null, and it gets propagated up through the parent\n    // tasks, the root task will know that it needs to perform a server request.\n    dynamicRequestTree,\n    children: null,\n  }\n  return newTask\n}\n\nfunction spawnReusedTask(reusedRouterState: FlightRouterState): Task {\n  // Create a task that reuses an existing segment, e.g. when reusing\n  // the current active segment in place of a default route.\n  return {\n    route: reusedRouterState,\n    node: null,\n    dynamicRequestTree: null,\n    children: null,\n  }\n}\n\n// Writes a dynamic server response into the tree created by\n// updateCacheNodeOnNavigation. All pending promises that were spawned by the\n// navigation will be resolved, either with dynamic data from the server, or\n// `null` to indicate that the data is missing.\n//\n// A `null` value will trigger a lazy fetch during render, which will then patch\n// up the tree using the same mechanism as the non-PPR implementation\n// (serverPatchReducer).\n//\n// Usually, the server will respond with exactly the subset of data that we're\n// waiting for — everything below the nearest shared layout. But technically,\n// the server can return anything it wants.\n//\n// This does _not_ create a new tree; it modifies the existing one in place.\n// Which means it must follow the Suspense rules of cache safety.\nexport function listenForDynamicRequest(\n  task: SPANavigationTask,\n  responsePromise: Promise<FetchServerResponseResult>\n) {\n  responsePromise.then(\n    ({ flightData }: FetchServerResponseResult) => {\n      if (typeof flightData === 'string') {\n        // Happens when navigating to page in `pages` from `app`. We shouldn't\n        // get here because should have already handled this during\n        // the prefetch.\n        return\n      }\n      for (const normalizedFlightData of flightData) {\n        const {\n          segmentPath,\n          tree: serverRouterState,\n          seedData: dynamicData,\n          head: dynamicHead,\n        } = normalizedFlightData\n\n        if (!dynamicData) {\n          // This shouldn't happen. PPR should always send back a response.\n          // However, `FlightDataPath` is a shared type and the pre-PPR handling of\n          // this might return null.\n          continue\n        }\n\n        writeDynamicDataIntoPendingTask(\n          task,\n          segmentPath,\n          serverRouterState,\n          dynamicData,\n          dynamicHead\n        )\n      }\n\n      // Now that we've exhausted all the data we received from the server, if\n      // there are any remaining pending tasks in the tree, abort them now.\n      // If there's any missing data, it will trigger a lazy fetch.\n      abortTask(task, null)\n    },\n    (error: any) => {\n      // This will trigger an error during render\n      abortTask(task, error)\n    }\n  )\n}\n\nfunction writeDynamicDataIntoPendingTask(\n  rootTask: SPANavigationTask,\n  segmentPath: FlightSegmentPath,\n  serverRouterState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData\n) {\n  // The data sent by the server represents only a subtree of the app. We need\n  // to find the part of the task tree that matches the server response, and\n  // fulfill it using the dynamic data.\n  //\n  // segmentPath represents the parent path of subtree. It's a repeating pattern\n  // of parallel route key and segment:\n  //\n  //   [string, Segment, string, Segment, string, Segment, ...]\n  //\n  // Iterate through the path and finish any tasks that match this payload.\n  let task = rootTask\n  for (let i = 0; i < segmentPath.length; i += 2) {\n    const parallelRouteKey: string = segmentPath[i]\n    const segment: Segment = segmentPath[i + 1]\n    const taskChildren = task.children\n    if (taskChildren !== null) {\n      const taskChild = taskChildren.get(parallelRouteKey)\n      if (taskChild !== undefined) {\n        const taskSegment = taskChild.route[0]\n        if (matchSegment(segment, taskSegment)) {\n          // Found a match for this task. Keep traversing down the task tree.\n          task = taskChild\n          continue\n        }\n      }\n    }\n    // We didn't find a child task that matches the server data. Exit. We won't\n    // abort the task, though, because a different FlightDataPath may be able to\n    // fulfill it (see loop in listenForDynamicRequest). We only abort tasks\n    // once we've run out of data.\n    return\n  }\n\n  finishTaskUsingDynamicDataPayload(\n    task,\n    serverRouterState,\n    dynamicData,\n    dynamicHead\n  )\n}\n\nfunction finishTaskUsingDynamicDataPayload(\n  task: SPANavigationTask,\n  serverRouterState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData\n) {\n  if (task.dynamicRequestTree === null) {\n    // Everything in this subtree is already complete. Bail out.\n    return\n  }\n\n  // dynamicData may represent a larger subtree than the task. Before we can\n  // finish the task, we need to line them up.\n  const taskChildren = task.children\n  const taskNode = task.node\n  if (taskChildren === null) {\n    // We've reached the leaf node of the pending task. The server data tree\n    // lines up the pending Cache Node tree. We can now switch to the\n    // normal algorithm.\n    if (taskNode !== null) {\n      finishPendingCacheNode(\n        taskNode,\n        task.route,\n        serverRouterState,\n        dynamicData,\n        dynamicHead\n      )\n      // Set this to null to indicate that this task is now complete.\n      task.dynamicRequestTree = null\n    }\n    return\n  }\n  // The server returned more data than we need to finish the task. Skip over\n  // the extra segments until we reach the leaf task node.\n  const serverChildren = serverRouterState[1]\n  const dynamicDataChildren = dynamicData[2]\n\n  for (const parallelRouteKey in serverRouterState) {\n    const serverRouterStateChild: FlightRouterState =\n      serverChildren[parallelRouteKey]\n    const dynamicDataChild: CacheNodeSeedData | null | void =\n      dynamicDataChildren[parallelRouteKey]\n\n    const taskChild = taskChildren.get(parallelRouteKey)\n    if (taskChild !== undefined) {\n      const taskSegment = taskChild.route[0]\n      if (\n        matchSegment(serverRouterStateChild[0], taskSegment) &&\n        dynamicDataChild !== null &&\n        dynamicDataChild !== undefined\n      ) {\n        // Found a match for this task. Keep traversing down the task tree.\n        return finishTaskUsingDynamicDataPayload(\n          taskChild,\n          serverRouterStateChild,\n          dynamicDataChild,\n          dynamicHead\n        )\n      }\n    }\n    // We didn't find a child task that matches the server data. We won't abort\n    // the task, though, because a different FlightDataPath may be able to\n    // fulfill it (see loop in listenForDynamicRequest). We only abort tasks\n    // once we've run out of data.\n  }\n}\n\nfunction createPendingCacheNode(\n  navigatedAt: number,\n  routerState: FlightRouterState,\n  prefetchData: CacheNodeSeedData | null,\n  prefetchHead: HeadData | null,\n  isPrefetchHeadPartial: boolean,\n  segmentPath: FlightSegmentPath,\n  scrollableSegmentsResult: Array<FlightSegmentPath>\n): ReadyCacheNode {\n  const routerStateChildren = routerState[1]\n  const prefetchDataChildren = prefetchData !== null ? prefetchData[2] : null\n\n  const parallelRoutes = new Map()\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const prefetchDataChild: CacheNodeSeedData | null | void =\n      prefetchDataChildren !== null\n        ? prefetchDataChildren[parallelRouteKey]\n        : null\n\n    const segmentChild = routerStateChild[0]\n    const segmentPathChild = segmentPath.concat([\n      parallelRouteKey,\n      segmentChild,\n    ])\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n\n    const newCacheNodeChild = createPendingCacheNode(\n      navigatedAt,\n      routerStateChild,\n      prefetchDataChild === undefined ? null : prefetchDataChild,\n      prefetchHead,\n      isPrefetchHeadPartial,\n      segmentPathChild,\n      scrollableSegmentsResult\n    )\n\n    const newSegmentMapChild: ChildSegmentMap = new Map()\n    newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n    parallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n  }\n\n  // The head is assigned to every leaf segment delivered by the server. Based\n  // on corresponding logic in fill-lazy-items-till-leaf-with-head.ts\n  const isLeafSegment = parallelRoutes.size === 0\n\n  if (isLeafSegment) {\n    // The segment path of every leaf segment (i.e. page) is collected into\n    // a result array. This is used by the LayoutRouter to scroll to ensure that\n    // new pages are visible after a navigation.\n    // TODO: We should use a string to represent the segment path instead of\n    // an array. We already use a string representation for the path when\n    // accessing the Segment Cache, so we can use the same one.\n    scrollableSegmentsResult.push(segmentPath)\n  }\n\n  const maybePrefetchRsc = prefetchData !== null ? prefetchData[1] : null\n  const maybePrefetchLoading = prefetchData !== null ? prefetchData[3] : null\n  return {\n    lazyData: null,\n    parallelRoutes: parallelRoutes,\n\n    prefetchRsc: maybePrefetchRsc !== undefined ? maybePrefetchRsc : null,\n    prefetchHead: isLeafSegment ? prefetchHead : [null, null],\n\n    // TODO: Technically, a loading boundary could contain dynamic data. We must\n    // have separate `loading` and `prefetchLoading` fields to handle this, like\n    // we do for the segment data and head.\n    loading: maybePrefetchLoading !== undefined ? maybePrefetchLoading : null,\n\n    // Create a deferred promise. This will be fulfilled once the dynamic\n    // response is received from the server.\n    rsc: createDeferredRsc() as React.ReactNode,\n    head: isLeafSegment ? (createDeferredRsc() as React.ReactNode) : null,\n\n    navigatedAt,\n  }\n}\n\nfunction finishPendingCacheNode(\n  cacheNode: CacheNode,\n  taskState: FlightRouterState,\n  serverState: FlightRouterState,\n  dynamicData: CacheNodeSeedData,\n  dynamicHead: HeadData\n): void {\n  // Writes a dynamic response into an existing Cache Node tree. This does _not_\n  // create a new tree, it updates the existing tree in-place. So it must follow\n  // the Suspense rules of cache safety — it can resolve pending promises, but\n  // it cannot overwrite existing data. It can add segments to the tree (because\n  // a missing segment will cause the layout router to suspend).\n  // but it cannot delete them.\n  //\n  // We must resolve every promise in the tree, or else it will suspend\n  // indefinitely. If we did not receive data for a segment, we will resolve its\n  // data promise to `null` to trigger a lazy fetch during render.\n  const taskStateChildren = taskState[1]\n  const serverStateChildren = serverState[1]\n  const dataChildren = dynamicData[2]\n\n  // The router state that we traverse the tree with (taskState) is the same one\n  // that we used to construct the pending Cache Node tree. That way we're sure\n  // to resolve all the pending promises.\n  const parallelRoutes = cacheNode.parallelRoutes\n  for (let parallelRouteKey in taskStateChildren) {\n    const taskStateChild: FlightRouterState =\n      taskStateChildren[parallelRouteKey]\n    const serverStateChild: FlightRouterState | void =\n      serverStateChildren[parallelRouteKey]\n    const dataChild: CacheNodeSeedData | null | void =\n      dataChildren[parallelRouteKey]\n\n    const segmentMapChild = parallelRoutes.get(parallelRouteKey)\n    const taskSegmentChild = taskStateChild[0]\n    const taskSegmentKeyChild = createRouterCacheKey(taskSegmentChild)\n\n    const cacheNodeChild =\n      segmentMapChild !== undefined\n        ? segmentMapChild.get(taskSegmentKeyChild)\n        : undefined\n\n    if (cacheNodeChild !== undefined) {\n      if (\n        serverStateChild !== undefined &&\n        matchSegment(taskSegmentChild, serverStateChild[0])\n      ) {\n        if (dataChild !== undefined && dataChild !== null) {\n          // This is the happy path. Recursively update all the children.\n          finishPendingCacheNode(\n            cacheNodeChild,\n            taskStateChild,\n            serverStateChild,\n            dataChild,\n            dynamicHead\n          )\n        } else {\n          // The server never returned data for this segment. Trigger a lazy\n          // fetch during render. This shouldn't happen because the Route Tree\n          // and the Seed Data tree sent by the server should always be the same\n          // shape when part of the same server response.\n          abortPendingCacheNode(taskStateChild, cacheNodeChild, null)\n        }\n      } else {\n        // The server never returned data for this segment. Trigger a lazy\n        // fetch during render.\n        abortPendingCacheNode(taskStateChild, cacheNodeChild, null)\n      }\n    } else {\n      // The server response matches what was expected to receive, but there's\n      // no matching Cache Node in the task tree. This is a bug in the\n      // implementation because we should have created a node for every\n      // segment in the tree that's associated with this task.\n    }\n  }\n\n  // Use the dynamic data from the server to fulfill the deferred RSC promise\n  // on the Cache Node.\n  const rsc = cacheNode.rsc\n  const dynamicSegmentData = dynamicData[1]\n  if (rsc === null) {\n    // This is a lazy cache node. We can overwrite it. This is only safe\n    // because we know that the LayoutRouter suspends if `rsc` is `null`.\n    cacheNode.rsc = dynamicSegmentData\n  } else if (isDeferredRsc(rsc)) {\n    // This is a deferred RSC promise. We can fulfill it with the data we just\n    // received from the server. If it was already resolved by a different\n    // navigation, then this does nothing because we can't overwrite data.\n    rsc.resolve(dynamicSegmentData)\n  } else {\n    // This is not a deferred RSC promise, nor is it empty, so it must have\n    // been populated by a different navigation. We must not overwrite it.\n  }\n\n  // Check if this is a leaf segment. If so, it will have a `head` property with\n  // a pending promise that needs to be resolved with the dynamic head from\n  // the server.\n  const head = cacheNode.head\n  if (isDeferredRsc(head)) {\n    head.resolve(dynamicHead)\n  }\n}\n\nexport function abortTask(task: SPANavigationTask, error: any): void {\n  const cacheNode = task.node\n  if (cacheNode === null) {\n    // This indicates the task is already complete.\n    return\n  }\n\n  const taskChildren = task.children\n  if (taskChildren === null) {\n    // Reached the leaf task node. This is the root of a pending cache\n    // node tree.\n    abortPendingCacheNode(task.route, cacheNode, error)\n  } else {\n    // This is an intermediate task node. Keep traversing until we reach a\n    // task node with no children. That will be the root of the cache node tree\n    // that needs to be resolved.\n    for (const taskChild of taskChildren.values()) {\n      abortTask(taskChild, error)\n    }\n  }\n\n  // Set this to null to indicate that this task is now complete.\n  task.dynamicRequestTree = null\n}\n\nfunction abortPendingCacheNode(\n  routerState: FlightRouterState,\n  cacheNode: CacheNode,\n  error: any\n): void {\n  // For every pending segment in the tree, resolve its `rsc` promise to `null`\n  // to trigger a lazy fetch during render.\n  //\n  // Or, if an error object is provided, it will error instead.\n  const routerStateChildren = routerState[1]\n  const parallelRoutes = cacheNode.parallelRoutes\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const segmentMapChild = parallelRoutes.get(parallelRouteKey)\n    if (segmentMapChild === undefined) {\n      // This shouldn't happen because we're traversing the same tree that was\n      // used to construct the cache nodes in the first place.\n      continue\n    }\n    const segmentChild = routerStateChild[0]\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n    const cacheNodeChild = segmentMapChild.get(segmentKeyChild)\n    if (cacheNodeChild !== undefined) {\n      abortPendingCacheNode(routerStateChild, cacheNodeChild, error)\n    } else {\n      // This shouldn't happen because we're traversing the same tree that was\n      // used to construct the cache nodes in the first place.\n    }\n  }\n  const rsc = cacheNode.rsc\n  if (isDeferredRsc(rsc)) {\n    if (error === null) {\n      // This will trigger a lazy fetch during render.\n      rsc.resolve(null)\n    } else {\n      // This will trigger an error during rendering.\n      rsc.reject(error)\n    }\n  }\n\n  // Check if this is a leaf segment. If so, it will have a `head` property with\n  // a pending promise that needs to be resolved. If an error was provided, we\n  // will not resolve it with an error, since this is rendered at the root of\n  // the app. We want the segment to error, not the entire app.\n  const head = cacheNode.head\n  if (isDeferredRsc(head)) {\n    head.resolve(null)\n  }\n}\n\nexport function updateCacheNodeOnPopstateRestoration(\n  oldCacheNode: CacheNode,\n  routerState: FlightRouterState\n): ReadyCacheNode {\n  // A popstate navigation reads data from the local cache. It does not issue\n  // new network requests (unless the cache entries have been evicted). So, we\n  // update the cache to drop the prefetch data for any segment whose dynamic\n  // data was already received. This prevents an unnecessary flash back to PPR\n  // state during a back/forward navigation.\n  //\n  // This function clones the entire cache node tree and sets the `prefetchRsc`\n  // field to `null` to prevent it from being rendered. We can't mutate the node\n  // in place because this is a concurrent data structure.\n\n  const routerStateChildren = routerState[1]\n  const oldParallelRoutes = oldCacheNode.parallelRoutes\n  const newParallelRoutes = new Map(oldParallelRoutes)\n  for (let parallelRouteKey in routerStateChildren) {\n    const routerStateChild: FlightRouterState =\n      routerStateChildren[parallelRouteKey]\n    const segmentChild = routerStateChild[0]\n    const segmentKeyChild = createRouterCacheKey(segmentChild)\n    const oldSegmentMapChild = oldParallelRoutes.get(parallelRouteKey)\n    if (oldSegmentMapChild !== undefined) {\n      const oldCacheNodeChild = oldSegmentMapChild.get(segmentKeyChild)\n      if (oldCacheNodeChild !== undefined) {\n        const newCacheNodeChild = updateCacheNodeOnPopstateRestoration(\n          oldCacheNodeChild,\n          routerStateChild\n        )\n        const newSegmentMapChild = new Map(oldSegmentMapChild)\n        newSegmentMapChild.set(segmentKeyChild, newCacheNodeChild)\n        newParallelRoutes.set(parallelRouteKey, newSegmentMapChild)\n      }\n    }\n  }\n\n  // Only show prefetched data if the dynamic data is still pending.\n  //\n  // Tehnically, what we're actually checking is whether the dynamic network\n  // response was received. But since it's a streaming response, this does not\n  // mean that all the dynamic data has fully streamed in. It just means that\n  // _some_ of the dynamic data was received. But as a heuristic, we assume that\n  // the rest dynamic data will stream in quickly, so it's still better to skip\n  // the prefetch state.\n  const rsc = oldCacheNode.rsc\n  const shouldUsePrefetch = isDeferredRsc(rsc) && rsc.status === 'pending'\n\n  return {\n    lazyData: null,\n    rsc,\n    head: oldCacheNode.head,\n\n    prefetchHead: shouldUsePrefetch ? oldCacheNode.prefetchHead : [null, null],\n    prefetchRsc: shouldUsePrefetch ? oldCacheNode.prefetchRsc : null,\n    loading: oldCacheNode.loading,\n\n    // These are the cloned children we computed above\n    parallelRoutes: newParallelRoutes,\n\n    navigatedAt: oldCacheNode.navigatedAt,\n  }\n}\n\nconst DEFERRED = Symbol()\n\ntype PendingDeferredRsc = Promise<React.ReactNode> & {\n  status: 'pending'\n  resolve: (value: React.ReactNode) => void\n  reject: (error: any) => void\n  tag: Symbol\n}\n\ntype FulfilledDeferredRsc = Promise<React.ReactNode> & {\n  status: 'fulfilled'\n  value: React.ReactNode\n  resolve: (value: React.ReactNode) => void\n  reject: (error: any) => void\n  tag: Symbol\n}\n\ntype RejectedDeferredRsc = Promise<React.ReactNode> & {\n  status: 'rejected'\n  reason: any\n  resolve: (value: React.ReactNode) => void\n  reject: (error: any) => void\n  tag: Symbol\n}\n\ntype DeferredRsc =\n  | PendingDeferredRsc\n  | FulfilledDeferredRsc\n  | RejectedDeferredRsc\n\n// This type exists to distinguish a DeferredRsc from a Flight promise. It's a\n// compromise to avoid adding an extra field on every Cache Node, which would be\n// awkward because the pre-PPR parts of codebase would need to account for it,\n// too. We can remove it once type Cache Node type is more settled.\nfunction isDeferredRsc(value: any): value is DeferredRsc {\n  return value && value.tag === DEFERRED\n}\n\nfunction createDeferredRsc(): PendingDeferredRsc {\n  let resolve: any\n  let reject: any\n  const pendingRsc = new Promise<React.ReactNode>((res, rej) => {\n    resolve = res\n    reject = rej\n  }) as PendingDeferredRsc\n  pendingRsc.status = 'pending'\n  pendingRsc.resolve = (value: React.ReactNode) => {\n    if (pendingRsc.status === 'pending') {\n      const fulfilledRsc: FulfilledDeferredRsc = pendingRsc as any\n      fulfilledRsc.status = 'fulfilled'\n      fulfilledRsc.value = value\n      resolve(value)\n    }\n  }\n  pendingRsc.reject = (error: any) => {\n    if (pendingRsc.status === 'pending') {\n      const rejectedRsc: RejectedDeferredRsc = pendingRsc as any\n      rejectedRsc.status = 'rejected'\n      rejectedRsc.reason = error\n      reject(error)\n    }\n  }\n  pendingRsc.tag = DEFERRED\n  return pendingRsc\n}\n","import type {\n  CacheNodeSeedData,\n  FlightRouterState,\n} from '../../../server/app-render/types'\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport {\n  addSearchParamsIfPageSegment,\n  PAGE_SEGMENT_KEY,\n} from '../../../shared/lib/segment'\nimport type { NormalizedFlightData } from '../../flight-data-helpers'\nimport { createEmptyCacheNode } from '../app-router'\nimport { applyRouterStatePatchToTree } from './apply-router-state-patch-to-tree'\nimport { createHrefFromUrl } from './create-href-from-url'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport { fillCacheWithNewSubTreeDataButOnlyLoading } from './fill-cache-with-new-subtree-data'\nimport { handleMutable } from './handle-mutable'\nimport type { Mutable, ReadonlyReducerState } from './router-reducer-types'\n\n/**\n * This is a stop-gap until per-segment caching is implemented. It leverages the `aliased` flag that is added\n * to prefetch entries when it's determined that the loading state from that entry should be used for this navigation.\n * This function takes the aliased entry and only applies the loading state to the updated cache node.\n * We should remove this once per-segment fetching is implemented as ideally the prefetch cache will contain a\n * more granular segment map and so the router will be able to simply re-use the loading segment for the new navigation.\n */\nexport function handleAliasedPrefetchEntry(\n  navigatedAt: number,\n  state: ReadonlyReducerState,\n  flightData: string | NormalizedFlightData[],\n  url: URL,\n  mutable: Mutable\n) {\n  let currentTree = state.tree\n  let currentCache = state.cache\n  const href = createHrefFromUrl(url)\n  let applied\n\n  if (typeof flightData === 'string') {\n    return false\n  }\n\n  for (const normalizedFlightData of flightData) {\n    // If the segment doesn't have a loading component, we don't need to do anything.\n    if (!hasLoadingComponentInSeedData(normalizedFlightData.seedData)) {\n      continue\n    }\n\n    let treePatch = normalizedFlightData.tree\n    // Segments are keyed by searchParams (e.g. __PAGE__?{\"foo\":\"bar\"}). We might return a less specific, param-less entry,\n    // so we ensure that the final tree contains the correct searchParams (reflected in the URL) are provided in the updated FlightRouterState tree.\n    // We only do this on the first read, as otherwise we'd be overwriting the searchParams that may have already been set\n    treePatch = addSearchParamsToPageSegments(\n      treePatch,\n      Object.fromEntries(url.searchParams)\n    )\n\n    const { seedData, isRootRender, pathToSegment } = normalizedFlightData\n    // TODO-APP: remove ''\n    const flightSegmentPathWithLeadingEmpty = ['', ...pathToSegment]\n\n    // Segments are keyed by searchParams (e.g. __PAGE__?{\"foo\":\"bar\"}). We might return a less specific, param-less entry,\n    // so we ensure that the final tree contains the correct searchParams (reflected in the URL) are provided in the updated FlightRouterState tree.\n    // We only do this on the first read, as otherwise we'd be overwriting the searchParams that may have already been set\n    treePatch = addSearchParamsToPageSegments(\n      treePatch,\n      Object.fromEntries(url.searchParams)\n    )\n\n    let newTree = applyRouterStatePatchToTree(\n      flightSegmentPathWithLeadingEmpty,\n      currentTree,\n      treePatch,\n      href\n    )\n\n    const newCache = createEmptyCacheNode()\n\n    // The prefetch cache entry was aliased -- this signals that we only fill in the cache with the\n    // loading state and not the actual parallel route seed data.\n    if (isRootRender && seedData) {\n      // Fill in the cache with the new loading / rsc data\n      const rsc = seedData[1]\n      const loading = seedData[3]\n      newCache.loading = loading\n      newCache.rsc = rsc\n\n      // Construct a new tree and apply the aliased loading state for each parallel route\n      fillNewTreeWithOnlyLoadingSegments(\n        navigatedAt,\n        newCache,\n        currentCache,\n        treePatch,\n        seedData\n      )\n    } else {\n      // Copy rsc for the root node of the cache.\n      newCache.rsc = currentCache.rsc\n      newCache.prefetchRsc = currentCache.prefetchRsc\n      newCache.loading = currentCache.loading\n      newCache.parallelRoutes = new Map(currentCache.parallelRoutes)\n\n      // copy the loading state only into the leaf node (the part that changed)\n      fillCacheWithNewSubTreeDataButOnlyLoading(\n        navigatedAt,\n        newCache,\n        currentCache,\n        normalizedFlightData\n      )\n    }\n\n    // If we don't have an updated tree, there's no reason to update the cache, as the tree\n    // dictates what cache nodes to render.\n    if (newTree) {\n      currentTree = newTree\n      currentCache = newCache\n      applied = true\n    }\n  }\n\n  if (!applied) {\n    return false\n  }\n\n  mutable.patchedTree = currentTree\n  mutable.cache = currentCache\n  mutable.canonicalUrl = href\n  mutable.hashFragment = url.hash\n\n  return handleMutable(state, mutable)\n}\n\nfunction hasLoadingComponentInSeedData(seedData: CacheNodeSeedData | null) {\n  if (!seedData) return false\n\n  const parallelRoutes = seedData[2]\n  const loading = seedData[3]\n\n  if (loading) {\n    return true\n  }\n\n  for (const key in parallelRoutes) {\n    if (hasLoadingComponentInSeedData(parallelRoutes[key])) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction fillNewTreeWithOnlyLoadingSegments(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  routerState: FlightRouterState,\n  cacheNodeSeedData: CacheNodeSeedData | null\n) {\n  const isLastSegment = Object.keys(routerState[1]).length === 0\n  if (isLastSegment) {\n    return\n  }\n\n  for (const key in routerState[1]) {\n    const parallelRouteState = routerState[1][key]\n    const segmentForParallelRoute = parallelRouteState[0]\n    const cacheKey = createRouterCacheKey(segmentForParallelRoute)\n\n    const parallelSeedData =\n      cacheNodeSeedData !== null && cacheNodeSeedData[2][key] !== undefined\n        ? cacheNodeSeedData[2][key]\n        : null\n\n    let newCacheNode: CacheNode\n    if (parallelSeedData !== null) {\n      // New data was sent from the server.\n      const rsc = parallelSeedData[1]\n      const loading = parallelSeedData[3]\n      newCacheNode = {\n        lazyData: null,\n        // copy the layout but null the page segment as that's not meant to be used\n        rsc: segmentForParallelRoute.includes(PAGE_SEGMENT_KEY) ? null : rsc,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading,\n        navigatedAt,\n      }\n    } else {\n      // No data available for this node. This will trigger a lazy fetch\n      // during render.\n      newCacheNode = {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt: -1,\n      }\n    }\n\n    const existingParallelRoutes = newCache.parallelRoutes.get(key)\n    if (existingParallelRoutes) {\n      existingParallelRoutes.set(cacheKey, newCacheNode)\n    } else {\n      newCache.parallelRoutes.set(key, new Map([[cacheKey, newCacheNode]]))\n    }\n\n    fillNewTreeWithOnlyLoadingSegments(\n      navigatedAt,\n      newCacheNode,\n      existingCache,\n      parallelRouteState,\n      parallelSeedData\n    )\n  }\n}\n\n/**\n * Add search params to the page segments in the flight router state\n * Page segments that are associated with search params have a page segment key\n * followed by a query string. This function will add those params to the page segment.\n * This is useful if we return an aliased prefetch entry (ie, won't have search params)\n * but the canonical router URL has search params.\n */\nexport function addSearchParamsToPageSegments(\n  flightRouterState: FlightRouterState,\n  searchParams: Record<string, string | string[] | undefined>\n): FlightRouterState {\n  const [segment, parallelRoutes, ...rest] = flightRouterState\n\n  // If it's a page segment, modify the segment by adding search params\n  if (segment.includes(PAGE_SEGMENT_KEY)) {\n    const newSegment = addSearchParamsIfPageSegment(segment, searchParams)\n    return [newSegment, parallelRoutes, ...rest]\n  }\n\n  // Otherwise, recurse through the parallel routes and return a new tree\n  const updatedParallelRoutes: { [key: string]: FlightRouterState } = {}\n\n  for (const [key, parallelRoute] of Object.entries(parallelRoutes)) {\n    updatedParallelRoutes[key] = addSearchParamsToPageSegments(\n      parallelRoute,\n      searchParams\n    )\n  }\n\n  return [segment, updatedParallelRoutes, ...rest]\n}\n","import { ensureLeadingSlash } from '../../page-path/ensure-leading-slash'\nimport { isGroupSegment } from '../../segment'\n\n/**\n * Normalizes an app route so it represents the actual request path. Essentially\n * performing the following transformations:\n *\n * - `/(dashboard)/user/[id]/page` to `/user/[id]`\n * - `/(dashboard)/account/page` to `/account`\n * - `/user/[id]/page` to `/user/[id]`\n * - `/account/page` to `/account`\n * - `/page` to `/`\n * - `/(dashboard)/user/[id]/route` to `/user/[id]`\n * - `/(dashboard)/account/route` to `/account`\n * - `/user/[id]/route` to `/user/[id]`\n * - `/account/route` to `/account`\n * - `/route` to `/`\n * - `/` to `/`\n *\n * @param route the app route to normalize\n * @returns the normalized pathname\n */\nexport function normalizeAppPath(route: string) {\n  return ensureLeadingSlash(\n    route.split('/').reduce((pathname, segment, index, segments) => {\n      // Empty segments are ignored.\n      if (!segment) {\n        return pathname\n      }\n\n      // Groups are ignored.\n      if (isGroupSegment(segment)) {\n        return pathname\n      }\n\n      // Parallel segments are ignored.\n      if (segment[0] === '@') {\n        return pathname\n      }\n\n      // The last segment (if it's a leaf) should be ignored.\n      if (\n        (segment === 'page' || segment === 'route') &&\n        index === segments.length - 1\n      ) {\n        return pathname\n      }\n\n      return `${pathname}/${segment}`\n    }, '')\n  )\n}\n\n/**\n * Strips the `.rsc` extension if it's in the pathname.\n * Since this function is used on full urls it checks `?` for searchParams handling.\n */\nexport function normalizeRscURL(url: string) {\n  return url.replace(\n    /\\.rsc($|\\?)/,\n    // $1 ensures `?` is preserved\n    '$1'\n  )\n}\n","'use client'\n\nimport { Suspense, use } from 'react'\nimport type { StreamingMetadataResolvedState } from './types'\n\nfunction MetadataOutlet({\n  promise,\n}: {\n  promise: Promise<StreamingMetadataResolvedState>\n}) {\n  const { error, digest } = use(promise)\n  if (error) {\n    if (digest) {\n      // The error will lose its original digest after passing from server layer to client layer；\n      // We recover the digest property here to override the React created one if original digest exists.\n      ;(error as any).digest = digest\n    }\n    throw error\n  }\n  return null\n}\n\nexport function AsyncMetadataOutlet({\n  promise,\n}: {\n  promise: Promise<StreamingMetadataResolvedState>\n}) {\n  return (\n    <Suspense fallback={null}>\n      <MetadataOutlet promise={promise} />\n    </Suspense>\n  )\n}\n","import { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type {\n  Mutable,\n  ReadonlyReducerState,\n  ReducerState,\n  RefreshAction,\n} from '../router-reducer-types'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { handleMutable } from '../handle-mutable'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { fillLazyItemsTillLeafWithHead } from '../fill-lazy-items-till-leaf-with-head'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { handleSegmentMismatch } from '../handle-segment-mismatch'\nimport { hasInterceptionRouteInCurrentTree } from './has-interception-route-in-current-tree'\nimport { refreshInactiveParallelSegments } from '../refetch-inactive-parallel-segments'\nimport { revalidateEntireCache } from '../../segment-cache'\n\nexport function refreshReducer(\n  state: ReadonlyReducerState,\n  action: RefreshAction\n): ReducerState {\n  const { origin } = action\n  const mutable: Mutable = {}\n  const href = state.canonicalUrl\n\n  let currentTree = state.tree\n\n  mutable.preserveCustomHistoryState = false\n\n  const cache: CacheNode = createEmptyCacheNode()\n\n  // If the current tree was intercepted, the nextUrl should be included in the request.\n  // This is to ensure that the refresh request doesn't get intercepted, accidentally triggering the interception route.\n  const includeNextUrl = hasInterceptionRouteInCurrentTree(state.tree)\n\n  // TODO-APP: verify that `href` is not an external url.\n  // Fetch data from the root of the tree.\n  cache.lazyData = fetchServerResponse(new URL(href, origin), {\n    flightRouterState: [\n      currentTree[0],\n      currentTree[1],\n      currentTree[2],\n      'refetch',\n    ],\n    nextUrl: includeNextUrl ? state.nextUrl : null,\n  })\n\n  const navigatedAt = Date.now()\n  return cache.lazyData.then(\n    async ({ flightData, canonicalUrl: canonicalUrlOverride }) => {\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(\n          state,\n          mutable,\n          flightData,\n          state.pushRef.pendingPush\n        )\n      }\n\n      // Remove cache.lazyData as it has been resolved at this point.\n      cache.lazyData = null\n\n      for (const normalizedFlightData of flightData) {\n        const {\n          tree: treePatch,\n          seedData: cacheNodeSeedData,\n          head,\n          isRootRender,\n        } = normalizedFlightData\n\n        if (!isRootRender) {\n          // TODO-APP: handle this case better\n          console.log('REFRESH FAILED')\n          return state\n        }\n\n        const newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          [''],\n          currentTree,\n          treePatch,\n          state.canonicalUrl\n        )\n\n        if (newTree === null) {\n          return handleSegmentMismatch(state, action, treePatch)\n        }\n\n        if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n          return handleExternalUrl(\n            state,\n            mutable,\n            href,\n            state.pushRef.pendingPush\n          )\n        }\n\n        const canonicalUrlOverrideHref = canonicalUrlOverride\n          ? createHrefFromUrl(canonicalUrlOverride)\n          : undefined\n\n        if (canonicalUrlOverride) {\n          mutable.canonicalUrl = canonicalUrlOverrideHref\n        }\n\n        // Handles case where prefetch only returns the router tree patch without rendered components.\n        if (cacheNodeSeedData !== null) {\n          const rsc = cacheNodeSeedData[1]\n          const loading = cacheNodeSeedData[3]\n          cache.rsc = rsc\n          cache.prefetchRsc = null\n          cache.loading = loading\n          fillLazyItemsTillLeafWithHead(\n            navigatedAt,\n            cache,\n            // Existing cache is not passed in as `router.refresh()` has to invalidate the entire cache.\n            undefined,\n            treePatch,\n            cacheNodeSeedData,\n            head,\n            undefined\n          )\n          if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n            revalidateEntireCache(state.nextUrl, newTree)\n          } else {\n            mutable.prefetchCache = new Map()\n          }\n        }\n\n        await refreshInactiveParallelSegments({\n          navigatedAt,\n          state,\n          updatedTree: newTree,\n          updatedCache: cache,\n          includeNextUrl,\n          canonicalUrl: mutable.canonicalUrl || state.canonicalUrl,\n        })\n\n        mutable.cache = cache\n        mutable.patchedTree = newTree\n\n        currentTree = newTree\n      }\n\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { FlightRouterState } from '../../../server/app-render/types'\nimport { createRouterCacheKey } from './create-router-cache-key'\n\n/**\n * Invalidate cache one level down from the router state.\n */\nexport function invalidateCacheByRouterState(\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  routerState: FlightRouterState\n): void {\n  // Remove segment that we got data for so that it is filled in during rendering of rsc.\n  for (const key in routerState[1]) {\n    const segmentForParallelRoute = routerState[1][key][0]\n    const cacheKey = createRouterCacheKey(segmentForParallelRoute)\n    const existingParallelRoutesCacheNode =\n      existingCache.parallelRoutes.get(key)\n    if (existingParallelRoutesCacheNode) {\n      let parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode)\n      parallelRouteCacheNode.delete(cacheKey)\n      newCache.parallelRoutes.set(key, parallelRouteCacheNode)\n    }\n  }\n}\n","import type { FlightRouterState } from '../../../server/app-render/types'\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { AppRouterState } from './router-reducer-types'\nimport { applyFlightData } from './apply-flight-data'\nimport { fetchServerResponse } from './fetch-server-response'\nimport { PAGE_SEGMENT_KEY } from '../../../shared/lib/segment'\n\ninterface RefreshInactiveParallelSegments {\n  navigatedAt: number\n  state: AppRouterState\n  updatedTree: FlightRouterState\n  updatedCache: CacheNode\n  includeNextUrl: boolean\n  canonicalUrl: string\n}\n\n/**\n * Refreshes inactive segments that are still in the current FlightRouterState.\n * A segment is considered \"inactive\" when the server response indicates it didn't match to a page component.\n * This happens during a soft-navigation, where the server will want to patch in the segment\n * with the \"default\" component, but we explicitly ignore the server in this case\n * and keep the existing state for that segment. New data for inactive segments are inherently\n * not part of the server response when we patch the tree, because they were associated with a response\n * from an earlier navigation/request. For each segment, once it becomes \"active\", we encode the URL that provided\n * the data for it. This function traverses parallel routes looking for these markers so that it can re-fetch\n * and patch the new data into the tree.\n */\nexport async function refreshInactiveParallelSegments(\n  options: RefreshInactiveParallelSegments\n) {\n  const fetchedSegments = new Set<string>()\n  await refreshInactiveParallelSegmentsImpl({\n    ...options,\n    rootTree: options.updatedTree,\n    fetchedSegments,\n  })\n}\n\nasync function refreshInactiveParallelSegmentsImpl({\n  navigatedAt,\n  state,\n  updatedTree,\n  updatedCache,\n  includeNextUrl,\n  fetchedSegments,\n  rootTree = updatedTree,\n  canonicalUrl,\n}: RefreshInactiveParallelSegments & {\n  fetchedSegments: Set<string>\n  rootTree: FlightRouterState\n}) {\n  const [, parallelRoutes, refetchPath, refetchMarker] = updatedTree\n  const fetchPromises = []\n\n  if (\n    refetchPath &&\n    refetchPath !== canonicalUrl &&\n    refetchMarker === 'refresh' &&\n    // it's possible for the tree to contain multiple segments that contain data at the same URL\n    // we keep track of them so we can dedupe the requests\n    !fetchedSegments.has(refetchPath)\n  ) {\n    fetchedSegments.add(refetchPath) // Mark this URL as fetched\n\n    // Eagerly kick off the fetch for the refetch path & the parallel routes. This should be fine to do as they each operate\n    // independently on their own cache nodes, and `applyFlightData` will copy anything it doesn't care about from the existing cache.\n    const fetchPromise = fetchServerResponse(\n      new URL(refetchPath, location.origin),\n      {\n        // refetch from the root of the updated tree, otherwise it will be scoped to the current segment\n        // and might not contain the data we need to patch in interception route data (such as dynamic params from a previous segment)\n        flightRouterState: [rootTree[0], rootTree[1], rootTree[2], 'refetch'],\n        nextUrl: includeNextUrl ? state.nextUrl : null,\n      }\n    ).then(({ flightData }) => {\n      if (typeof flightData !== 'string') {\n        for (const flightDataPath of flightData) {\n          // we only pass the new cache as this function is called after clearing the router cache\n          // and filling in the new page data from the server. Meaning the existing cache is actually the cache that's\n          // just been created & has been written to, but hasn't been \"committed\" yet.\n          applyFlightData(\n            navigatedAt,\n            updatedCache,\n            updatedCache,\n            flightDataPath\n          )\n        }\n      } else {\n        // When flightData is a string, it suggests that the server response should have triggered an MPA navigation\n        // I'm not 100% sure of this decision, but it seems unlikely that we'd want to introduce a redirect side effect\n        // when refreshing on-screen data, so handling this has been ommitted.\n      }\n    })\n\n    fetchPromises.push(fetchPromise)\n  }\n\n  for (const key in parallelRoutes) {\n    const parallelFetchPromise = refreshInactiveParallelSegmentsImpl({\n      navigatedAt,\n      state,\n      updatedTree: parallelRoutes[key],\n      updatedCache,\n      includeNextUrl,\n      fetchedSegments,\n      rootTree,\n      canonicalUrl,\n    })\n\n    fetchPromises.push(parallelFetchPromise)\n  }\n\n  await Promise.all(fetchPromises)\n}\n\n/**\n * Walks the current parallel segments to determine if they are \"active\".\n * An active parallel route will have a `__PAGE__` segment in the FlightRouterState.\n * As opposed to a `__DEFAULT__` segment, which means there was no match for that parallel route.\n * We add a special marker here so that we know how to refresh its data when the router is revalidated.\n */\nexport function addRefreshMarkerToActiveParallelSegments(\n  tree: FlightRouterState,\n  path: string\n) {\n  const [segment, parallelRoutes, , refetchMarker] = tree\n  // a page segment might also contain concatenated search params, so we do a partial match on the key\n  if (segment.includes(PAGE_SEGMENT_KEY) && refetchMarker !== 'refresh') {\n    tree[2] = path\n    tree[3] = 'refresh'\n  }\n\n  for (const key in parallelRoutes) {\n    addRefreshMarkerToActiveParallelSegments(parallelRoutes[key], path)\n  }\n}\n","import { RedirectStatusCode } from './redirect-status-code'\nimport {\n  RedirectType,\n  type RedirectError,\n  isRedirectError,\n  REDIRECT_ERROR_CODE,\n} from './redirect-error'\n\nconst actionAsyncStorage =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/action-async-storage.external') as typeof import('../../server/app-render/action-async-storage.external')\n      ).actionAsyncStorage\n    : undefined\n\nexport function getRedirectError(\n  url: string,\n  type: RedirectType,\n  statusCode: RedirectStatusCode = RedirectStatusCode.TemporaryRedirect\n): RedirectError {\n  const error = new Error(REDIRECT_ERROR_CODE) as RedirectError\n  error.digest = `${REDIRECT_ERROR_CODE};${type};${url};${statusCode};`\n  return error\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 307/303 to the caller.\n * - In a Server Action, type defaults to 'push' and 'replace' elsewhere.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function redirect(\n  /** The URL to redirect to */\n  url: string,\n  type?: RedirectType\n): never {\n  type ??= actionAsyncStorage?.getStore()?.isAction\n    ? RedirectType.push\n    : RedirectType.replace\n\n  throw getRedirectError(url, type, RedirectStatusCode.TemporaryRedirect)\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 308/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function permanentRedirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  throw getRedirectError(url, type, RedirectStatusCode.PermanentRedirect)\n}\n\n/**\n * Returns the encoded URL from the error if it's a RedirectError, null\n * otherwise. Note that this does not validate the URL returned.\n *\n * @param error the error that may be a redirect error\n * @return the url if the error was a redirect error\n */\nexport function getURLFromRedirectError(error: RedirectError): string\nexport function getURLFromRedirectError(error: unknown): string | null {\n  if (!isRedirectError(error)) return null\n\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';')\n}\n\nexport function getRedirectTypeFromError(error: RedirectError): RedirectType {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return error.digest.split(';', 2)[1] as RedirectType\n}\n\nexport function getRedirectStatusCodeFromError(error: RedirectError): number {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return Number(error.digest.split(';').at(-2))\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    default: null,\n    getProperError: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    /**\n * Checks whether the given value is a NextError.\n * This can be used to print a more detailed error message with properties like `code` & `digest`.\n */ default: function() {\n        return isError;\n    },\n    getProperError: function() {\n        return getProperError;\n    }\n});\nconst _isplainobject = require(\"../shared/lib/is-plain-object\");\nfunction isError(err) {\n    return typeof err === 'object' && err !== null && 'name' in err && 'message' in err;\n}\nfunction safeStringify(obj) {\n    const seen = new WeakSet();\n    return JSON.stringify(obj, (_key, value)=>{\n        // If value is an object and already seen, replace with \"[Circular]\"\n        if (typeof value === 'object' && value !== null) {\n            if (seen.has(value)) {\n                return '[Circular]';\n            }\n            seen.add(value);\n        }\n        return value;\n    });\n}\nfunction getProperError(err) {\n    if (isError(err)) {\n        return err;\n    }\n    if (process.env.NODE_ENV === 'development') {\n        // provide better error for case where `throw undefined`\n        // is called in development\n        if (typeof err === 'undefined') {\n            return Object.defineProperty(new Error('An undefined error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined'), \"__NEXT_ERROR_CODE\", {\n                value: \"E98\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (err === null) {\n            return Object.defineProperty(new Error('A null error was thrown, ' + 'see here for more info: https://nextjs.org/docs/messages/threw-undefined'), \"__NEXT_ERROR_CODE\", {\n                value: \"E336\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    return Object.defineProperty(new Error((0, _isplainobject.isPlainObject)(err) ? safeStringify(err) : err + ''), \"__NEXT_ERROR_CODE\", {\n        value: \"E394\",\n        enumerable: false,\n        configurable: true\n    });\n}\n\n//# sourceMappingURL=is-error.js.map","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","\"trimStart\"in String.prototype||(String.prototype.trimStart=String.prototype.trimLeft),\"trimEnd\"in String.prototype||(String.prototype.trimEnd=String.prototype.trimRight),\"description\"in Symbol.prototype||Object.defineProperty(Symbol.prototype,\"description\",{configurable:!0,get:function(){var t=/\\((.*)\\)/.exec(this.toString());return t?t[1]:void 0}}),Array.prototype.flat||(Array.prototype.flat=function(t,r){return r=this.concat.apply([],this),t>1&&r.some(Array.isArray)?r.flat(t-1):r},Array.prototype.flatMap=function(t,r){return this.map(t,r).flat()}),Promise.prototype.finally||(Promise.prototype.finally=function(t){if(\"function\"!=typeof t)return this.then(t,t);var r=this.constructor||Promise;return this.then(function(n){return r.resolve(t()).then(function(){return n})},function(n){return r.resolve(t()).then(function(){throw n})})}),Object.fromEntries||(Object.fromEntries=function(t){return Array.from(t).reduce(function(t,r){return t[r[0]]=r[1],t},{})}),Array.prototype.at||(Array.prototype.at=function(t){var r=Math.trunc(t)||0;if(r<0&&(r+=this.length),!(r<0||r>=this.length))return this[r]}),Object.hasOwn||(Object.hasOwn=function(t,r){if(null==t)throw new TypeError(\"Cannot convert undefined or null to object\");return Object.prototype.hasOwnProperty.call(Object(t),r)}),\"canParse\"in URL||(URL.canParse=function(t,r){try{return!!new URL(t,r)}catch(t){return!1}});\n","import { computeChangedPath } from './compute-changed-path'\nimport type {\n  Mutable,\n  ReadonlyReducerState,\n  ReducerState,\n} from './router-reducer-types'\n\nfunction isNotUndefined<T>(value: T): value is Exclude<T, undefined> {\n  return typeof value !== 'undefined'\n}\n\nexport function handleMutable(\n  state: ReadonlyReducerState,\n  mutable: Mutable\n): ReducerState {\n  // shouldScroll is true by default, can override to false.\n  const shouldScroll = mutable.shouldScroll ?? true\n\n  let nextUrl = state.nextUrl\n\n  if (isNotUndefined(mutable.patchedTree)) {\n    // If we received a patched tree, we need to compute the changed path.\n    const changedPath = computeChangedPath(state.tree, mutable.patchedTree)\n    if (changedPath) {\n      // If the tree changed, we need to update the nextUrl\n      nextUrl = changedPath\n    } else if (!nextUrl) {\n      // if the tree ends up being the same (ie, no changed path), and we don't have a nextUrl, then we should use the canonicalUrl\n      nextUrl = state.canonicalUrl\n    }\n    // otherwise this will be a no-op and continue to use the existing nextUrl\n  }\n\n  return {\n    // Set href.\n    canonicalUrl: isNotUndefined(mutable.canonicalUrl)\n      ? mutable.canonicalUrl === state.canonicalUrl\n        ? state.canonicalUrl\n        : mutable.canonicalUrl\n      : state.canonicalUrl,\n    pushRef: {\n      pendingPush: isNotUndefined(mutable.pendingPush)\n        ? mutable.pendingPush\n        : state.pushRef.pendingPush,\n      mpaNavigation: isNotUndefined(mutable.mpaNavigation)\n        ? mutable.mpaNavigation\n        : state.pushRef.mpaNavigation,\n      preserveCustomHistoryState: isNotUndefined(\n        mutable.preserveCustomHistoryState\n      )\n        ? mutable.preserveCustomHistoryState\n        : state.pushRef.preserveCustomHistoryState,\n    },\n    // All navigation requires scroll and focus management to trigger.\n    focusAndScrollRef: {\n      apply: shouldScroll\n        ? isNotUndefined(mutable?.scrollableSegments)\n          ? true\n          : state.focusAndScrollRef.apply\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          false,\n      onlyHashChange: mutable.onlyHashChange || false,\n      hashFragment: shouldScroll\n        ? // Empty hash should trigger default behavior of scrolling layout into view.\n          // #top is handled in layout-router.\n          mutable.hashFragment && mutable.hashFragment !== ''\n          ? // Remove leading # and decode hash to make non-latin hashes work.\n            decodeURIComponent(mutable.hashFragment.slice(1))\n          : state.focusAndScrollRef.hashFragment\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          null,\n      segmentPaths: shouldScroll\n        ? mutable?.scrollableSegments ?? state.focusAndScrollRef.segmentPaths\n        : // If shouldScroll is false then we should not apply scroll and focus management.\n          [],\n    },\n    // Apply cache.\n    cache: mutable.cache ? mutable.cache : state.cache,\n    prefetchCache: mutable.prefetchCache\n      ? mutable.prefetchCache\n      : state.prefetchCache,\n    // Apply patched router state.\n    tree: isNotUndefined(mutable.patchedTree)\n      ? mutable.patchedTree\n      : state.tree,\n    nextUrl,\n  }\n}\n","'use client'\nimport React, { useEffect } from 'react'\nimport type { AppRouterInstance } from '../../shared/lib/app-router-context.shared-runtime'\nimport { useRouter } from './navigation'\nimport { getRedirectTypeFromError, getURLFromRedirectError } from './redirect'\nimport { RedirectType, isRedirectError } from './redirect-error'\n\ninterface RedirectBoundaryProps {\n  router: AppRouterInstance\n  children: React.ReactNode\n}\n\nfunction HandleRedirect({\n  redirect,\n  reset,\n  redirectType,\n}: {\n  redirect: string\n  redirectType: RedirectType\n  reset: () => void\n}) {\n  const router = useRouter()\n\n  useEffect(() => {\n    React.startTransition(() => {\n      if (redirectType === RedirectType.push) {\n        router.push(redirect, {})\n      } else {\n        router.replace(redirect, {})\n      }\n      reset()\n    })\n  }, [redirect, redirectType, reset, router])\n\n  return null\n}\n\nexport class RedirectErrorBoundary extends React.Component<\n  RedirectBoundaryProps,\n  { redirect: string | null; redirectType: RedirectType | null }\n> {\n  constructor(props: RedirectBoundaryProps) {\n    super(props)\n    this.state = { redirect: null, redirectType: null }\n  }\n\n  static getDerivedStateFromError(error: any) {\n    if (isRedirectError(error)) {\n      const url = getURLFromRedirectError(error)\n      const redirectType = getRedirectTypeFromError(error)\n      return { redirect: url, redirectType }\n    }\n    // Re-throw if error is not for redirect\n    throw error\n  }\n\n  // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.\n  render(): React.ReactNode {\n    const { redirect, redirectType } = this.state\n    if (redirect !== null && redirectType !== null) {\n      return (\n        <HandleRedirect\n          redirect={redirect}\n          redirectType={redirectType}\n          reset={() => this.setState({ redirect: null })}\n        />\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nexport function RedirectBoundary({ children }: { children: React.ReactNode }) {\n  const router = useRouter()\n  return (\n    <RedirectErrorBoundary router={router}>{children}</RedirectErrorBoundary>\n  )\n}\n","import { removeTrailingSlash } from '../shared/lib/router/utils/remove-trailing-slash'\nimport { parsePath } from '../shared/lib/router/utils/parse-path'\n\n/**\n * Normalizes the trailing slash of a path according to the `trailingSlash` option\n * in `next.config.js`.\n */\nexport const normalizePathTrailingSlash = (path: string) => {\n  if (!path.startsWith('/') || process.env.__NEXT_MANUAL_TRAILING_SLASH) {\n    return path\n  }\n\n  const { pathname, query, hash } = parsePath(path)\n  if (process.env.__NEXT_TRAILING_SLASH) {\n    if (/\\.[^/]+\\/?$/.test(pathname)) {\n      return `${removeTrailingSlash(pathname)}${query}${hash}`\n    } else if (pathname.endsWith('/')) {\n      return `${pathname}${query}${hash}`\n    } else {\n      return `${pathname}/${query}${hash}`\n    }\n  }\n\n  return `${removeTrailingSlash(pathname)}${query}${hash}`\n}\n","import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `unauthorized` docs\n/**\n * @experimental\n * This function allows you to render the [unauthorized.js file](https://nextjs.org/docs/app/api-reference/file-conventions/unauthorized)\n * within a route segment as well as inject a tag.\n *\n * `unauthorized()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n *\n * Read more: [Next.js Docs: `unauthorized`](https://nextjs.org/docs/app/api-reference/functions/unauthorized)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};401`\n\nexport function unauthorized(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`unauthorized()\\` is experimental and only allowed to be used when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n","var id = 0;\n\nfunction _class_private_field_loose_key(name) {\n    return \"__private_\" + id++ + \"_\" + name;\n}\nexport { _class_private_field_loose_key as _ };\n","// imports polyfill from `@next/polyfill-module` after build.\nimport '../build/polyfills/polyfill-module'\n\n// Only setup devtools in development\nif (process.env.NODE_ENV !== 'production') {\n  require('../next-devtools/userspace/app/app-dev-overlay-setup') as typeof import('../next-devtools/userspace/app/app-dev-overlay-setup')\n}\n","export function encodeURIPath(file: string) {\n  return file\n    .split('/')\n    .map((p) => encodeURIComponent(p))\n    .join('/')\n}\n","import type {\n  FlightRouterState,\n  Segment,\n} from '../../../server/app-render/types'\nimport { INTERCEPTION_ROUTE_MARKERS } from '../../../shared/lib/router/utils/interception-routes'\nimport type { Params } from '../../../server/request/params'\nimport {\n  isGroupSegment,\n  DEFAULT_SEGMENT_KEY,\n  PAGE_SEGMENT_KEY,\n} from '../../../shared/lib/segment'\nimport { matchSegment } from '../match-segments'\n\nconst removeLeadingSlash = (segment: string): string => {\n  return segment[0] === '/' ? segment.slice(1) : segment\n}\n\nconst segmentToPathname = (segment: Segment): string => {\n  if (typeof segment === 'string') {\n    // 'children' is not a valid path -- it's technically a parallel route that corresponds with the current segment's page\n    // if we don't skip it, then the computed pathname might be something like `/children` which doesn't make sense.\n    if (segment === 'children') return ''\n\n    return segment\n  }\n\n  return segment[1]\n}\n\nfunction normalizeSegments(segments: string[]): string {\n  return (\n    segments.reduce((acc, segment) => {\n      segment = removeLeadingSlash(segment)\n      if (segment === '' || isGroupSegment(segment)) {\n        return acc\n      }\n\n      return `${acc}/${segment}`\n    }, '') || '/'\n  )\n}\n\nexport function extractPathFromFlightRouterState(\n  flightRouterState: FlightRouterState\n): string | undefined {\n  const segment = Array.isArray(flightRouterState[0])\n    ? flightRouterState[0][1]\n    : flightRouterState[0]\n\n  if (\n    segment === DEFAULT_SEGMENT_KEY ||\n    INTERCEPTION_ROUTE_MARKERS.some((m) => segment.startsWith(m))\n  )\n    return undefined\n\n  if (segment.startsWith(PAGE_SEGMENT_KEY)) return ''\n\n  const segments = [segmentToPathname(segment)]\n  const parallelRoutes = flightRouterState[1] ?? {}\n\n  const childrenPath = parallelRoutes.children\n    ? extractPathFromFlightRouterState(parallelRoutes.children)\n    : undefined\n\n  if (childrenPath !== undefined) {\n    segments.push(childrenPath)\n  } else {\n    for (const [key, value] of Object.entries(parallelRoutes)) {\n      if (key === 'children') continue\n\n      const childPath = extractPathFromFlightRouterState(value)\n\n      if (childPath !== undefined) {\n        segments.push(childPath)\n      }\n    }\n  }\n\n  return normalizeSegments(segments)\n}\n\nfunction computeChangedPathImpl(\n  treeA: FlightRouterState,\n  treeB: FlightRouterState\n): string | null {\n  const [segmentA, parallelRoutesA] = treeA\n  const [segmentB, parallelRoutesB] = treeB\n\n  const normalizedSegmentA = segmentToPathname(segmentA)\n  const normalizedSegmentB = segmentToPathname(segmentB)\n\n  if (\n    INTERCEPTION_ROUTE_MARKERS.some(\n      (m) =>\n        normalizedSegmentA.startsWith(m) || normalizedSegmentB.startsWith(m)\n    )\n  ) {\n    return ''\n  }\n\n  if (!matchSegment(segmentA, segmentB)) {\n    // once we find where the tree changed, we compute the rest of the path by traversing the tree\n    return extractPathFromFlightRouterState(treeB) ?? ''\n  }\n\n  for (const parallelRouterKey in parallelRoutesA) {\n    if (parallelRoutesB[parallelRouterKey]) {\n      const changedPath = computeChangedPathImpl(\n        parallelRoutesA[parallelRouterKey],\n        parallelRoutesB[parallelRouterKey]\n      )\n      if (changedPath !== null) {\n        return `${segmentToPathname(segmentB)}/${changedPath}`\n      }\n    }\n  }\n\n  return null\n}\n\nexport function computeChangedPath(\n  treeA: FlightRouterState,\n  treeB: FlightRouterState\n): string | null {\n  const changedPath = computeChangedPathImpl(treeA, treeB)\n\n  if (changedPath == null || changedPath === '/') {\n    return changedPath\n  }\n\n  // lightweight normalization to remove route groups\n  return normalizeSegments(changedPath.split('/'))\n}\n\n/**\n * Recursively extracts dynamic parameters from FlightRouterState.\n */\nexport function getSelectedParams(\n  currentTree: FlightRouterState,\n  params: Params = {}\n): Params {\n  const parallelRoutes = currentTree[1]\n\n  for (const parallelRoute of Object.values(parallelRoutes)) {\n    const segment = parallelRoute[0]\n    const isDynamicParameter = Array.isArray(segment)\n    const segmentValue = isDynamicParameter ? segment[1] : segment\n    if (!segmentValue || segmentValue.startsWith(PAGE_SEGMENT_KEY)) continue\n\n    // Ensure catchAll and optional catchall are turned into an array\n    const isCatchAll =\n      isDynamicParameter && (segment[2] === 'c' || segment[2] === 'oc')\n\n    if (isCatchAll) {\n      params[segment[0]] = segment[1].split('/')\n    } else if (isDynamicParameter) {\n      params[segment[0]] = segment[1]\n    }\n\n    params = getSelectedParams(parallelRoute, params)\n  }\n\n  return params\n}\n","import type {\n  PrefetchAction,\n  ReducerState,\n  ReadonlyReducerState,\n} from '../router-reducer-types'\nimport { PromiseQueue } from '../../promise-queue'\nimport {\n  getOrCreatePrefetchCacheEntry,\n  prunePrefetchCache,\n} from '../prefetch-cache-utils'\nexport const prefetchQueue = new PromiseQueue(5)\n\nexport const prefetchReducer = process.env.__NEXT_CLIENT_SEGMENT_CACHE\n  ? identityReducerWhenSegmentCacheIsEnabled\n  : prefetchReducerImpl\n\nfunction identityReducerWhenSegmentCacheIsEnabled<T>(state: T): T {\n  // Unlike the old implementation, the Segment Cache doesn't store its data in\n  // the router reducer state.\n  //\n  // This shouldn't be reachable because we wrap the prefetch API in a check,\n  // too, which prevents the action from being dispatched. But it's here for\n  // clarity + code elimination.\n  return state\n}\n\nfunction prefetchReducerImpl(\n  state: ReadonlyReducerState,\n  action: PrefetchAction\n): ReducerState {\n  // let's prune the prefetch cache before we do anything else\n  prunePrefetchCache(state.prefetchCache)\n\n  const { url } = action\n\n  getOrCreatePrefetchCacheEntry({\n    url,\n    nextUrl: state.nextUrl,\n    prefetchCache: state.prefetchCache,\n    kind: action.kind,\n    tree: state.tree,\n    allowAliasing: true,\n  })\n\n  return state\n}\n","/**\n * @license React\n * react-jsx-runtime.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\nfunction jsxProd(type, config, maybeKey) {\n  var key = null;\n  void 0 !== maybeKey && (key = \"\" + maybeKey);\n  void 0 !== config.key && (key = \"\" + config.key);\n  if (\"key\" in config) {\n    maybeKey = {};\n    for (var propName in config)\n      \"key\" !== propName && (maybeKey[propName] = config[propName]);\n  } else maybeKey = config;\n  config = maybeKey.ref;\n  return {\n    $$typeof: REACT_ELEMENT_TYPE,\n    type: type,\n    key: key,\n    ref: void 0 !== config ? config : null,\n    props: maybeKey\n  };\n}\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsx = jsxProd;\nexports.jsxs = jsxProd;\n","import { parsePath } from './parse-path'\n\n/**\n * Adds the provided prefix to the given path. It first ensures that the path\n * is indeed starting with a slash.\n */\nexport function addPathPrefix(path: string, prefix?: string) {\n  if (!path.startsWith('/') || !prefix) {\n    return path\n  }\n\n  const { pathname, query, hash } = parsePath(path)\n  return `${prefix}${pathname}${query}${hash}`\n}\n","import { hasBasePath } from './has-base-path'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function removeBasePath(path: string): string {\n  if (process.env.__NEXT_MANUAL_CLIENT_BASE_PATH) {\n    if (!hasBasePath(path)) {\n      return path\n    }\n  }\n\n  // Can't trim the basePath if it has zero length!\n  if (basePath.length === 0) return path\n\n  path = path.slice(basePath.length)\n  if (!path.startsWith('/')) path = `/${path}`\n  return path\n}\n","const basePath = process.env.__NEXT_ROUTER_BASEPATH || ''\nconst pathname = `${basePath}/__nextjs_source-map`\n\nexport const findSourceMapURL =\n  process.env.NODE_ENV === 'development'\n    ? function findSourceMapURL(filename: string): string | null {\n        if (filename === '') {\n          return null\n        }\n\n        if (\n          filename.startsWith(document.location.origin) &&\n          filename.includes('/_next/static')\n        ) {\n          // This is a request for a client chunk. This can only happen when\n          // using Turbopack. In this case, since we control how those source\n          // maps are generated, we can safely assume that the sourceMappingURL\n          // is relative to the filename, with an added `.map` extension. The\n          // browser can just request this file, and it gets served through the\n          // normal dev server, without the need to route this through\n          // the `/__nextjs_source-map` dev middleware.\n          return `${filename}.map`\n        }\n\n        const url = new URL(pathname, document.location.origin)\n        url.searchParams.set('filename', filename)\n\n        return url.href\n      }\n    : undefined\n","import type { Dispatch } from 'react'\nimport React, { use } from 'react'\nimport { isThenable } from '../../shared/lib/is-thenable'\nimport type { AppRouterActionQueue } from './app-router-instance'\nimport type {\n  AppRouterState,\n  ReducerActions,\n  ReducerState,\n} from './router-reducer/router-reducer-types'\n\n// The app router state lives outside of React, so we can import the dispatch\n// method directly wherever we need it, rather than passing it around via props\n// or context.\nlet dispatch: Dispatch<ReducerActions> | null = null\n\nexport function dispatchAppRouterAction(action: ReducerActions) {\n  if (dispatch === null) {\n    throw new Error(\n      'Internal Next.js error: Router action dispatched before initialization.'\n    )\n  }\n  dispatch(action)\n}\n\nexport function useActionQueue(\n  actionQueue: AppRouterActionQueue\n): AppRouterState {\n  const [state, setState] = React.useState<ReducerState>(actionQueue.state)\n\n  // Because of a known issue that requires to decode Flight streams inside the\n  // render phase, we have to be a bit clever and assign the dispatch method to\n  // a module-level variable upon initialization. The useState hook in this\n  // module only exists to synchronize state that lives outside of React.\n  // Ideally, what we'd do instead is pass the state as a prop to root.render;\n  // this is conceptually how we're modeling the app router state, despite the\n  // weird implementation details.\n  if (process.env.NODE_ENV !== 'production') {\n    const { useAppDevRenderingIndicator } =\n      require('../../next-devtools/userspace/use-app-dev-rendering-indicator') as typeof import('../../next-devtools/userspace/use-app-dev-rendering-indicator')\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const appDevRenderingIndicator = useAppDevRenderingIndicator()\n\n    dispatch = (action: ReducerActions) => {\n      appDevRenderingIndicator(() => {\n        actionQueue.dispatch(action, setState)\n      })\n    }\n  } else {\n    dispatch = (action: ReducerActions) =>\n      actionQueue.dispatch(action, setState)\n  }\n\n  return isThenable(state) ? use(state) : state\n}\n","import type { FlightSegmentPath } from '../../../server/app-render/types'\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport { getNextFlightSegmentPath } from '../../flight-data-helpers'\nimport { createRouterCacheKey } from './create-router-cache-key'\n\n/**\n * This will clear the CacheNode data for a particular segment path. This will cause a lazy-fetch in layout router to fill in new data.\n */\nexport function clearCacheNodeDataForSegmentPath(\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath\n): void {\n  const isLastEntry = flightSegmentPath.length <= 2\n\n  const [parallelRouteKey, segment] = flightSegmentPath\n  const cacheKey = createRouterCacheKey(segment)\n\n  const existingChildSegmentMap =\n    existingCache.parallelRoutes.get(parallelRouteKey)\n\n  let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey)\n\n  if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n    childSegmentMap = new Map(existingChildSegmentMap)\n    newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap)\n  }\n\n  const existingChildCacheNode = existingChildSegmentMap?.get(cacheKey)\n  let childCacheNode = childSegmentMap.get(cacheKey)\n\n  // In case of last segment start off the fetch at this level and don't copy further down.\n  if (isLastEntry) {\n    if (\n      !childCacheNode ||\n      !childCacheNode.lazyData ||\n      childCacheNode === existingChildCacheNode\n    ) {\n      childSegmentMap.set(cacheKey, {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt: -1,\n      })\n    }\n    return\n  }\n\n  if (!childCacheNode || !existingChildCacheNode) {\n    // Start fetch in the place where the existing cache doesn't have the data yet.\n    if (!childCacheNode) {\n      childSegmentMap.set(cacheKey, {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt: -1,\n      })\n    }\n    return\n  }\n\n  if (childCacheNode === existingChildCacheNode) {\n    childCacheNode = {\n      lazyData: childCacheNode.lazyData,\n      rsc: childCacheNode.rsc,\n      prefetchRsc: childCacheNode.prefetchRsc,\n      head: childCacheNode.head,\n      prefetchHead: childCacheNode.prefetchHead,\n      parallelRoutes: new Map(childCacheNode.parallelRoutes),\n      loading: childCacheNode.loading,\n    } as CacheNode\n    childSegmentMap.set(cacheKey, childCacheNode)\n  }\n\n  return clearCacheNodeDataForSegmentPath(\n    childCacheNode,\n    existingChildCacheNode,\n    getNextFlightSegmentPath(flightSegmentPath)\n  )\n}\n","// http://www.cse.yorku.ca/~oz/hash.html\n// More specifically, 32-bit hash via djbxor\n// (ref: https://gist.github.com/eplawless/52813b1d8ad9af510d85?permalink_comment_id=3367765#gistcomment-3367765)\n// This is due to number type differences between rust for turbopack to js number types,\n// where rust does not have easy way to repreesnt js's 53-bit float number type for the matching\n// overflow behavior. This is more `correct` in terms of having canonical hash across different runtime / implementation\n// as can gaurantee determinstic output from 32bit hash.\nexport function djb2Hash(str: string) {\n  let hash = 5381\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = ((hash << 5) + hash + char) & 0xffffffff\n  }\n  return hash >>> 0\n}\n\nexport function hexHash(str: string) {\n  return djb2Hash(str).toString(36).slice(0, 5)\n}\n","import { HTML_LIMITED_BOT_UA_RE } from './html-bots'\n\n// Bot crawler that will spin up a headless browser and execute JS.\n// By default, only googlebots are considered as DOM bots. Blow is where the regex is computed from:\n// x-ref: https://developers.google.com/search/docs/crawling-indexing/google-common-crawlers\nconst HEADLESS_BROWSER_BOT_UA_RE = /google/i\n\nexport const HTML_LIMITED_BOT_UA_RE_STRING = HTML_LIMITED_BOT_UA_RE.source\n\nexport { HTML_LIMITED_BOT_UA_RE }\n\nfunction isDomBotUA(userAgent: string) {\n  return HEADLESS_BROWSER_BOT_UA_RE.test(userAgent)\n}\n\nfunction isHtmlLimitedBotUA(userAgent: string) {\n  return HTML_LIMITED_BOT_UA_RE.test(userAgent)\n}\n\nexport function isBot(userAgent: string): boolean {\n  return isDomBotUA(userAgent) || isHtmlLimitedBotUA(userAgent)\n}\n\nexport function getBotType(userAgent: string): 'dom' | 'html' | undefined {\n  if (isDomBotUA(userAgent)) {\n    return 'dom'\n  }\n  if (isHtmlLimitedBotUA(userAgent)) {\n    return 'html'\n  }\n  return undefined\n}\n","// This has to be a shared module which is shared between client component error boundary and dynamic component\nconst BAILOUT_TO_CSR = 'BAILOUT_TO_CLIENT_SIDE_RENDERING'\n\n/** An error that should be thrown when we want to bail out to client-side rendering. */\nexport class BailoutToCSRError extends Error {\n  public readonly digest = BAILOUT_TO_CSR\n\n  constructor(public readonly reason: string) {\n    super(`Bail out to client-side rendering: ${reason}`)\n  }\n}\n\n/** Checks if a passed argument is an error that is thrown if we want to bail out to client-side rendering. */\nexport function isBailoutToCSRError(err: unknown): err is BailoutToCSRError {\n  if (typeof err !== 'object' || err === null || !('digest' in err)) {\n    return false\n  }\n\n  return err.digest === BAILOUT_TO_CSR\n}\n","'use client'\n\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport type { Params } from '../../server/request/params'\n\n/**\n * When the Page is a client component we send the params to this client wrapper\n * where they are turned into dynamically tracked values before being passed to the actual Segment component.\n *\n * additionally we may send a promise representing params. We don't ever use this passed\n * value but it can be necessary for the sender to send a Promise that doesn't resolve in certain situations\n * such as when dynamicIO is enabled. It is up to the caller to decide if the promises are needed.\n */\nexport function ClientSegmentRoot({\n  Component,\n  slots,\n  params,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  promise,\n}: {\n  Component: React.ComponentType<any>\n  slots: { [key: string]: React.ReactNode }\n  params: Params\n  promise?: Promise<any>\n}) {\n  if (typeof window === 'undefined') {\n    const { workAsyncStorage } =\n      require('../../server/app-render/work-async-storage.external') as typeof import('../../server/app-render/work-async-storage.external')\n\n    let clientParams: Promise<Params>\n    // We are going to instrument the searchParams prop with tracking for the\n    // appropriate context. We wrap differently in prerendering vs rendering\n    const store = workAsyncStorage.getStore()\n    if (!store) {\n      throw new InvariantError(\n        'Expected workStore to exist when handling params in a client segment such as a Layout or Template.'\n      )\n    }\n\n    const { createParamsFromClient } =\n      require('../../server/request/params') as typeof import('../../server/request/params')\n    clientParams = createParamsFromClient(params, store)\n\n    return <Component {...slots} params={clientParams} />\n  } else {\n    const { createRenderParamsFromClient } =\n      require('../request/params.browser') as typeof import('../request/params.browser')\n    const clientParams = createRenderParamsFromClient(params)\n    return <Component {...slots} params={clientParams} />\n  }\n}\n","function _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) return obj;\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") return { default: obj };\n\n    var cache = _getRequireWildcardCache(nodeInterop);\n\n    if (cache && cache.has(obj)) return cache.get(obj);\n\n    var newObj = { __proto__: null };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);\n            else newObj[key] = obj[key];\n        }\n    }\n\n    newObj.default = obj;\n\n    if (cache) cache.set(obj, newObj);\n\n    return newObj;\n}\nexport { _interop_require_wildcard as _ };\n","import type { FlightRouterState } from '../../server/app-render/types'\nimport type { Params } from '../../server/request/params'\n\nimport { useContext, useMemo } from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  type AppRouterInstance,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport { getSegmentValue } from './router-reducer/reducers/get-segment-value'\nimport { PAGE_SEGMENT_KEY, DEFAULT_SEGMENT_KEY } from '../../shared/lib/segment'\nimport { ReadonlyURLSearchParams } from './navigation.react-server'\n\nconst useDynamicRouteParams =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/dynamic-rendering') as typeof import('../../server/app-render/dynamic-rendering')\n      ).useDynamicRouteParams\n    : undefined\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you *read* the current URL's search parameters.\n *\n * Learn more about [`URLSearchParams` on MDN](https://developer.mozilla.org/docs/Web/API/URLSearchParams)\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useSearchParams } from 'next/navigation'\n *\n * export default function Page() {\n *   const searchParams = useSearchParams()\n *   searchParams.get('foo') // returns 'bar' when ?foo=bar\n *   // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSearchParams`](https://nextjs.org/docs/app/api-reference/functions/use-search-params)\n */\n// Client components API\nexport function useSearchParams(): ReadonlyURLSearchParams {\n  const searchParams = useContext(SearchParamsContext)\n\n  // In the case where this is `null`, the compat types added in\n  // `next-env.d.ts` will add a new overload that changes the return type to\n  // include `null`.\n  const readonlySearchParams = useMemo(() => {\n    if (!searchParams) {\n      // When the router is not ready in pages, we won't have the search params\n      // available.\n      return null\n    }\n\n    return new ReadonlyURLSearchParams(searchParams)\n  }, [searchParams]) as ReadonlyURLSearchParams\n\n  if (typeof window === 'undefined') {\n    // AsyncLocalStorage should not be included in the client bundle.\n    const { bailoutToClientRendering } =\n      require('./bailout-to-client-rendering') as typeof import('./bailout-to-client-rendering')\n    // TODO-APP: handle dynamic = 'force-static' here and on the client\n    bailoutToClientRendering('useSearchParams()')\n  }\n\n  return readonlySearchParams\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the current URL's pathname.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { usePathname } from 'next/navigation'\n *\n * export default function Page() {\n *  const pathname = usePathname() // returns \"/dashboard\" on /dashboard?foo=bar\n *  // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `usePathname`](https://nextjs.org/docs/app/api-reference/functions/use-pathname)\n */\n// Client components API\nexport function usePathname(): string {\n  useDynamicRouteParams?.('usePathname()')\n\n  // In the case where this is `null`, the compat types added in `next-env.d.ts`\n  // will add a new overload that changes the return type to include `null`.\n  return useContext(PathnameContext) as string\n}\n\n// Client components API\nexport {\n  ServerInsertedHTMLContext,\n  useServerInsertedHTML,\n} from '../../shared/lib/server-inserted-html.shared-runtime'\n\n/**\n *\n * This hook allows you to programmatically change routes inside [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components).\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useRouter } from 'next/navigation'\n *\n * export default function Page() {\n *  const router = useRouter()\n *  // ...\n *  router.push('/dashboard') // Navigate to /dashboard\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useRouter`](https://nextjs.org/docs/app/api-reference/functions/use-router)\n */\n// Client components API\nexport function useRouter(): AppRouterInstance {\n  const router = useContext(AppRouterContext)\n  if (router === null) {\n    throw new Error('invariant expected app router to be mounted')\n  }\n\n  return router\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read a route's dynamic params filled in by the current URL.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useParams } from 'next/navigation'\n *\n * export default function Page() {\n *   // on /dashboard/[team] where pathname is /dashboard/nextjs\n *   const { team } = useParams() // team === \"nextjs\"\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useParams`](https://nextjs.org/docs/app/api-reference/functions/use-params)\n */\n// Client components API\nexport function useParams<T extends Params = Params>(): T {\n  useDynamicRouteParams?.('useParams()')\n\n  return useContext(PathParamsContext) as T\n}\n\n/** Get the canonical parameters from the current level to the leaf node. */\n// Client components API\nfunction getSelectedLayoutSegmentPath(\n  tree: FlightRouterState,\n  parallelRouteKey: string,\n  first = true,\n  segmentPath: string[] = []\n): string[] {\n  let node: FlightRouterState\n  if (first) {\n    // Use the provided parallel route key on the first parallel route\n    node = tree[1][parallelRouteKey]\n  } else {\n    // After first parallel route prefer children, if there's no children pick the first parallel route.\n    const parallelRoutes = tree[1]\n    node = parallelRoutes.children ?? Object.values(parallelRoutes)[0]\n  }\n\n  if (!node) return segmentPath\n  const segment = node[0]\n\n  let segmentValue = getSegmentValue(segment)\n\n  if (!segmentValue || segmentValue.startsWith(PAGE_SEGMENT_KEY)) {\n    return segmentPath\n  }\n\n  segmentPath.push(segmentValue)\n\n  return getSelectedLayoutSegmentPath(\n    node,\n    parallelRouteKey,\n    false,\n    segmentPath\n  )\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segments **below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n *\n * import { useSelectedLayoutSegments } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segments = useSelectedLayoutSegments()\n *\n *   return (\n *     <ul>\n *       {segments.map((segment, index) => (\n *         <li key={index}>{segment}</li>\n *       ))}\n *     </ul>\n *   )\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegments`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments)\n */\n// Client components API\nexport function useSelectedLayoutSegments(\n  parallelRouteKey: string = 'children'\n): string[] {\n  useDynamicRouteParams?.('useSelectedLayoutSegments()')\n\n  const context = useContext(LayoutRouterContext)\n  // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts\n  if (!context) return null\n\n  return getSelectedLayoutSegmentPath(context.parentTree, parallelRouteKey)\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segment **one level below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n * import { useSelectedLayoutSegment } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segment = useSelectedLayoutSegment()\n *\n *   return <p>Active segment: {segment}</p>\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegment`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment)\n */\n// Client components API\nexport function useSelectedLayoutSegment(\n  parallelRouteKey: string = 'children'\n): string | null {\n  useDynamicRouteParams?.('useSelectedLayoutSegment()')\n\n  const selectedLayoutSegments = useSelectedLayoutSegments(parallelRouteKey)\n\n  if (!selectedLayoutSegments || selectedLayoutSegments.length === 0) {\n    return null\n  }\n\n  const selectedLayoutSegment =\n    parallelRouteKey === 'children'\n      ? selectedLayoutSegments[0]\n      : selectedLayoutSegments[selectedLayoutSegments.length - 1]\n\n  // if the default slot is showing, we return null since it's not technically \"selected\" (it's a fallback)\n  // and returning an internal value like `__DEFAULT__` would be confusing.\n  return selectedLayoutSegment === DEFAULT_SEGMENT_KEY\n    ? null\n    : selectedLayoutSegment\n}\n\n// Shared components APIs\nexport {\n  notFound,\n  forbidden,\n  unauthorized,\n  redirect,\n  permanentRedirect,\n  RedirectType,\n  ReadonlyURLSearchParams,\n  unstable_rethrow,\n} from './navigation.react-server'\n","'use client'\n\n// This is a client component that only renders during SSR,\n// but will be replaced during streaming with an icon insertion script tag.\n// We don't want it to be presented anywhere so it's only visible during streaming,\n// right after the icon meta tags so that browser can pick it up as soon as it's rendered.\n// Note: we don't just emit the script here because we only need the script if it's not in the head,\n// and we need it to be hoistable alongside the other metadata but sync scripts are not hoistable.\nexport const IconMark = () => {\n  if (typeof window !== 'undefined') {\n    return null\n  }\n  return <meta name=\"«nxt-icon»\" />\n}\n","const workAsyncStorage =\n  typeof window === 'undefined'\n    ? (\n        require('../../server/app-render/work-async-storage.external') as typeof import('../../server/app-render/work-async-storage.external')\n      ).workAsyncStorage\n    : undefined\n\n// if we are revalidating we want to re-throw the error so the\n// function crashes so we can maintain our previous cache\n// instead of caching the error page\nexport function HandleISRError({ error }: { error: any }) {\n  if (workAsyncStorage) {\n    const store = workAsyncStorage.getStore()\n    if (store?.isRevalidate || store?.isStaticGeneration) {\n      console.error(error)\n      throw error\n    }\n  }\n\n  return null\n}\n","'use client'\n\nimport { createContext } from 'react'\nimport type { Params } from '../../server/request/params'\n\nexport const SearchParamsContext = createContext<URLSearchParams | null>(null)\nexport const PathnameContext = createContext<string | null>(null)\nexport const PathParamsContext = createContext<Params | null>(null)\n\nif (process.env.NODE_ENV !== 'production') {\n  SearchParamsContext.displayName = 'SearchParamsContext'\n  PathnameContext.displayName = 'PathnameContext'\n  PathParamsContext.displayName = 'PathParamsContext'\n}\n","/**\n * Check to see if a value is Thenable.\n *\n * @param promise the maybe-thenable value\n * @returns true if the value is thenable\n */\nexport function isThenable<T = unknown>(\n  promise: Promise<T> | T\n): promise is Promise<T> {\n  return (\n    promise !== null &&\n    typeof promise === 'object' &&\n    'then' in promise &&\n    typeof promise.then === 'function'\n  )\n}\n","import {\n  ACTION_NAVIGATE,\n  ACTION_SERVER_PATCH,\n  ACTION_RESTORE,\n  ACTION_REFRESH,\n  ACTION_PREFETCH,\n  ACTION_HMR_REFRESH,\n  ACTION_SERVER_ACTION,\n} from './router-reducer-types'\nimport type {\n  ReducerActions,\n  ReducerState,\n  ReadonlyReducerState,\n} from './router-reducer-types'\nimport { navigateReducer } from './reducers/navigate-reducer'\nimport { serverPatchReducer } from './reducers/server-patch-reducer'\nimport { restoreReducer } from './reducers/restore-reducer'\nimport { refreshReducer } from './reducers/refresh-reducer'\nimport { prefetchReducer } from './reducers/prefetch-reducer'\nimport { hmrRefreshReducer } from './reducers/hmr-refresh-reducer'\nimport { serverActionReducer } from './reducers/server-action-reducer'\n\n/**\n * Reducer that handles the app-router state updates.\n */\nfunction clientReducer(\n  state: ReadonlyReducerState,\n  action: ReducerActions\n): ReducerState {\n  switch (action.type) {\n    case ACTION_NAVIGATE: {\n      return navigateReducer(state, action)\n    }\n    case ACTION_SERVER_PATCH: {\n      return serverPatchReducer(state, action)\n    }\n    case ACTION_RESTORE: {\n      return restoreReducer(state, action)\n    }\n    case ACTION_REFRESH: {\n      return refreshReducer(state, action)\n    }\n    case ACTION_HMR_REFRESH: {\n      return hmrRefreshReducer(state, action)\n    }\n    case ACTION_PREFETCH: {\n      return prefetchReducer(state, action)\n    }\n    case ACTION_SERVER_ACTION: {\n      return serverActionReducer(state, action)\n    }\n    // This case should never be hit as dispatch is strongly typed.\n    default:\n      throw new Error('Unknown action')\n  }\n}\n\nfunction serverReducer(\n  state: ReadonlyReducerState,\n  _action: ReducerActions\n): ReducerState {\n  return state\n}\n\n// we don't run the client reducer on the server, so we use a noop function for better tree shaking\nexport const reducer =\n  typeof window === 'undefined' ? serverReducer : clientReducer\n","export const createRenderParamsFromClient =\n  process.env.NODE_ENV === 'development'\n    ? (require('./params.browser.dev') as typeof import('./params.browser.dev'))\n        .createRenderParamsFromClient\n    : (\n        require('./params.browser.prod') as typeof import('./params.browser.prod')\n      ).createRenderParamsFromClient\n","import type { FlightRouterState } from '../../../../server/app-render/types'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { DEFAULT_SEGMENT_KEY } from '../../../../shared/lib/segment'\nimport { createRouterCacheKey } from '../create-router-cache-key'\n\nexport function findHeadInCache(\n  cache: CacheNode,\n  parallelRoutes: FlightRouterState[1]\n): [CacheNode, string] | null {\n  return findHeadInCacheImpl(cache, parallelRoutes, '')\n}\n\nfunction findHeadInCacheImpl(\n  cache: CacheNode,\n  parallelRoutes: FlightRouterState[1],\n  keyPrefix: string\n): [CacheNode, string] | null {\n  const isLastItem = Object.keys(parallelRoutes).length === 0\n  if (isLastItem) {\n    // Returns the entire Cache Node of the segment whose head we will render.\n    return [cache, keyPrefix]\n  }\n\n  // First try the 'children' parallel route if it exists\n  // when starting from the \"root\", this corresponds with the main page component\n  const parallelRoutesKeys = Object.keys(parallelRoutes).filter(\n    (key) => key !== 'children'\n  )\n\n  // if we are at the root, we need to check the children slot first\n  if ('children' in parallelRoutes) {\n    parallelRoutesKeys.unshift('children')\n  }\n\n  for (const key of parallelRoutesKeys) {\n    const [segment, childParallelRoutes] = parallelRoutes[key]\n    // If the parallel is not matched and using the default segment,\n    // skip searching the head from it.\n    if (segment === DEFAULT_SEGMENT_KEY) {\n      continue\n    }\n    const childSegmentMap = cache.parallelRoutes.get(key)\n    if (!childSegmentMap) {\n      continue\n    }\n\n    const cacheKey = createRouterCacheKey(segment)\n\n    const cacheNode = childSegmentMap.get(cacheKey)\n    if (!cacheNode) {\n      continue\n    }\n\n    const item = findHeadInCacheImpl(\n      cacheNode,\n      childParallelRoutes,\n      keyPrefix + '/' + cacheKey\n    )\n    if (item) {\n      return item\n    }\n  }\n\n  return null\n}\n","'use client'\n\nimport React, { type JSX } from 'react'\nimport { useUntrackedPathname } from './navigation-untracked'\nimport { isNextRouterError } from './is-next-router-error'\nimport { handleHardNavError } from './nav-failure-handler'\nimport { HandleISRError } from './handle-isr-error'\n\nexport type ErrorComponent = React.ComponentType<{\n  error: Error\n  // global-error, there's no `reset` function;\n  // regular error boundary, there's a `reset` function.\n  reset?: () => void\n}>\n\nexport interface ErrorBoundaryProps {\n  children?: React.ReactNode\n  errorComponent: ErrorComponent | undefined\n  errorStyles?: React.ReactNode | undefined\n  errorScripts?: React.ReactNode | undefined\n}\n\ninterface ErrorBoundaryHandlerProps extends ErrorBoundaryProps {\n  pathname: string | null\n  errorComponent: ErrorComponent\n}\n\ninterface ErrorBoundaryHandlerState {\n  error: Error | null\n  previousPathname: string | null\n}\n\nexport class ErrorBoundaryHandler extends React.Component<\n  ErrorBoundaryHandlerProps,\n  ErrorBoundaryHandlerState\n> {\n  constructor(props: ErrorBoundaryHandlerProps) {\n    super(props)\n    this.state = { error: null, previousPathname: this.props.pathname }\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    if (isNextRouterError(error)) {\n      // Re-throw if an expected internal Next.js router error occurs\n      // this means it should be handled by a different boundary (such as a NotFound boundary in a parent segment)\n      throw error\n    }\n\n    return { error }\n  }\n\n  static getDerivedStateFromProps(\n    props: ErrorBoundaryHandlerProps,\n    state: ErrorBoundaryHandlerState\n  ): ErrorBoundaryHandlerState | null {\n    const { error } = state\n\n    // if we encounter an error while\n    // a navigation is pending we shouldn't render\n    // the error boundary and instead should fallback\n    // to a hard navigation to attempt recovering\n    if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n      if (error && handleHardNavError(error)) {\n        // clear error so we don't render anything\n        return {\n          error: null,\n          previousPathname: props.pathname,\n        }\n      }\n    }\n\n    /**\n     * Handles reset of the error boundary when a navigation happens.\n     * Ensures the error boundary does not stay enabled when navigating to a new page.\n     * Approach of setState in render is safe as it checks the previous pathname and then overrides\n     * it as outlined in https://react.dev/reference/react/useState#storing-information-from-previous-renders\n     */\n    if (props.pathname !== state.previousPathname && state.error) {\n      return {\n        error: null,\n        previousPathname: props.pathname,\n      }\n    }\n    return {\n      error: state.error,\n      previousPathname: props.pathname,\n    }\n  }\n\n  reset = () => {\n    this.setState({ error: null })\n  }\n\n  // Explicit type is needed to avoid the generated `.d.ts` having a wide return type that could be specific to the `@types/react` version.\n  render(): React.ReactNode {\n    if (this.state.error) {\n      return (\n        <>\n          <HandleISRError error={this.state.error} />\n          {this.props.errorStyles}\n          {this.props.errorScripts}\n          <this.props.errorComponent\n            error={this.state.error}\n            reset={this.reset}\n          />\n        </>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\n/**\n * Handles errors through `getDerivedStateFromError`.\n * Renders the provided error component and provides a way to `reset` the error boundary state.\n */\n\n/**\n * Renders error boundary with the provided \"errorComponent\" property as the fallback.\n * If no \"errorComponent\" property is provided it renders the children without an error boundary.\n */\nexport function ErrorBoundary({\n  errorComponent,\n  errorStyles,\n  errorScripts,\n  children,\n}: ErrorBoundaryProps & {\n  children: React.ReactNode\n}): JSX.Element {\n  // When we're rendering the missing params shell, this will return null. This\n  // is because we won't be rendering any not found boundaries or error\n  // boundaries for the missing params shell. When this runs on the client\n  // (where these errors can occur), we will get the correct pathname.\n  const pathname = useUntrackedPathname()\n  if (errorComponent) {\n    return (\n      <ErrorBoundaryHandler\n        pathname={pathname}\n        errorComponent={errorComponent}\n        errorStyles={errorStyles}\n        errorScripts={errorScripts}\n      >\n        {children}\n      </ErrorBoundaryHandler>\n    )\n  }\n\n  return <>{children}</>\n}\n","function _class_private_field_loose_base(receiver, privateKey) {\n    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n        throw new TypeError(\"attempted to use private field on non-instance\");\n    }\n\n    return receiver;\n}\nexport { _class_private_field_loose_base as _ };\n","/**\n * Before starting the Next.js runtime and requiring any module, we need to make\n * sure the following scripts are executed in the correct order:\n * - Polyfills\n * - next/script with `beforeInteractive` strategy\n */\n\nconst version = process.env.__NEXT_VERSION\n\nwindow.next = {\n  version,\n  appDir: true,\n}\n\nfunction loadScriptsInSequence(\n  scripts: [src: string, props: { [prop: string]: any }][],\n  hydrate: () => void\n) {\n  if (!scripts || !scripts.length) {\n    return hydrate()\n  }\n\n  return scripts\n    .reduce((promise, [src, props]) => {\n      return promise.then(() => {\n        return new Promise<void>((resolve, reject) => {\n          const el = document.createElement('script')\n\n          if (props) {\n            for (const key in props) {\n              if (key !== 'children') {\n                el.setAttribute(key, props[key])\n              }\n            }\n          }\n\n          if (src) {\n            el.src = src\n            el.onload = () => resolve()\n            el.onerror = reject\n          } else if (props) {\n            el.innerHTML = props.children\n            setTimeout(resolve)\n          }\n\n          document.head.appendChild(el)\n        })\n      })\n    }, Promise.resolve())\n    .catch((err: Error) => {\n      console.error(err)\n      // Still try to hydrate even if there's an error.\n    })\n    .then(() => {\n      hydrate()\n    })\n}\n\nexport function appBootstrap(hydrate: () => void) {\n  loadScriptsInSequence((self as any).__next_s, () => {\n    // If the static shell is being debugged, skip hydration if the\n    // `__nextppronly` query is present. This is only enabled when the\n    // environment variable `__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING` is\n    // set to `1`. Otherwise the following is optimized out.\n    if (process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1') {\n      const search = new URLSearchParams(window.location.search)\n      if (\n        search.get('__nextppronly') === 'fallback' ||\n        search.get('__nextppronly') === '1'\n      ) {\n        console.warn(\n          `Skipping hydration due to __nextppronly=${search.get('__nextppronly')}`\n        )\n        return\n      }\n    }\n\n    hydrate()\n  })\n}\n","\"use strict\";\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = global.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = global.process) == null ? void 0 : _global_process1.env) === 'object' ? global.process : require('next/dist/compiled/process');\n\n//# sourceMappingURL=process.js.map","import { createHrefFromUrl } from '../create-href-from-url'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type {\n  ServerPatchAction,\n  ReducerState,\n  ReadonlyReducerState,\n  Mutable,\n} from '../router-reducer-types'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { applyFlightData } from '../apply-flight-data'\nimport { handleMutable } from '../handle-mutable'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { createEmptyCacheNode } from '../../app-router'\n\nexport function serverPatchReducer(\n  state: ReadonlyReducerState,\n  action: ServerPatchAction\n): ReducerState {\n  const {\n    serverResponse: { flightData, canonicalUrl: canonicalUrlOverride },\n    navigatedAt,\n  } = action\n\n  const mutable: Mutable = {}\n\n  mutable.preserveCustomHistoryState = false\n\n  // Handle case when navigating to page in `pages` from `app`\n  if (typeof flightData === 'string') {\n    return handleExternalUrl(\n      state,\n      mutable,\n      flightData,\n      state.pushRef.pendingPush\n    )\n  }\n\n  let currentTree = state.tree\n  let currentCache = state.cache\n\n  for (const normalizedFlightData of flightData) {\n    const { segmentPath: flightSegmentPath, tree: treePatch } =\n      normalizedFlightData\n\n    const newTree = applyRouterStatePatchToTree(\n      // TODO-APP: remove ''\n      ['', ...flightSegmentPath],\n      currentTree,\n      treePatch,\n      state.canonicalUrl\n    )\n\n    // `applyRouterStatePatchToTree` returns `null` when it determined that the server response is not applicable to the current tree.\n    // In other words, the server responded with a tree that doesn't match what the client is currently rendering.\n    // This can happen if the server patch action took longer to resolve than a subsequent navigation which would have changed the tree.\n    // Previously this case triggered an MPA navigation but it should be safe to simply discard the server response rather than forcing\n    // the entire page to reload.\n    if (newTree === null) {\n      return state\n    }\n\n    if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n      return handleExternalUrl(\n        state,\n        mutable,\n        state.canonicalUrl,\n        state.pushRef.pendingPush\n      )\n    }\n\n    const canonicalUrlOverrideHref = canonicalUrlOverride\n      ? createHrefFromUrl(canonicalUrlOverride)\n      : undefined\n\n    if (canonicalUrlOverrideHref) {\n      mutable.canonicalUrl = canonicalUrlOverrideHref\n    }\n\n    const cache: CacheNode = createEmptyCacheNode()\n    applyFlightData(navigatedAt, currentCache, cache, normalizedFlightData)\n\n    mutable.patchedTree = newTree\n    mutable.cache = cache\n\n    currentCache = cache\n    currentTree = newTree\n  }\n\n  return handleMutable(state, mutable)\n}\n","'use client'\n\nimport {\n  METADATA_BOUNDARY_NAME,\n  VIEWPORT_BOUNDARY_NAME,\n  OUTLET_BOUNDARY_NAME,\n} from '../../../lib/metadata/metadata-constants'\n\n// We use a namespace object to allow us to recover the name of the function\n// at runtime even when production bundling/minification is used.\nconst NameSpace = {\n  [METADATA_BOUNDARY_NAME]: function ({\n    children,\n  }: {\n    children: React.ReactNode\n  }) {\n    return children\n  },\n  [VIEWPORT_BOUNDARY_NAME]: function ({\n    children,\n  }: {\n    children: React.ReactNode\n  }) {\n    return children\n  },\n  [OUTLET_BOUNDARY_NAME]: function ({\n    children,\n  }: {\n    children: React.ReactNode\n  }) {\n    return children\n  },\n}\n\nexport const MetadataBoundary =\n  // We use slice(0) to trick the bundler into not inlining/minifying the function\n  // so it retains the name inferred from the namespace object\n  NameSpace[METADATA_BOUNDARY_NAME.slice(0) as typeof METADATA_BOUNDARY_NAME]\n\nexport const ViewportBoundary =\n  // We use slice(0) to trick the bundler into not inlining/minifying the function\n  // so it retains the name inferred from the namespace object\n  NameSpace[VIEWPORT_BOUNDARY_NAME.slice(0) as typeof VIEWPORT_BOUNDARY_NAME]\n\nexport const OutletBoundary =\n  // We use slice(0) to trick the bundler into not inlining/minifying the function\n  // so it retains the name inferred from the namespace object\n  NameSpace[OUTLET_BOUNDARY_NAME.slice(0) as typeof OUTLET_BOUNDARY_NAME]\n","import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n/**\n * This function allows you to render the [not-found.js file](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\n * within a route segment as well as inject a tag.\n *\n * `notFound()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a `<meta name=\"robots\" content=\"noindex\" />` meta tag and set the status code to 404.\n * - In a Route Handler or Server Action, it will serve a 404 to the caller.\n *\n * Read more: [Next.js Docs: `notFound`](https://nextjs.org/docs/app/api-reference/functions/not-found)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};404`\n\nexport function notFound(): never {\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n\n  throw error\n}\n","// This module can be shared between both pages router and app router\n\nimport type { HydrationOptions } from 'react-dom/client'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport isError from '../../lib/is-error'\nimport { reportGlobalError } from './report-global-error'\n\nconst recoverableErrors = new WeakSet<Error>()\n\nexport function isRecoverableError(error: Error): boolean {\n  return recoverableErrors.has(error)\n}\n\nexport const onRecoverableError: HydrationOptions['onRecoverableError'] = (\n  error,\n  errorInfo\n) => {\n  // x-ref: https://github.com/facebook/react/pull/28736\n  let cause = isError(error) && 'cause' in error ? error.cause : error\n  // Skip certain custom errors which are not expected to be reported on client\n  if (isBailoutToCSRError(cause)) return\n\n  if (process.env.NODE_ENV !== 'production') {\n    const { decorateDevError } =\n      require('../../next-devtools/userspace/app/errors/stitched-error') as typeof import('../../next-devtools/userspace/app/errors/stitched-error')\n    const causeError = decorateDevError(cause, errorInfo)\n    recoverableErrors.add(causeError)\n    cause = causeError\n  }\n\n  reportGlobalError(cause)\n}\n","import { addBasePath } from './add-base-path'\n\n/**\n * Function to correctly assign location to URL\n *\n * The method will add basePath, and will also correctly add location (including if it is a relative path)\n * @param location Location that should be added to the url\n * @param url Base URL to which the location should be assigned\n */\nexport function assignLocation(location: string, url: URL): URL {\n  if (location.startsWith('.')) {\n    const urlBase = url.origin + url.pathname\n    return new URL(\n      // In order for a relative path to be added to the current url correctly, the current url must end with a slash\n      // new URL('./relative', 'https://example.com/subdir').href -> 'https://example.com/relative'\n      // new URL('./relative', 'https://example.com/subdir/').href -> 'https://example.com/subdir/relative'\n      (urlBase.endsWith('/') ? urlBase : urlBase + '/') + location\n    )\n  }\n\n  return new URL(addBasePath(location), url.href)\n}\n","// This regex contains the bots that we need to do a blocking render for and can't safely stream the response\n// due to how they parse the DOM. For example, they might explicitly check for metadata in the `head` tag, so we can't stream metadata tags after the `head` was sent.\nexport const HTML_LIMITED_BOT_UA_RE =\n  /Mediapartners-Google|Chrome-Lighthouse|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti/i\n","import { useContext } from 'react'\nimport { PathnameContext } from '../../shared/lib/hooks-client-context.shared-runtime'\n\n/**\n * This checks to see if the current render has any unknown route parameters.\n * It's used to trigger a different render path in the error boundary.\n *\n * @returns true if there are any unknown route parameters, false otherwise\n */\nfunction hasFallbackRouteParams() {\n  if (typeof window === 'undefined') {\n    // AsyncLocalStorage should not be included in the client bundle.\n    const { workAsyncStorage } =\n      require('../../server/app-render/work-async-storage.external') as typeof import('../../server/app-render/work-async-storage.external')\n\n    const workStore = workAsyncStorage.getStore()\n    if (!workStore) return false\n\n    const { fallbackRouteParams } = workStore\n    if (!fallbackRouteParams || fallbackRouteParams.size === 0) return false\n\n    return true\n  }\n\n  return false\n}\n\n/**\n * This returns a `null` value if there are any unknown route parameters, and\n * otherwise returns the pathname from the context. This is an alternative to\n * `usePathname` that is used in the error boundary to avoid rendering the\n * error boundary when there are unknown route parameters. This doesn't throw\n * when accessed with unknown route parameters.\n *\n * @returns\n *\n * @internal\n */\nexport function useUntrackedPathname(): string | null {\n  // If there are any unknown route parameters we would typically throw\n  // an error, but this internal method allows us to return a null value instead\n  // for components that do not propagate the pathname to the static shell (like\n  // the error boundary).\n  if (hasFallbackRouteParams()) {\n    return null\n  }\n\n  // This shouldn't cause any issues related to conditional rendering because\n  // the environment will be consistent for the render.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useContext(PathnameContext)\n}\n","'use client'\n\nimport React, { useContext } from 'react'\n\nexport type ServerInsertedHTMLHook = (callbacks: () => React.ReactNode) => void\n\n// Use `React.createContext` to avoid errors from the RSC checks because\n// it can't be imported directly in Server Components:\n//\n//   import { createContext } from 'react'\n//\n// More info: https://github.com/vercel/next.js/pull/40686\nexport const ServerInsertedHTMLContext =\n  React.createContext<ServerInsertedHTMLHook | null>(null as any)\n\nexport function useServerInsertedHTML(callback: () => React.ReactNode): void {\n  const addInsertedServerHTMLCallback = useContext(ServerInsertedHTMLContext)\n  // Should have no effects on client where there's no flush effects provider\n  if (addInsertedServerHTMLCallback) {\n    addInsertedServerHTMLCallback(callback)\n  }\n}\n","export function createHrefFromUrl(\n  url: Pick<URL, 'pathname' | 'search' | 'hash'>,\n  includeHash: boolean = true\n): string {\n  return url.pathname + url.search + (includeHash ? url.hash : '')\n}\n","/**\n * @license React\n * react-server-dom-webpack-client.browser.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar ReactDOM = require(\"react-dom\"),\n  decoderOptions = { stream: !0 };\nfunction resolveClientReference(bundlerConfig, metadata) {\n  if (bundlerConfig) {\n    var moduleExports = bundlerConfig[metadata[0]];\n    if ((bundlerConfig = moduleExports && moduleExports[metadata[2]]))\n      moduleExports = bundlerConfig.name;\n    else {\n      bundlerConfig = moduleExports && moduleExports[\"*\"];\n      if (!bundlerConfig)\n        throw Error(\n          'Could not find the module \"' +\n            metadata[0] +\n            '\" in the React Server Consumer Manifest. This is probably a bug in the React Server Components bundler.'\n        );\n      moduleExports = metadata[2];\n    }\n    return 4 === metadata.length\n      ? [bundlerConfig.id, bundlerConfig.chunks, moduleExports, 1]\n      : [bundlerConfig.id, bundlerConfig.chunks, moduleExports];\n  }\n  return metadata;\n}\nfunction resolveServerReference(bundlerConfig, id) {\n  var name = \"\",\n    resolvedModuleData = bundlerConfig[id];\n  if (resolvedModuleData) name = resolvedModuleData.name;\n  else {\n    var idx = id.lastIndexOf(\"#\");\n    -1 !== idx &&\n      ((name = id.slice(idx + 1)),\n      (resolvedModuleData = bundlerConfig[id.slice(0, idx)]));\n    if (!resolvedModuleData)\n      throw Error(\n        'Could not find the module \"' +\n          id +\n          '\" in the React Server Manifest. This is probably a bug in the React Server Components bundler.'\n      );\n  }\n  return resolvedModuleData.async\n    ? [resolvedModuleData.id, resolvedModuleData.chunks, name, 1]\n    : [resolvedModuleData.id, resolvedModuleData.chunks, name];\n}\nvar chunkCache = new Map();\nfunction requireAsyncModule(id) {\n  var promise = __webpack_require__(id);\n  if (\"function\" !== typeof promise.then || \"fulfilled\" === promise.status)\n    return null;\n  promise.then(\n    function (value) {\n      promise.status = \"fulfilled\";\n      promise.value = value;\n    },\n    function (reason) {\n      promise.status = \"rejected\";\n      promise.reason = reason;\n    }\n  );\n  return promise;\n}\nfunction ignoreReject() {}\nfunction preloadModule(metadata) {\n  for (var chunks = metadata[1], promises = [], i = 0; i < chunks.length; ) {\n    var chunkId = chunks[i++],\n      chunkFilename = chunks[i++],\n      entry = chunkCache.get(chunkId);\n    void 0 === entry\n      ? (chunkMap.set(chunkId, chunkFilename),\n        (chunkFilename = __webpack_chunk_load__(chunkId)),\n        promises.push(chunkFilename),\n        (entry = chunkCache.set.bind(chunkCache, chunkId, null)),\n        chunkFilename.then(entry, ignoreReject),\n        chunkCache.set(chunkId, chunkFilename))\n      : null !== entry && promises.push(entry);\n  }\n  return 4 === metadata.length\n    ? 0 === promises.length\n      ? requireAsyncModule(metadata[0])\n      : Promise.all(promises).then(function () {\n          return requireAsyncModule(metadata[0]);\n        })\n    : 0 < promises.length\n      ? Promise.all(promises)\n      : null;\n}\nfunction requireModule(metadata) {\n  var moduleExports = __webpack_require__(metadata[0]);\n  if (4 === metadata.length && \"function\" === typeof moduleExports.then)\n    if (\"fulfilled\" === moduleExports.status)\n      moduleExports = moduleExports.value;\n    else throw moduleExports.reason;\n  return \"*\" === metadata[2]\n    ? moduleExports\n    : \"\" === metadata[2]\n      ? moduleExports.__esModule\n        ? moduleExports.default\n        : moduleExports\n      : moduleExports[metadata[2]];\n}\nvar chunkMap = new Map(),\n  webpackGetChunkFilename = __webpack_require__.u;\n__webpack_require__.u = function (chunkId) {\n  var flightChunk = chunkMap.get(chunkId);\n  return void 0 !== flightChunk\n    ? flightChunk\n    : webpackGetChunkFilename(chunkId);\n};\nvar ReactDOMSharedInternals =\n    ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n  REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n  REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nfunction getIteratorFn(maybeIterable) {\n  if (null === maybeIterable || \"object\" !== typeof maybeIterable) return null;\n  maybeIterable =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[\"@@iterator\"];\n  return \"function\" === typeof maybeIterable ? maybeIterable : null;\n}\nvar ASYNC_ITERATOR = Symbol.asyncIterator,\n  isArrayImpl = Array.isArray,\n  getPrototypeOf = Object.getPrototypeOf,\n  ObjectPrototype = Object.prototype,\n  knownServerReferences = new WeakMap();\nfunction serializeNumber(number) {\n  return Number.isFinite(number)\n    ? 0 === number && -Infinity === 1 / number\n      ? \"$-0\"\n      : number\n    : Infinity === number\n      ? \"$Infinity\"\n      : -Infinity === number\n        ? \"$-Infinity\"\n        : \"$NaN\";\n}\nfunction processReply(\n  root,\n  formFieldPrefix,\n  temporaryReferences,\n  resolve,\n  reject\n) {\n  function serializeTypedArray(tag, typedArray) {\n    typedArray = new Blob([\n      new Uint8Array(\n        typedArray.buffer,\n        typedArray.byteOffset,\n        typedArray.byteLength\n      )\n    ]);\n    var blobId = nextPartId++;\n    null === formData && (formData = new FormData());\n    formData.append(formFieldPrefix + blobId, typedArray);\n    return \"$\" + tag + blobId.toString(16);\n  }\n  function serializeBinaryReader(reader) {\n    function progress(entry) {\n      entry.done\n        ? ((entry = nextPartId++),\n          data.append(formFieldPrefix + entry, new Blob(buffer)),\n          data.append(\n            formFieldPrefix + streamId,\n            '\"$o' + entry.toString(16) + '\"'\n          ),\n          data.append(formFieldPrefix + streamId, \"C\"),\n          pendingParts--,\n          0 === pendingParts && resolve(data))\n        : (buffer.push(entry.value),\n          reader.read(new Uint8Array(1024)).then(progress, reject));\n    }\n    null === formData && (formData = new FormData());\n    var data = formData;\n    pendingParts++;\n    var streamId = nextPartId++,\n      buffer = [];\n    reader.read(new Uint8Array(1024)).then(progress, reject);\n    return \"$r\" + streamId.toString(16);\n  }\n  function serializeReader(reader) {\n    function progress(entry) {\n      if (entry.done)\n        data.append(formFieldPrefix + streamId, \"C\"),\n          pendingParts--,\n          0 === pendingParts && resolve(data);\n      else\n        try {\n          var partJSON = JSON.stringify(entry.value, resolveToJSON);\n          data.append(formFieldPrefix + streamId, partJSON);\n          reader.read().then(progress, reject);\n        } catch (x) {\n          reject(x);\n        }\n    }\n    null === formData && (formData = new FormData());\n    var data = formData;\n    pendingParts++;\n    var streamId = nextPartId++;\n    reader.read().then(progress, reject);\n    return \"$R\" + streamId.toString(16);\n  }\n  function serializeReadableStream(stream) {\n    try {\n      var binaryReader = stream.getReader({ mode: \"byob\" });\n    } catch (x) {\n      return serializeReader(stream.getReader());\n    }\n    return serializeBinaryReader(binaryReader);\n  }\n  function serializeAsyncIterable(iterable, iterator) {\n    function progress(entry) {\n      if (entry.done) {\n        if (void 0 === entry.value)\n          data.append(formFieldPrefix + streamId, \"C\");\n        else\n          try {\n            var partJSON = JSON.stringify(entry.value, resolveToJSON);\n            data.append(formFieldPrefix + streamId, \"C\" + partJSON);\n          } catch (x) {\n            reject(x);\n            return;\n          }\n        pendingParts--;\n        0 === pendingParts && resolve(data);\n      } else\n        try {\n          var partJSON$21 = JSON.stringify(entry.value, resolveToJSON);\n          data.append(formFieldPrefix + streamId, partJSON$21);\n          iterator.next().then(progress, reject);\n        } catch (x$22) {\n          reject(x$22);\n        }\n    }\n    null === formData && (formData = new FormData());\n    var data = formData;\n    pendingParts++;\n    var streamId = nextPartId++;\n    iterable = iterable === iterator;\n    iterator.next().then(progress, reject);\n    return \"$\" + (iterable ? \"x\" : \"X\") + streamId.toString(16);\n  }\n  function resolveToJSON(key, value) {\n    if (null === value) return null;\n    if (\"object\" === typeof value) {\n      switch (value.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          if (void 0 !== temporaryReferences && -1 === key.indexOf(\":\")) {\n            var parentReference = writtenObjects.get(this);\n            if (void 0 !== parentReference)\n              return (\n                temporaryReferences.set(parentReference + \":\" + key, value),\n                \"$T\"\n              );\n          }\n          throw Error(\n            \"React Element cannot be passed to Server Functions from the Client without a temporary reference set. Pass a TemporaryReferenceSet to the options.\"\n          );\n        case REACT_LAZY_TYPE:\n          parentReference = value._payload;\n          var init = value._init;\n          null === formData && (formData = new FormData());\n          pendingParts++;\n          try {\n            var resolvedModel = init(parentReference),\n              lazyId = nextPartId++,\n              partJSON = serializeModel(resolvedModel, lazyId);\n            formData.append(formFieldPrefix + lazyId, partJSON);\n            return \"$\" + lazyId.toString(16);\n          } catch (x) {\n            if (\n              \"object\" === typeof x &&\n              null !== x &&\n              \"function\" === typeof x.then\n            ) {\n              pendingParts++;\n              var lazyId$23 = nextPartId++;\n              parentReference = function () {\n                try {\n                  var partJSON$24 = serializeModel(value, lazyId$23),\n                    data$25 = formData;\n                  data$25.append(formFieldPrefix + lazyId$23, partJSON$24);\n                  pendingParts--;\n                  0 === pendingParts && resolve(data$25);\n                } catch (reason) {\n                  reject(reason);\n                }\n              };\n              x.then(parentReference, parentReference);\n              return \"$\" + lazyId$23.toString(16);\n            }\n            reject(x);\n            return null;\n          } finally {\n            pendingParts--;\n          }\n      }\n      if (\"function\" === typeof value.then) {\n        null === formData && (formData = new FormData());\n        pendingParts++;\n        var promiseId = nextPartId++;\n        value.then(function (partValue) {\n          try {\n            var partJSON$27 = serializeModel(partValue, promiseId);\n            partValue = formData;\n            partValue.append(formFieldPrefix + promiseId, partJSON$27);\n            pendingParts--;\n            0 === pendingParts && resolve(partValue);\n          } catch (reason) {\n            reject(reason);\n          }\n        }, reject);\n        return \"$@\" + promiseId.toString(16);\n      }\n      parentReference = writtenObjects.get(value);\n      if (void 0 !== parentReference)\n        if (modelRoot === value) modelRoot = null;\n        else return parentReference;\n      else\n        -1 === key.indexOf(\":\") &&\n          ((parentReference = writtenObjects.get(this)),\n          void 0 !== parentReference &&\n            ((key = parentReference + \":\" + key),\n            writtenObjects.set(value, key),\n            void 0 !== temporaryReferences &&\n              temporaryReferences.set(key, value)));\n      if (isArrayImpl(value)) return value;\n      if (value instanceof FormData) {\n        null === formData && (formData = new FormData());\n        var data$31 = formData;\n        key = nextPartId++;\n        var prefix = formFieldPrefix + key + \"_\";\n        value.forEach(function (originalValue, originalKey) {\n          data$31.append(prefix + originalKey, originalValue);\n        });\n        return \"$K\" + key.toString(16);\n      }\n      if (value instanceof Map)\n        return (\n          (key = nextPartId++),\n          (parentReference = serializeModel(Array.from(value), key)),\n          null === formData && (formData = new FormData()),\n          formData.append(formFieldPrefix + key, parentReference),\n          \"$Q\" + key.toString(16)\n        );\n      if (value instanceof Set)\n        return (\n          (key = nextPartId++),\n          (parentReference = serializeModel(Array.from(value), key)),\n          null === formData && (formData = new FormData()),\n          formData.append(formFieldPrefix + key, parentReference),\n          \"$W\" + key.toString(16)\n        );\n      if (value instanceof ArrayBuffer)\n        return (\n          (key = new Blob([value])),\n          (parentReference = nextPartId++),\n          null === formData && (formData = new FormData()),\n          formData.append(formFieldPrefix + parentReference, key),\n          \"$A\" + parentReference.toString(16)\n        );\n      if (value instanceof Int8Array) return serializeTypedArray(\"O\", value);\n      if (value instanceof Uint8Array) return serializeTypedArray(\"o\", value);\n      if (value instanceof Uint8ClampedArray)\n        return serializeTypedArray(\"U\", value);\n      if (value instanceof Int16Array) return serializeTypedArray(\"S\", value);\n      if (value instanceof Uint16Array) return serializeTypedArray(\"s\", value);\n      if (value instanceof Int32Array) return serializeTypedArray(\"L\", value);\n      if (value instanceof Uint32Array) return serializeTypedArray(\"l\", value);\n      if (value instanceof Float32Array) return serializeTypedArray(\"G\", value);\n      if (value instanceof Float64Array) return serializeTypedArray(\"g\", value);\n      if (value instanceof BigInt64Array)\n        return serializeTypedArray(\"M\", value);\n      if (value instanceof BigUint64Array)\n        return serializeTypedArray(\"m\", value);\n      if (value instanceof DataView) return serializeTypedArray(\"V\", value);\n      if (\"function\" === typeof Blob && value instanceof Blob)\n        return (\n          null === formData && (formData = new FormData()),\n          (key = nextPartId++),\n          formData.append(formFieldPrefix + key, value),\n          \"$B\" + key.toString(16)\n        );\n      if ((key = getIteratorFn(value)))\n        return (\n          (parentReference = key.call(value)),\n          parentReference === value\n            ? ((key = nextPartId++),\n              (parentReference = serializeModel(\n                Array.from(parentReference),\n                key\n              )),\n              null === formData && (formData = new FormData()),\n              formData.append(formFieldPrefix + key, parentReference),\n              \"$i\" + key.toString(16))\n            : Array.from(parentReference)\n        );\n      if (\n        \"function\" === typeof ReadableStream &&\n        value instanceof ReadableStream\n      )\n        return serializeReadableStream(value);\n      key = value[ASYNC_ITERATOR];\n      if (\"function\" === typeof key)\n        return serializeAsyncIterable(value, key.call(value));\n      key = getPrototypeOf(value);\n      if (\n        key !== ObjectPrototype &&\n        (null === key || null !== getPrototypeOf(key))\n      ) {\n        if (void 0 === temporaryReferences)\n          throw Error(\n            \"Only plain objects, and a few built-ins, can be passed to Server Functions. Classes or null prototypes are not supported.\"\n          );\n        return \"$T\";\n      }\n      return value;\n    }\n    if (\"string\" === typeof value) {\n      if (\"Z\" === value[value.length - 1] && this[key] instanceof Date)\n        return \"$D\" + value;\n      key = \"$\" === value[0] ? \"$\" + value : value;\n      return key;\n    }\n    if (\"boolean\" === typeof value) return value;\n    if (\"number\" === typeof value) return serializeNumber(value);\n    if (\"undefined\" === typeof value) return \"$undefined\";\n    if (\"function\" === typeof value) {\n      parentReference = knownServerReferences.get(value);\n      if (void 0 !== parentReference)\n        return (\n          (key = JSON.stringify(\n            { id: parentReference.id, bound: parentReference.bound },\n            resolveToJSON\n          )),\n          null === formData && (formData = new FormData()),\n          (parentReference = nextPartId++),\n          formData.set(formFieldPrefix + parentReference, key),\n          \"$F\" + parentReference.toString(16)\n        );\n      if (\n        void 0 !== temporaryReferences &&\n        -1 === key.indexOf(\":\") &&\n        ((parentReference = writtenObjects.get(this)),\n        void 0 !== parentReference)\n      )\n        return (\n          temporaryReferences.set(parentReference + \":\" + key, value), \"$T\"\n        );\n      throw Error(\n        \"Client Functions cannot be passed directly to Server Functions. Only Functions passed from the Server can be passed back again.\"\n      );\n    }\n    if (\"symbol\" === typeof value) {\n      if (\n        void 0 !== temporaryReferences &&\n        -1 === key.indexOf(\":\") &&\n        ((parentReference = writtenObjects.get(this)),\n        void 0 !== parentReference)\n      )\n        return (\n          temporaryReferences.set(parentReference + \":\" + key, value), \"$T\"\n        );\n      throw Error(\n        \"Symbols cannot be passed to a Server Function without a temporary reference set. Pass a TemporaryReferenceSet to the options.\"\n      );\n    }\n    if (\"bigint\" === typeof value) return \"$n\" + value.toString(10);\n    throw Error(\n      \"Type \" +\n        typeof value +\n        \" is not supported as an argument to a Server Function.\"\n    );\n  }\n  function serializeModel(model, id) {\n    \"object\" === typeof model &&\n      null !== model &&\n      ((id = \"$\" + id.toString(16)),\n      writtenObjects.set(model, id),\n      void 0 !== temporaryReferences && temporaryReferences.set(id, model));\n    modelRoot = model;\n    return JSON.stringify(model, resolveToJSON);\n  }\n  var nextPartId = 1,\n    pendingParts = 0,\n    formData = null,\n    writtenObjects = new WeakMap(),\n    modelRoot = root,\n    json = serializeModel(root, 0);\n  null === formData\n    ? resolve(json)\n    : (formData.set(formFieldPrefix + \"0\", json),\n      0 === pendingParts && resolve(formData));\n  return function () {\n    0 < pendingParts &&\n      ((pendingParts = 0),\n      null === formData ? resolve(json) : resolve(formData));\n  };\n}\nfunction registerBoundServerReference(reference, id, bound) {\n  knownServerReferences.has(reference) ||\n    knownServerReferences.set(reference, {\n      id: id,\n      originalBind: reference.bind,\n      bound: bound\n    });\n}\nfunction createBoundServerReference(metaData, callServer) {\n  function action() {\n    var args = Array.prototype.slice.call(arguments);\n    return bound\n      ? \"fulfilled\" === bound.status\n        ? callServer(id, bound.value.concat(args))\n        : Promise.resolve(bound).then(function (boundArgs) {\n            return callServer(id, boundArgs.concat(args));\n          })\n      : callServer(id, args);\n  }\n  var id = metaData.id,\n    bound = metaData.bound;\n  registerBoundServerReference(action, id, bound);\n  return action;\n}\nfunction ReactPromise(status, value, reason) {\n  this.status = status;\n  this.value = value;\n  this.reason = reason;\n}\nReactPromise.prototype = Object.create(Promise.prototype);\nReactPromise.prototype.then = function (resolve, reject) {\n  switch (this.status) {\n    case \"resolved_model\":\n      initializeModelChunk(this);\n      break;\n    case \"resolved_module\":\n      initializeModuleChunk(this);\n  }\n  switch (this.status) {\n    case \"fulfilled\":\n      \"function\" === typeof resolve && resolve(this.value);\n      break;\n    case \"pending\":\n    case \"blocked\":\n      \"function\" === typeof resolve &&\n        (null === this.value && (this.value = []), this.value.push(resolve));\n      \"function\" === typeof reject &&\n        (null === this.reason && (this.reason = []), this.reason.push(reject));\n      break;\n    case \"halted\":\n      break;\n    default:\n      \"function\" === typeof reject && reject(this.reason);\n  }\n};\nfunction readChunk(chunk) {\n  switch (chunk.status) {\n    case \"resolved_model\":\n      initializeModelChunk(chunk);\n      break;\n    case \"resolved_module\":\n      initializeModuleChunk(chunk);\n  }\n  switch (chunk.status) {\n    case \"fulfilled\":\n      return chunk.value;\n    case \"pending\":\n    case \"blocked\":\n    case \"halted\":\n      throw chunk;\n    default:\n      throw chunk.reason;\n  }\n}\nfunction wakeChunk(listeners, value) {\n  for (var i = 0; i < listeners.length; i++) {\n    var listener = listeners[i];\n    \"function\" === typeof listener\n      ? listener(value)\n      : fulfillReference(listener, value);\n  }\n}\nfunction rejectChunk(listeners, error) {\n  for (var i = 0; i < listeners.length; i++) {\n    var listener = listeners[i];\n    \"function\" === typeof listener\n      ? listener(error)\n      : rejectReference(listener, error);\n  }\n}\nfunction resolveBlockedCycle(resolvedChunk, reference) {\n  var referencedChunk = reference.handler.chunk;\n  if (null === referencedChunk) return null;\n  if (referencedChunk === resolvedChunk) return reference.handler;\n  reference = referencedChunk.value;\n  if (null !== reference)\n    for (\n      referencedChunk = 0;\n      referencedChunk < reference.length;\n      referencedChunk++\n    ) {\n      var listener = reference[referencedChunk];\n      if (\n        \"function\" !== typeof listener &&\n        ((listener = resolveBlockedCycle(resolvedChunk, listener)),\n        null !== listener)\n      )\n        return listener;\n    }\n  return null;\n}\nfunction wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners) {\n  switch (chunk.status) {\n    case \"fulfilled\":\n      wakeChunk(resolveListeners, chunk.value);\n      break;\n    case \"blocked\":\n      for (var i = 0; i < resolveListeners.length; i++) {\n        var listener = resolveListeners[i];\n        if (\"function\" !== typeof listener) {\n          var cyclicHandler = resolveBlockedCycle(chunk, listener);\n          null !== cyclicHandler &&\n            (fulfillReference(listener, cyclicHandler.value),\n            resolveListeners.splice(i, 1),\n            i--,\n            null !== rejectListeners &&\n              ((listener = rejectListeners.indexOf(listener)),\n              -1 !== listener && rejectListeners.splice(listener, 1)));\n        }\n      }\n    case \"pending\":\n      if (chunk.value)\n        for (i = 0; i < resolveListeners.length; i++)\n          chunk.value.push(resolveListeners[i]);\n      else chunk.value = resolveListeners;\n      if (chunk.reason) {\n        if (rejectListeners)\n          for (\n            resolveListeners = 0;\n            resolveListeners < rejectListeners.length;\n            resolveListeners++\n          )\n            chunk.reason.push(rejectListeners[resolveListeners]);\n      } else chunk.reason = rejectListeners;\n      break;\n    case \"rejected\":\n      rejectListeners && rejectChunk(rejectListeners, chunk.reason);\n  }\n}\nfunction triggerErrorOnChunk(response, chunk, error) {\n  \"pending\" !== chunk.status && \"blocked\" !== chunk.status\n    ? chunk.reason.error(error)\n    : ((response = chunk.reason),\n      (chunk.status = \"rejected\"),\n      (chunk.reason = error),\n      null !== response && rejectChunk(response, error));\n}\nfunction createResolvedIteratorResultChunk(response, value, done) {\n  return new ReactPromise(\n    \"resolved_model\",\n    (done ? '{\"done\":true,\"value\":' : '{\"done\":false,\"value\":') + value + \"}\",\n    response\n  );\n}\nfunction resolveIteratorResultChunk(response, chunk, value, done) {\n  resolveModelChunk(\n    response,\n    chunk,\n    (done ? '{\"done\":true,\"value\":' : '{\"done\":false,\"value\":') + value + \"}\"\n  );\n}\nfunction resolveModelChunk(response, chunk, value) {\n  if (\"pending\" !== chunk.status) chunk.reason.enqueueModel(value);\n  else {\n    var resolveListeners = chunk.value,\n      rejectListeners = chunk.reason;\n    chunk.status = \"resolved_model\";\n    chunk.value = value;\n    chunk.reason = response;\n    null !== resolveListeners &&\n      (initializeModelChunk(chunk),\n      wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners));\n  }\n}\nfunction resolveModuleChunk(response, chunk, value) {\n  if (\"pending\" === chunk.status || \"blocked\" === chunk.status) {\n    response = chunk.value;\n    var rejectListeners = chunk.reason;\n    chunk.status = \"resolved_module\";\n    chunk.value = value;\n    null !== response &&\n      (initializeModuleChunk(chunk),\n      wakeChunkIfInitialized(chunk, response, rejectListeners));\n  }\n}\nvar initializingHandler = null;\nfunction initializeModelChunk(chunk) {\n  var prevHandler = initializingHandler;\n  initializingHandler = null;\n  var resolvedModel = chunk.value,\n    response = chunk.reason;\n  chunk.status = \"blocked\";\n  chunk.value = null;\n  chunk.reason = null;\n  try {\n    var value = JSON.parse(resolvedModel, response._fromJSON),\n      resolveListeners = chunk.value;\n    null !== resolveListeners &&\n      ((chunk.value = null),\n      (chunk.reason = null),\n      wakeChunk(resolveListeners, value));\n    if (null !== initializingHandler) {\n      if (initializingHandler.errored) throw initializingHandler.value;\n      if (0 < initializingHandler.deps) {\n        initializingHandler.value = value;\n        initializingHandler.chunk = chunk;\n        return;\n      }\n    }\n    chunk.status = \"fulfilled\";\n    chunk.value = value;\n  } catch (error) {\n    (chunk.status = \"rejected\"), (chunk.reason = error);\n  } finally {\n    initializingHandler = prevHandler;\n  }\n}\nfunction initializeModuleChunk(chunk) {\n  try {\n    var value = requireModule(chunk.value);\n    chunk.status = \"fulfilled\";\n    chunk.value = value;\n  } catch (error) {\n    (chunk.status = \"rejected\"), (chunk.reason = error);\n  }\n}\nfunction reportGlobalError(weakResponse, error) {\n  weakResponse._closed = !0;\n  weakResponse._closedReason = error;\n  weakResponse._chunks.forEach(function (chunk) {\n    \"pending\" === chunk.status &&\n      triggerErrorOnChunk(weakResponse, chunk, error);\n  });\n}\nfunction createLazyChunkWrapper(chunk) {\n  return { $$typeof: REACT_LAZY_TYPE, _payload: chunk, _init: readChunk };\n}\nfunction getChunk(response, id) {\n  var chunks = response._chunks,\n    chunk = chunks.get(id);\n  chunk ||\n    ((chunk = response._closed\n      ? new ReactPromise(\"rejected\", null, response._closedReason)\n      : new ReactPromise(\"pending\", null, null)),\n    chunks.set(id, chunk));\n  return chunk;\n}\nfunction fulfillReference(reference, value) {\n  for (\n    var response = reference.response,\n      handler = reference.handler,\n      parentObject = reference.parentObject,\n      key = reference.key,\n      map = reference.map,\n      path = reference.path,\n      i = 1;\n    i < path.length;\n    i++\n  ) {\n    for (; value.$$typeof === REACT_LAZY_TYPE; )\n      if (((value = value._payload), value === handler.chunk))\n        value = handler.value;\n      else {\n        switch (value.status) {\n          case \"resolved_model\":\n            initializeModelChunk(value);\n            break;\n          case \"resolved_module\":\n            initializeModuleChunk(value);\n        }\n        switch (value.status) {\n          case \"fulfilled\":\n            value = value.value;\n            continue;\n          case \"blocked\":\n            var cyclicHandler = resolveBlockedCycle(value, reference);\n            if (null !== cyclicHandler) {\n              value = cyclicHandler.value;\n              continue;\n            }\n          case \"pending\":\n            path.splice(0, i - 1);\n            null === value.value\n              ? (value.value = [reference])\n              : value.value.push(reference);\n            null === value.reason\n              ? (value.reason = [reference])\n              : value.reason.push(reference);\n            return;\n          case \"halted\":\n            return;\n          default:\n            rejectReference(reference, value.reason);\n            return;\n        }\n      }\n    value = value[path[i]];\n  }\n  reference = map(response, value, parentObject, key);\n  parentObject[key] = reference;\n  \"\" === key && null === handler.value && (handler.value = reference);\n  if (\n    parentObject[0] === REACT_ELEMENT_TYPE &&\n    \"object\" === typeof handler.value &&\n    null !== handler.value &&\n    handler.value.$$typeof === REACT_ELEMENT_TYPE\n  )\n    switch (((parentObject = handler.value), key)) {\n      case \"3\":\n        parentObject.props = reference;\n    }\n  handler.deps--;\n  0 === handler.deps &&\n    ((key = handler.chunk),\n    null !== key &&\n      \"blocked\" === key.status &&\n      ((parentObject = key.value),\n      (key.status = \"fulfilled\"),\n      (key.value = handler.value),\n      null !== parentObject && wakeChunk(parentObject, handler.value)));\n}\nfunction rejectReference(reference, error) {\n  var handler = reference.handler;\n  reference = reference.response;\n  handler.errored ||\n    ((handler.errored = !0),\n    (handler.value = error),\n    (handler = handler.chunk),\n    null !== handler &&\n      \"blocked\" === handler.status &&\n      triggerErrorOnChunk(reference, handler, error));\n}\nfunction waitForReference(\n  referencedChunk,\n  parentObject,\n  key,\n  response,\n  map,\n  path\n) {\n  if (initializingHandler) {\n    var handler = initializingHandler;\n    handler.deps++;\n  } else\n    handler = initializingHandler = {\n      parent: null,\n      chunk: null,\n      value: null,\n      deps: 1,\n      errored: !1\n    };\n  parentObject = {\n    response: response,\n    handler: handler,\n    parentObject: parentObject,\n    key: key,\n    map: map,\n    path: path\n  };\n  null === referencedChunk.value\n    ? (referencedChunk.value = [parentObject])\n    : referencedChunk.value.push(parentObject);\n  null === referencedChunk.reason\n    ? (referencedChunk.reason = [parentObject])\n    : referencedChunk.reason.push(parentObject);\n  return null;\n}\nfunction loadServerReference(response, metaData, parentObject, key) {\n  if (!response._serverReferenceConfig)\n    return createBoundServerReference(metaData, response._callServer);\n  var serverReference = resolveServerReference(\n      response._serverReferenceConfig,\n      metaData.id\n    ),\n    promise = preloadModule(serverReference);\n  if (promise)\n    metaData.bound && (promise = Promise.all([promise, metaData.bound]));\n  else if (metaData.bound) promise = Promise.resolve(metaData.bound);\n  else\n    return (\n      (promise = requireModule(serverReference)),\n      registerBoundServerReference(promise, metaData.id, metaData.bound),\n      promise\n    );\n  if (initializingHandler) {\n    var handler = initializingHandler;\n    handler.deps++;\n  } else\n    handler = initializingHandler = {\n      parent: null,\n      chunk: null,\n      value: null,\n      deps: 1,\n      errored: !1\n    };\n  promise.then(\n    function () {\n      var resolvedValue = requireModule(serverReference);\n      if (metaData.bound) {\n        var boundArgs = metaData.bound.value.slice(0);\n        boundArgs.unshift(null);\n        resolvedValue = resolvedValue.bind.apply(resolvedValue, boundArgs);\n      }\n      registerBoundServerReference(resolvedValue, metaData.id, metaData.bound);\n      parentObject[key] = resolvedValue;\n      \"\" === key && null === handler.value && (handler.value = resolvedValue);\n      if (\n        parentObject[0] === REACT_ELEMENT_TYPE &&\n        \"object\" === typeof handler.value &&\n        null !== handler.value &&\n        handler.value.$$typeof === REACT_ELEMENT_TYPE\n      )\n        switch (((boundArgs = handler.value), key)) {\n          case \"3\":\n            boundArgs.props = resolvedValue;\n        }\n      handler.deps--;\n      0 === handler.deps &&\n        ((resolvedValue = handler.chunk),\n        null !== resolvedValue &&\n          \"blocked\" === resolvedValue.status &&\n          ((boundArgs = resolvedValue.value),\n          (resolvedValue.status = \"fulfilled\"),\n          (resolvedValue.value = handler.value),\n          null !== boundArgs && wakeChunk(boundArgs, handler.value)));\n    },\n    function (error) {\n      if (!handler.errored) {\n        handler.errored = !0;\n        handler.value = error;\n        var chunk = handler.chunk;\n        null !== chunk &&\n          \"blocked\" === chunk.status &&\n          triggerErrorOnChunk(response, chunk, error);\n      }\n    }\n  );\n  return null;\n}\nfunction getOutlinedModel(response, reference, parentObject, key, map) {\n  reference = reference.split(\":\");\n  var id = parseInt(reference[0], 16);\n  id = getChunk(response, id);\n  switch (id.status) {\n    case \"resolved_model\":\n      initializeModelChunk(id);\n      break;\n    case \"resolved_module\":\n      initializeModuleChunk(id);\n  }\n  switch (id.status) {\n    case \"fulfilled\":\n      var value = id.value;\n      for (id = 1; id < reference.length; id++) {\n        for (; value.$$typeof === REACT_LAZY_TYPE; ) {\n          value = value._payload;\n          switch (value.status) {\n            case \"resolved_model\":\n              initializeModelChunk(value);\n              break;\n            case \"resolved_module\":\n              initializeModuleChunk(value);\n          }\n          switch (value.status) {\n            case \"fulfilled\":\n              value = value.value;\n              break;\n            case \"blocked\":\n            case \"pending\":\n              return waitForReference(\n                value,\n                parentObject,\n                key,\n                response,\n                map,\n                reference.slice(id - 1)\n              );\n            case \"halted\":\n              return (\n                initializingHandler\n                  ? ((response = initializingHandler), response.deps++)\n                  : (initializingHandler = {\n                      parent: null,\n                      chunk: null,\n                      value: null,\n                      deps: 1,\n                      errored: !1\n                    }),\n                null\n              );\n            default:\n              return (\n                initializingHandler\n                  ? ((initializingHandler.errored = !0),\n                    (initializingHandler.value = value.reason))\n                  : (initializingHandler = {\n                      parent: null,\n                      chunk: null,\n                      value: value.reason,\n                      deps: 0,\n                      errored: !0\n                    }),\n                null\n              );\n          }\n        }\n        value = value[reference[id]];\n      }\n      return map(response, value, parentObject, key);\n    case \"pending\":\n    case \"blocked\":\n      return waitForReference(id, parentObject, key, response, map, reference);\n    case \"halted\":\n      return (\n        initializingHandler\n          ? ((response = initializingHandler), response.deps++)\n          : (initializingHandler = {\n              parent: null,\n              chunk: null,\n              value: null,\n              deps: 1,\n              errored: !1\n            }),\n        null\n      );\n    default:\n      return (\n        initializingHandler\n          ? ((initializingHandler.errored = !0),\n            (initializingHandler.value = id.reason))\n          : (initializingHandler = {\n              parent: null,\n              chunk: null,\n              value: id.reason,\n              deps: 0,\n              errored: !0\n            }),\n        null\n      );\n  }\n}\nfunction createMap(response, model) {\n  return new Map(model);\n}\nfunction createSet(response, model) {\n  return new Set(model);\n}\nfunction createBlob(response, model) {\n  return new Blob(model.slice(1), { type: model[0] });\n}\nfunction createFormData(response, model) {\n  response = new FormData();\n  for (var i = 0; i < model.length; i++)\n    response.append(model[i][0], model[i][1]);\n  return response;\n}\nfunction extractIterator(response, model) {\n  return model[Symbol.iterator]();\n}\nfunction createModel(response, model) {\n  return model;\n}\nfunction parseModelString(response, parentObject, key, value) {\n  if (\"$\" === value[0]) {\n    if (\"$\" === value)\n      return (\n        null !== initializingHandler &&\n          \"0\" === key &&\n          (initializingHandler = {\n            parent: initializingHandler,\n            chunk: null,\n            value: null,\n            deps: 0,\n            errored: !1\n          }),\n        REACT_ELEMENT_TYPE\n      );\n    switch (value[1]) {\n      case \"$\":\n        return value.slice(1);\n      case \"L\":\n        return (\n          (parentObject = parseInt(value.slice(2), 16)),\n          (response = getChunk(response, parentObject)),\n          createLazyChunkWrapper(response)\n        );\n      case \"@\":\n        return (\n          (parentObject = parseInt(value.slice(2), 16)),\n          getChunk(response, parentObject)\n        );\n      case \"S\":\n        return Symbol.for(value.slice(2));\n      case \"F\":\n        return (\n          (value = value.slice(2)),\n          getOutlinedModel(\n            response,\n            value,\n            parentObject,\n            key,\n            loadServerReference\n          )\n        );\n      case \"T\":\n        parentObject = \"$\" + value.slice(2);\n        response = response._tempRefs;\n        if (null == response)\n          throw Error(\n            \"Missing a temporary reference set but the RSC response returned a temporary reference. Pass a temporaryReference option with the set that was used with the reply.\"\n          );\n        return response.get(parentObject);\n      case \"Q\":\n        return (\n          (value = value.slice(2)),\n          getOutlinedModel(response, value, parentObject, key, createMap)\n        );\n      case \"W\":\n        return (\n          (value = value.slice(2)),\n          getOutlinedModel(response, value, parentObject, key, createSet)\n        );\n      case \"B\":\n        return (\n          (value = value.slice(2)),\n          getOutlinedModel(response, value, parentObject, key, createBlob)\n        );\n      case \"K\":\n        return (\n          (value = value.slice(2)),\n          getOutlinedModel(response, value, parentObject, key, createFormData)\n        );\n      case \"Z\":\n        return resolveErrorProd();\n      case \"i\":\n        return (\n          (value = value.slice(2)),\n          getOutlinedModel(response, value, parentObject, key, extractIterator)\n        );\n      case \"I\":\n        return Infinity;\n      case \"-\":\n        return \"$-0\" === value ? -0 : -Infinity;\n      case \"N\":\n        return NaN;\n      case \"u\":\n        return;\n      case \"D\":\n        return new Date(Date.parse(value.slice(2)));\n      case \"n\":\n        return BigInt(value.slice(2));\n      default:\n        return (\n          (value = value.slice(1)),\n          getOutlinedModel(response, value, parentObject, key, createModel)\n        );\n    }\n  }\n  return value;\n}\nfunction missingCall() {\n  throw Error(\n    'Trying to call a function from \"use server\" but the callServer option was not implemented in your router runtime.'\n  );\n}\nfunction ResponseInstance(\n  bundlerConfig,\n  serverReferenceConfig,\n  moduleLoading,\n  callServer,\n  encodeFormAction,\n  nonce,\n  temporaryReferences\n) {\n  var chunks = new Map();\n  this._bundlerConfig = bundlerConfig;\n  this._serverReferenceConfig = serverReferenceConfig;\n  this._moduleLoading = moduleLoading;\n  this._callServer = void 0 !== callServer ? callServer : missingCall;\n  this._encodeFormAction = encodeFormAction;\n  this._nonce = nonce;\n  this._chunks = chunks;\n  this._stringDecoder = new TextDecoder();\n  this._fromJSON = null;\n  this._closed = !1;\n  this._closedReason = null;\n  this._tempRefs = temporaryReferences;\n  this._fromJSON = createFromJSONCallback(this);\n}\nfunction resolveBuffer(response, id, buffer) {\n  response = response._chunks;\n  var chunk = response.get(id);\n  chunk && \"pending\" !== chunk.status\n    ? chunk.reason.enqueueValue(buffer)\n    : response.set(id, new ReactPromise(\"fulfilled\", buffer, null));\n}\nfunction resolveModule(response, id, model) {\n  var chunks = response._chunks,\n    chunk = chunks.get(id);\n  model = JSON.parse(model, response._fromJSON);\n  var clientReference = resolveClientReference(response._bundlerConfig, model);\n  if ((model = preloadModule(clientReference))) {\n    if (chunk) {\n      var blockedChunk = chunk;\n      blockedChunk.status = \"blocked\";\n    } else\n      (blockedChunk = new ReactPromise(\"blocked\", null, null)),\n        chunks.set(id, blockedChunk);\n    model.then(\n      function () {\n        return resolveModuleChunk(response, blockedChunk, clientReference);\n      },\n      function (error) {\n        return triggerErrorOnChunk(response, blockedChunk, error);\n      }\n    );\n  } else\n    chunk\n      ? resolveModuleChunk(response, chunk, clientReference)\n      : chunks.set(\n          id,\n          new ReactPromise(\"resolved_module\", clientReference, null)\n        );\n}\nfunction resolveStream(response, id, stream, controller) {\n  var chunks = response._chunks;\n  response = chunks.get(id);\n  response\n    ? \"pending\" === response.status &&\n      ((id = response.value),\n      (response.status = \"fulfilled\"),\n      (response.value = stream),\n      (response.reason = controller),\n      null !== id && wakeChunk(id, response.value))\n    : chunks.set(id, new ReactPromise(\"fulfilled\", stream, controller));\n}\nfunction startReadableStream(response, id, type) {\n  var controller = null;\n  type = new ReadableStream({\n    type: type,\n    start: function (c) {\n      controller = c;\n    }\n  });\n  var previousBlockedChunk = null;\n  resolveStream(response, id, type, {\n    enqueueValue: function (value) {\n      null === previousBlockedChunk\n        ? controller.enqueue(value)\n        : previousBlockedChunk.then(function () {\n            controller.enqueue(value);\n          });\n    },\n    enqueueModel: function (json) {\n      if (null === previousBlockedChunk) {\n        var chunk = new ReactPromise(\"resolved_model\", json, response);\n        initializeModelChunk(chunk);\n        \"fulfilled\" === chunk.status\n          ? controller.enqueue(chunk.value)\n          : (chunk.then(\n              function (v) {\n                return controller.enqueue(v);\n              },\n              function (e) {\n                return controller.error(e);\n              }\n            ),\n            (previousBlockedChunk = chunk));\n      } else {\n        chunk = previousBlockedChunk;\n        var chunk$52 = new ReactPromise(\"pending\", null, null);\n        chunk$52.then(\n          function (v) {\n            return controller.enqueue(v);\n          },\n          function (e) {\n            return controller.error(e);\n          }\n        );\n        previousBlockedChunk = chunk$52;\n        chunk.then(function () {\n          previousBlockedChunk === chunk$52 && (previousBlockedChunk = null);\n          resolveModelChunk(response, chunk$52, json);\n        });\n      }\n    },\n    close: function () {\n      if (null === previousBlockedChunk) controller.close();\n      else {\n        var blockedChunk = previousBlockedChunk;\n        previousBlockedChunk = null;\n        blockedChunk.then(function () {\n          return controller.close();\n        });\n      }\n    },\n    error: function (error) {\n      if (null === previousBlockedChunk) controller.error(error);\n      else {\n        var blockedChunk = previousBlockedChunk;\n        previousBlockedChunk = null;\n        blockedChunk.then(function () {\n          return controller.error(error);\n        });\n      }\n    }\n  });\n}\nfunction asyncIterator() {\n  return this;\n}\nfunction createIterator(next) {\n  next = { next: next };\n  next[ASYNC_ITERATOR] = asyncIterator;\n  return next;\n}\nfunction startAsyncIterable(response, id, iterator) {\n  var buffer = [],\n    closed = !1,\n    nextWriteIndex = 0,\n    iterable = {};\n  iterable[ASYNC_ITERATOR] = function () {\n    var nextReadIndex = 0;\n    return createIterator(function (arg) {\n      if (void 0 !== arg)\n        throw Error(\n          \"Values cannot be passed to next() of AsyncIterables passed to Client Components.\"\n        );\n      if (nextReadIndex === buffer.length) {\n        if (closed)\n          return new ReactPromise(\n            \"fulfilled\",\n            { done: !0, value: void 0 },\n            null\n          );\n        buffer[nextReadIndex] = new ReactPromise(\"pending\", null, null);\n      }\n      return buffer[nextReadIndex++];\n    });\n  };\n  resolveStream(\n    response,\n    id,\n    iterator ? iterable[ASYNC_ITERATOR]() : iterable,\n    {\n      enqueueValue: function (value) {\n        if (nextWriteIndex === buffer.length)\n          buffer[nextWriteIndex] = new ReactPromise(\n            \"fulfilled\",\n            { done: !1, value: value },\n            null\n          );\n        else {\n          var chunk = buffer[nextWriteIndex],\n            resolveListeners = chunk.value,\n            rejectListeners = chunk.reason;\n          chunk.status = \"fulfilled\";\n          chunk.value = { done: !1, value: value };\n          null !== resolveListeners &&\n            wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);\n        }\n        nextWriteIndex++;\n      },\n      enqueueModel: function (value) {\n        nextWriteIndex === buffer.length\n          ? (buffer[nextWriteIndex] = createResolvedIteratorResultChunk(\n              response,\n              value,\n              !1\n            ))\n          : resolveIteratorResultChunk(\n              response,\n              buffer[nextWriteIndex],\n              value,\n              !1\n            );\n        nextWriteIndex++;\n      },\n      close: function (value) {\n        closed = !0;\n        nextWriteIndex === buffer.length\n          ? (buffer[nextWriteIndex] = createResolvedIteratorResultChunk(\n              response,\n              value,\n              !0\n            ))\n          : resolveIteratorResultChunk(\n              response,\n              buffer[nextWriteIndex],\n              value,\n              !0\n            );\n        for (nextWriteIndex++; nextWriteIndex < buffer.length; )\n          resolveIteratorResultChunk(\n            response,\n            buffer[nextWriteIndex++],\n            '\"$undefined\"',\n            !0\n          );\n      },\n      error: function (error) {\n        closed = !0;\n        for (\n          nextWriteIndex === buffer.length &&\n          (buffer[nextWriteIndex] = new ReactPromise(\"pending\", null, null));\n          nextWriteIndex < buffer.length;\n\n        )\n          triggerErrorOnChunk(response, buffer[nextWriteIndex++], error);\n      }\n    }\n  );\n}\nfunction resolveErrorProd() {\n  var error = Error(\n    \"An error occurred in the Server Components render. The specific message is omitted in production builds to avoid leaking sensitive details. A digest property is included on this error instance which may provide additional details about the nature of the error.\"\n  );\n  error.stack = \"Error: \" + error.message;\n  return error;\n}\nfunction mergeBuffer(buffer, lastChunk) {\n  for (var l = buffer.length, byteLength = lastChunk.length, i = 0; i < l; i++)\n    byteLength += buffer[i].byteLength;\n  byteLength = new Uint8Array(byteLength);\n  for (var i$53 = (i = 0); i$53 < l; i$53++) {\n    var chunk = buffer[i$53];\n    byteLength.set(chunk, i);\n    i += chunk.byteLength;\n  }\n  byteLength.set(lastChunk, i);\n  return byteLength;\n}\nfunction resolveTypedArray(\n  response,\n  id,\n  buffer,\n  lastChunk,\n  constructor,\n  bytesPerElement\n) {\n  buffer =\n    0 === buffer.length && 0 === lastChunk.byteOffset % bytesPerElement\n      ? lastChunk\n      : mergeBuffer(buffer, lastChunk);\n  constructor = new constructor(\n    buffer.buffer,\n    buffer.byteOffset,\n    buffer.byteLength / bytesPerElement\n  );\n  resolveBuffer(response, id, constructor);\n}\nfunction processFullBinaryRow(response, id, tag, buffer, chunk) {\n  switch (tag) {\n    case 65:\n      resolveBuffer(response, id, mergeBuffer(buffer, chunk).buffer);\n      return;\n    case 79:\n      resolveTypedArray(response, id, buffer, chunk, Int8Array, 1);\n      return;\n    case 111:\n      resolveBuffer(\n        response,\n        id,\n        0 === buffer.length ? chunk : mergeBuffer(buffer, chunk)\n      );\n      return;\n    case 85:\n      resolveTypedArray(response, id, buffer, chunk, Uint8ClampedArray, 1);\n      return;\n    case 83:\n      resolveTypedArray(response, id, buffer, chunk, Int16Array, 2);\n      return;\n    case 115:\n      resolveTypedArray(response, id, buffer, chunk, Uint16Array, 2);\n      return;\n    case 76:\n      resolveTypedArray(response, id, buffer, chunk, Int32Array, 4);\n      return;\n    case 108:\n      resolveTypedArray(response, id, buffer, chunk, Uint32Array, 4);\n      return;\n    case 71:\n      resolveTypedArray(response, id, buffer, chunk, Float32Array, 4);\n      return;\n    case 103:\n      resolveTypedArray(response, id, buffer, chunk, Float64Array, 8);\n      return;\n    case 77:\n      resolveTypedArray(response, id, buffer, chunk, BigInt64Array, 8);\n      return;\n    case 109:\n      resolveTypedArray(response, id, buffer, chunk, BigUint64Array, 8);\n      return;\n    case 86:\n      resolveTypedArray(response, id, buffer, chunk, DataView, 1);\n      return;\n  }\n  for (\n    var stringDecoder = response._stringDecoder, row = \"\", i = 0;\n    i < buffer.length;\n    i++\n  )\n    row += stringDecoder.decode(buffer[i], decoderOptions);\n  buffer = row += stringDecoder.decode(chunk);\n  switch (tag) {\n    case 73:\n      resolveModule(response, id, buffer);\n      break;\n    case 72:\n      id = buffer[0];\n      buffer = buffer.slice(1);\n      response = JSON.parse(buffer, response._fromJSON);\n      buffer = ReactDOMSharedInternals.d;\n      switch (id) {\n        case \"D\":\n          buffer.D(response);\n          break;\n        case \"C\":\n          \"string\" === typeof response\n            ? buffer.C(response)\n            : buffer.C(response[0], response[1]);\n          break;\n        case \"L\":\n          id = response[0];\n          tag = response[1];\n          3 === response.length\n            ? buffer.L(id, tag, response[2])\n            : buffer.L(id, tag);\n          break;\n        case \"m\":\n          \"string\" === typeof response\n            ? buffer.m(response)\n            : buffer.m(response[0], response[1]);\n          break;\n        case \"X\":\n          \"string\" === typeof response\n            ? buffer.X(response)\n            : buffer.X(response[0], response[1]);\n          break;\n        case \"S\":\n          \"string\" === typeof response\n            ? buffer.S(response)\n            : buffer.S(\n                response[0],\n                0 === response[1] ? void 0 : response[1],\n                3 === response.length ? response[2] : void 0\n              );\n          break;\n        case \"M\":\n          \"string\" === typeof response\n            ? buffer.M(response)\n            : buffer.M(response[0], response[1]);\n      }\n      break;\n    case 69:\n      tag = JSON.parse(buffer);\n      buffer = resolveErrorProd();\n      buffer.digest = tag.digest;\n      tag = response._chunks;\n      (chunk = tag.get(id))\n        ? triggerErrorOnChunk(response, chunk, buffer)\n        : tag.set(id, new ReactPromise(\"rejected\", null, buffer));\n      break;\n    case 84:\n      response = response._chunks;\n      (tag = response.get(id)) && \"pending\" !== tag.status\n        ? tag.reason.enqueueValue(buffer)\n        : response.set(id, new ReactPromise(\"fulfilled\", buffer, null));\n      break;\n    case 78:\n    case 68:\n    case 74:\n    case 87:\n      throw Error(\n        \"Failed to read a RSC payload created by a development version of React on the server while using a production version on the client. Always use matching versions on the server and the client.\"\n      );\n    case 82:\n      startReadableStream(response, id, void 0);\n      break;\n    case 114:\n      startReadableStream(response, id, \"bytes\");\n      break;\n    case 88:\n      startAsyncIterable(response, id, !1);\n      break;\n    case 120:\n      startAsyncIterable(response, id, !0);\n      break;\n    case 67:\n      (response = response._chunks.get(id)) &&\n        \"fulfilled\" === response.status &&\n        response.reason.close(\"\" === buffer ? '\"$undefined\"' : buffer);\n      break;\n    default:\n      (tag = response._chunks),\n        (chunk = tag.get(id))\n          ? resolveModelChunk(response, chunk, buffer)\n          : tag.set(id, new ReactPromise(\"resolved_model\", buffer, response));\n  }\n}\nfunction createFromJSONCallback(response) {\n  return function (key, value) {\n    if (\"string\" === typeof value)\n      return parseModelString(response, this, key, value);\n    if (\"object\" === typeof value && null !== value) {\n      if (value[0] === REACT_ELEMENT_TYPE) {\n        if (\n          ((key = {\n            $$typeof: REACT_ELEMENT_TYPE,\n            type: value[1],\n            key: value[2],\n            ref: null,\n            props: value[3]\n          }),\n          null !== initializingHandler)\n        )\n          if (\n            ((value = initializingHandler),\n            (initializingHandler = value.parent),\n            value.errored)\n          )\n            (key = new ReactPromise(\"rejected\", null, value.value)),\n              (key = createLazyChunkWrapper(key));\n          else if (0 < value.deps) {\n            var blockedChunk = new ReactPromise(\"blocked\", null, null);\n            value.value = key;\n            value.chunk = blockedChunk;\n            key = createLazyChunkWrapper(blockedChunk);\n          }\n      } else key = value;\n      return key;\n    }\n    return value;\n  };\n}\nfunction createResponseFromOptions(options) {\n  return new ResponseInstance(\n    null,\n    null,\n    null,\n    options && options.callServer ? options.callServer : void 0,\n    void 0,\n    void 0,\n    options && options.temporaryReferences\n      ? options.temporaryReferences\n      : void 0\n  );\n}\nfunction startReadingFromStream(response, stream, isSecondaryStream) {\n  function progress(_ref2) {\n    var value = _ref2.value;\n    if (_ref2.done)\n      isSecondaryStream ||\n        reportGlobalError(response, Error(\"Connection closed.\"));\n    else {\n      var i = 0,\n        rowState = streamState._rowState;\n      _ref2 = streamState._rowID;\n      for (\n        var rowTag = streamState._rowTag,\n          rowLength = streamState._rowLength,\n          buffer = streamState._buffer,\n          chunkLength = value.length;\n        i < chunkLength;\n\n      ) {\n        var lastIdx = -1;\n        switch (rowState) {\n          case 0:\n            lastIdx = value[i++];\n            58 === lastIdx\n              ? (rowState = 1)\n              : (_ref2 =\n                  (_ref2 << 4) | (96 < lastIdx ? lastIdx - 87 : lastIdx - 48));\n            continue;\n          case 1:\n            rowState = value[i];\n            84 === rowState ||\n            65 === rowState ||\n            79 === rowState ||\n            111 === rowState ||\n            85 === rowState ||\n            83 === rowState ||\n            115 === rowState ||\n            76 === rowState ||\n            108 === rowState ||\n            71 === rowState ||\n            103 === rowState ||\n            77 === rowState ||\n            109 === rowState ||\n            86 === rowState\n              ? ((rowTag = rowState), (rowState = 2), i++)\n              : (64 < rowState && 91 > rowState) ||\n                  35 === rowState ||\n                  114 === rowState ||\n                  120 === rowState\n                ? ((rowTag = rowState), (rowState = 3), i++)\n                : ((rowTag = 0), (rowState = 3));\n            continue;\n          case 2:\n            lastIdx = value[i++];\n            44 === lastIdx\n              ? (rowState = 4)\n              : (rowLength =\n                  (rowLength << 4) |\n                  (96 < lastIdx ? lastIdx - 87 : lastIdx - 48));\n            continue;\n          case 3:\n            lastIdx = value.indexOf(10, i);\n            break;\n          case 4:\n            (lastIdx = i + rowLength), lastIdx > value.length && (lastIdx = -1);\n        }\n        var offset = value.byteOffset + i;\n        if (-1 < lastIdx)\n          (rowLength = new Uint8Array(value.buffer, offset, lastIdx - i)),\n            processFullBinaryRow(response, _ref2, rowTag, buffer, rowLength),\n            (i = lastIdx),\n            3 === rowState && i++,\n            (rowLength = _ref2 = rowTag = rowState = 0),\n            (buffer.length = 0);\n        else {\n          value = new Uint8Array(value.buffer, offset, value.byteLength - i);\n          buffer.push(value);\n          rowLength -= value.byteLength;\n          break;\n        }\n      }\n      streamState._rowState = rowState;\n      streamState._rowID = _ref2;\n      streamState._rowTag = rowTag;\n      streamState._rowLength = rowLength;\n      return reader.read().then(progress).catch(error);\n    }\n  }\n  function error(e) {\n    reportGlobalError(response, e);\n  }\n  var streamState = {\n      _rowState: 0,\n      _rowID: 0,\n      _rowTag: 0,\n      _rowLength: 0,\n      _buffer: []\n    },\n    reader = stream.getReader();\n  reader.read().then(progress).catch(error);\n}\nexports.createFromFetch = function (promiseForResponse, options) {\n  var response = createResponseFromOptions(options);\n  promiseForResponse.then(\n    function (r) {\n      startReadingFromStream(response, r.body, !1);\n    },\n    function (e) {\n      reportGlobalError(response, e);\n    }\n  );\n  return getChunk(response, 0);\n};\nexports.createFromReadableStream = function (stream, options) {\n  options = createResponseFromOptions(options);\n  startReadingFromStream(options, stream, !1);\n  return getChunk(options, 0);\n};\nexports.createServerReference = function (id, callServer) {\n  function action() {\n    var args = Array.prototype.slice.call(arguments);\n    return callServer(id, args);\n  }\n  registerBoundServerReference(action, id, null);\n  return action;\n};\nexports.createTemporaryReferenceSet = function () {\n  return new Map();\n};\nexports.encodeReply = function (value, options) {\n  return new Promise(function (resolve, reject) {\n    var abort = processReply(\n      value,\n      \"\",\n      options && options.temporaryReferences\n        ? options.temporaryReferences\n        : void 0,\n      resolve,\n      reject\n    );\n    if (options && options.signal) {\n      var signal = options.signal;\n      if (signal.aborted) abort(signal.reason);\n      else {\n        var listener = function () {\n          abort(signal.reason);\n          signal.removeEventListener(\"abort\", listener);\n        };\n        signal.addEventListener(\"abort\", listener);\n      }\n    }\n  });\n};\nexports.registerServerReference = function (reference, id) {\n  registerBoundServerReference(reference, id, null);\n  return reference;\n};\n","'use client'\n\n// TODO: Explicitly import from client.browser\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { createFromReadableStream as createFromReadableStreamBrowser } from 'react-server-dom-webpack/client'\n\nimport type {\n  FlightRouterState,\n  NavigationFlightResponse,\n} from '../../../server/app-render/types'\n\nimport type { NEXT_ROUTER_SEGMENT_PREFETCH_HEADER } from '../app-router-headers'\nimport {\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_URL,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_ROUTER_STALE_TIME_HEADER,\n} from '../app-router-headers'\nimport { callServer } from '../../app-call-server'\nimport { findSourceMapURL } from '../../app-find-source-map-url'\nimport { PrefetchKind } from './router-reducer-types'\nimport {\n  normalizeFlightData,\n  prepareFlightRouterStateForRequest,\n  type NormalizedFlightData,\n} from '../../flight-data-helpers'\nimport { getAppBuildId } from '../../app-build-id'\nimport { setCacheBustingSearchParam } from './set-cache-busting-search-param'\n\nconst createFromReadableStream =\n  createFromReadableStreamBrowser as (typeof import('react-server-dom-webpack/client.browser'))['createFromReadableStream']\n\nexport interface FetchServerResponseOptions {\n  readonly flightRouterState: FlightRouterState\n  readonly nextUrl: string | null\n  readonly prefetchKind?: PrefetchKind\n  readonly isHmrRefresh?: boolean\n}\n\nexport type FetchServerResponseResult = {\n  flightData: NormalizedFlightData[] | string\n  canonicalUrl: URL | undefined\n  couldBeIntercepted: boolean\n  prerendered: boolean\n  postponed: boolean\n  staleTime: number\n}\n\nexport type RequestHeaders = {\n  [RSC_HEADER]?: '1'\n  [NEXT_ROUTER_STATE_TREE_HEADER]?: string\n  [NEXT_URL]?: string\n  [NEXT_ROUTER_PREFETCH_HEADER]?: '1'\n  [NEXT_ROUTER_SEGMENT_PREFETCH_HEADER]?: string\n  'x-deployment-id'?: string\n  [NEXT_HMR_REFRESH_HEADER]?: '1'\n  // A header that is only added in test mode to assert on fetch priority\n  'Next-Test-Fetch-Priority'?: RequestInit['priority']\n}\n\nexport function urlToUrlWithoutFlightMarker(url: string): URL {\n  const urlWithoutFlightParameters = new URL(url, location.origin)\n  urlWithoutFlightParameters.searchParams.delete(NEXT_RSC_UNION_QUERY)\n  if (process.env.NODE_ENV === 'production') {\n    if (\n      process.env.__NEXT_CONFIG_OUTPUT === 'export' &&\n      urlWithoutFlightParameters.pathname.endsWith('.txt')\n    ) {\n      const { pathname } = urlWithoutFlightParameters\n      const length = pathname.endsWith('/index.txt') ? 10 : 4\n      // Slice off `/index.txt` or `.txt` from the end of the pathname\n      urlWithoutFlightParameters.pathname = pathname.slice(0, -length)\n    }\n  }\n  return urlWithoutFlightParameters\n}\n\nfunction doMpaNavigation(url: string): FetchServerResponseResult {\n  return {\n    flightData: urlToUrlWithoutFlightMarker(url).toString(),\n    canonicalUrl: undefined,\n    couldBeIntercepted: false,\n    prerendered: false,\n    postponed: false,\n    staleTime: -1,\n  }\n}\n\nlet abortController = new AbortController()\n\nif (typeof window !== 'undefined') {\n  // Abort any in-flight requests when the page is unloaded, e.g. due to\n  // reloading the page or performing hard navigations. This allows us to ignore\n  // what would otherwise be a thrown TypeError when the browser cancels the\n  // requests.\n  window.addEventListener('pagehide', () => {\n    abortController.abort()\n  })\n\n  // Use a fresh AbortController instance on pageshow, e.g. when navigating back\n  // and the JavaScript execution context is restored by the browser.\n  window.addEventListener('pageshow', () => {\n    abortController = new AbortController()\n  })\n}\n\n/**\n * Fetch the flight data for the provided url. Takes in the current router state\n * to decide what to render server-side.\n */\nexport async function fetchServerResponse(\n  url: URL,\n  options: FetchServerResponseOptions\n): Promise<FetchServerResponseResult> {\n  const { flightRouterState, nextUrl, prefetchKind } = options\n\n  const headers: RequestHeaders = {\n    // Enable flight response\n    [RSC_HEADER]: '1',\n    // Provide the current router state\n    [NEXT_ROUTER_STATE_TREE_HEADER]: prepareFlightRouterStateForRequest(\n      flightRouterState,\n      options.isHmrRefresh\n    ),\n  }\n\n  /**\n   * Three cases:\n   * - `prefetchKind` is `undefined`, it means it's a normal navigation, so we want to prefetch the page data fully\n   * - `prefetchKind` is `full` - we want to prefetch the whole page so same as above\n   * - `prefetchKind` is `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully\n   */\n  if (prefetchKind === PrefetchKind.AUTO) {\n    headers[NEXT_ROUTER_PREFETCH_HEADER] = '1'\n  }\n\n  if (process.env.NODE_ENV === 'development' && options.isHmrRefresh) {\n    headers[NEXT_HMR_REFRESH_HEADER] = '1'\n  }\n\n  if (nextUrl) {\n    headers[NEXT_URL] = nextUrl\n  }\n\n  try {\n    // When creating a \"temporary\" prefetch (the \"on-demand\" prefetch that gets created on navigation, if one doesn't exist)\n    // we send the request with a \"high\" priority as it's in response to a user interaction that could be blocking a transition.\n    // Otherwise, all other prefetches are sent with a \"low\" priority.\n    // We use \"auto\" for in all other cases to match the existing default, as this function is shared outside of prefetching.\n    const fetchPriority = prefetchKind\n      ? prefetchKind === PrefetchKind.TEMPORARY\n        ? 'high'\n        : 'low'\n      : 'auto'\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        // In \"output: export\" mode, we can't rely on headers to distinguish\n        // between HTML and RSC requests. Instead, we append an extra prefix\n        // to the request.\n        url = new URL(url)\n        if (url.pathname.endsWith('/')) {\n          url.pathname += 'index.txt'\n        } else {\n          url.pathname += '.txt'\n        }\n      }\n    }\n\n    const res = await createFetch(\n      url,\n      headers,\n      fetchPriority,\n      abortController.signal\n    )\n\n    const responseUrl = urlToUrlWithoutFlightMarker(res.url)\n    const canonicalUrl = res.redirected ? responseUrl : undefined\n\n    const contentType = res.headers.get('content-type') || ''\n    const interception = !!res.headers.get('vary')?.includes(NEXT_URL)\n    const postponed = !!res.headers.get(NEXT_DID_POSTPONE_HEADER)\n    const staleTimeHeaderSeconds = res.headers.get(\n      NEXT_ROUTER_STALE_TIME_HEADER\n    )\n    const staleTime =\n      staleTimeHeaderSeconds !== null\n        ? parseInt(staleTimeHeaderSeconds, 10) * 1000\n        : -1\n    let isFlightResponse = contentType.startsWith(RSC_CONTENT_TYPE_HEADER)\n\n    if (process.env.NODE_ENV === 'production') {\n      if (process.env.__NEXT_CONFIG_OUTPUT === 'export') {\n        if (!isFlightResponse) {\n          isFlightResponse = contentType.startsWith('text/plain')\n        }\n      }\n    }\n\n    // If fetch returns something different than flight response handle it like a mpa navigation\n    // If the fetch was not 200, we also handle it like a mpa navigation\n    if (!isFlightResponse || !res.ok || !res.body) {\n      // in case the original URL came with a hash, preserve it before redirecting to the new URL\n      if (url.hash) {\n        responseUrl.hash = url.hash\n      }\n\n      return doMpaNavigation(responseUrl.toString())\n    }\n\n    // We may navigate to a page that requires a different Webpack runtime.\n    // In prod, every page will have the same Webpack runtime.\n    // In dev, the Webpack runtime is minimal for each page.\n    // We need to ensure the Webpack runtime is updated before executing client-side JS of the new page.\n    if (process.env.NODE_ENV !== 'production' && !process.env.TURBOPACK) {\n      await (\n        require('../../dev/hot-reloader/app/hot-reloader-app') as typeof import('../../dev/hot-reloader/app/hot-reloader-app')\n      ).waitForWebpackRuntimeHotUpdate()\n    }\n\n    // Handle the `fetch` readable stream that can be unwrapped by `React.use`.\n    const flightStream = postponed\n      ? createUnclosingPrefetchStream(res.body)\n      : res.body\n    const response = await (createFromNextReadableStream(\n      flightStream\n    ) as Promise<NavigationFlightResponse>)\n\n    if (getAppBuildId() !== response.b) {\n      return doMpaNavigation(res.url)\n    }\n\n    return {\n      flightData: normalizeFlightData(response.f),\n      canonicalUrl: canonicalUrl,\n      couldBeIntercepted: interception,\n      prerendered: response.S,\n      postponed,\n      staleTime,\n    }\n  } catch (err) {\n    if (!abortController.signal.aborted) {\n      console.error(\n        `Failed to fetch RSC payload for ${url}. Falling back to browser navigation.`,\n        err\n      )\n    }\n\n    // If fetch fails handle it like a mpa navigation\n    // TODO-APP: Add a test for the case where a CORS request fails, e.g. external url redirect coming from the response.\n    // See https://github.com/vercel/next.js/issues/43605#issuecomment-1451617521 for a reproduction.\n    return {\n      flightData: url.toString(),\n      canonicalUrl: undefined,\n      couldBeIntercepted: false,\n      prerendered: false,\n      postponed: false,\n      staleTime: -1,\n    }\n  }\n}\n\n// This is a subset of the standard Response type. We use a custom type for\n// this so we can limit which details about the response leak into the rest of\n// the codebase. For example, there's some custom logic for manually following\n// redirects, so \"redirected\" in this type could be a composite of multiple\n// browser fetch calls; however, this fact should not leak to the caller.\nexport type RSCResponse = {\n  ok: boolean\n  redirected: boolean\n  headers: Headers\n  body: ReadableStream<Uint8Array> | null\n  status: number\n  url: string\n}\n\nexport async function createFetch(\n  url: URL,\n  headers: RequestHeaders,\n  fetchPriority: 'auto' | 'high' | 'low' | null,\n  signal?: AbortSignal\n): Promise<RSCResponse> {\n  // TODO: In output: \"export\" mode, the headers do nothing. Omit them (and the\n  // cache busting search param) from the request so they're\n  // maximally cacheable.\n\n  if (process.env.__NEXT_TEST_MODE && fetchPriority !== null) {\n    headers['Next-Test-Fetch-Priority'] = fetchPriority\n  }\n\n  if (process.env.NEXT_DEPLOYMENT_ID) {\n    headers['x-deployment-id'] = process.env.NEXT_DEPLOYMENT_ID\n  }\n\n  const fetchOptions: RequestInit = {\n    // Backwards compat for older browsers. `same-origin` is the default in modern browsers.\n    credentials: 'same-origin',\n    headers,\n    priority: fetchPriority || undefined,\n    signal,\n  }\n  // `fetchUrl` is slightly different from `url` because we add a cache-busting\n  // search param to it. This should not leak outside of this function, so we\n  // track them separately.\n  let fetchUrl = new URL(url)\n  setCacheBustingSearchParam(fetchUrl, headers)\n  let browserResponse = await fetch(fetchUrl, fetchOptions)\n\n  // If the server responds with a redirect (e.g. 307), and the redirected\n  // location does not contain the cache busting search param set in the\n  // original request, the response is likely invalid — when following the\n  // redirect, the browser forwards the request headers, but since the cache\n  // busting search param is missing, the server will reject the request due to\n  // a mismatch.\n  //\n  // Ideally, we would be able to intercept the redirect response and perform it\n  // manually, instead of letting the browser automatically follow it, but this\n  // is not allowed by the fetch API.\n  //\n  // So instead, we must \"replay\" the redirect by fetching the new location\n  // again, but this time we'll append the cache busting search param to prevent\n  // a mismatch.\n  //\n  // TODO: We can optimize Next.js's built-in middleware APIs by returning a\n  // custom status code, to prevent the browser from automatically following it.\n  //\n  // This does not affect Server Action-based redirects; those are encoded\n  // differently, as part of the Flight body. It only affects redirects that\n  // occur in a middleware or a third-party proxy.\n\n  let redirected = browserResponse.redirected\n  if (process.env.__NEXT_CLIENT_VALIDATE_RSC_REQUEST_HEADERS) {\n    // This is to prevent a redirect loop. Same limit used by Chrome.\n    const MAX_REDIRECTS = 20\n    for (let n = 0; n < MAX_REDIRECTS; n++) {\n      if (!browserResponse.redirected) {\n        // The server did not perform a redirect.\n        break\n      }\n      const responseUrl = new URL(browserResponse.url, fetchUrl)\n      if (responseUrl.origin !== fetchUrl.origin) {\n        // The server redirected to an external URL. The rest of the logic below\n        // is not relevant, because it only applies to internal redirects.\n        break\n      }\n      if (\n        responseUrl.searchParams.get(NEXT_RSC_UNION_QUERY) ===\n        fetchUrl.searchParams.get(NEXT_RSC_UNION_QUERY)\n      ) {\n        // The redirected URL already includes the cache busting search param.\n        // This was probably intentional. Regardless, there's no reason to\n        // issue another request to this URL because it already has the param\n        // value that we would have added below.\n        break\n      }\n      // The RSC request was redirected. Assume the response is invalid.\n      //\n      // Append the cache busting search param to the redirected URL and\n      // fetch again.\n      fetchUrl = new URL(responseUrl)\n      setCacheBustingSearchParam(fetchUrl, headers)\n      browserResponse = await fetch(fetchUrl, fetchOptions)\n      // We just performed a manual redirect, so this is now true.\n      redirected = true\n    }\n  }\n\n  // Remove the cache busting search param from the response URL, to prevent it\n  // from leaking outside of this function.\n  const responseUrl = new URL(browserResponse.url, fetchUrl)\n  responseUrl.searchParams.delete(NEXT_RSC_UNION_QUERY)\n\n  const rscResponse: RSCResponse = {\n    url: responseUrl.href,\n\n    // This is true if any redirects occurred, either automatically by the\n    // browser, or manually by us. So it's different from\n    // `browserResponse.redirected`, which only tells us whether the browser\n    // followed a redirect, and only for the last response in the chain.\n    redirected,\n\n    // These can be copied from the last browser response we received. We\n    // intentionally only expose the subset of fields that are actually used\n    // elsewhere in the codebase.\n    ok: browserResponse.ok,\n    headers: browserResponse.headers,\n    body: browserResponse.body,\n    status: browserResponse.status,\n  }\n\n  return rscResponse\n}\n\nexport function createFromNextReadableStream(\n  flightStream: ReadableStream<Uint8Array>\n): Promise<unknown> {\n  return createFromReadableStream(flightStream, {\n    callServer,\n    findSourceMapURL,\n  })\n}\n\nfunction createUnclosingPrefetchStream(\n  originalFlightStream: ReadableStream<Uint8Array>\n): ReadableStream<Uint8Array> {\n  // When PPR is enabled, prefetch streams may contain references that never\n  // resolve, because that's how we encode dynamic data access. In the decoded\n  // object returned by the Flight client, these are reified into hanging\n  // promises that suspend during render, which is effectively what we want.\n  // The UI resolves when it switches to the dynamic data stream\n  // (via useDeferredValue(dynamic, static)).\n  //\n  // However, the Flight implementation currently errors if the server closes\n  // the response before all the references are resolved. As a cheat to work\n  // around this, we wrap the original stream in a new stream that never closes,\n  // and therefore doesn't error.\n  const reader = originalFlightStream.getReader()\n  return new ReadableStream({\n    async pull(controller) {\n      while (true) {\n        const { done, value } = await reader.read()\n        if (!done) {\n          // Pass to the target stream and keep consuming the Flight response\n          // from the server.\n          controller.enqueue(value)\n          continue\n        }\n        // The server stream has closed. Exit, but intentionally do not close\n        // the target stream.\n        return\n      }\n    },\n  })\n}\n","import { startTransition } from 'react'\nimport { ACTION_SERVER_ACTION } from './components/router-reducer/router-reducer-types'\nimport { dispatchAppRouterAction } from './components/use-action-queue'\n\nexport async function callServer(actionId: string, actionArgs: any[]) {\n  return new Promise((resolve, reject) => {\n    startTransition(() => {\n      dispatchAppRouterAction({\n        type: ACTION_SERVER_ACTION,\n        actionId,\n        actionArgs,\n        resolve,\n        reject,\n      })\n    })\n  })\n}\n","/**\n * This function should be used to rethrow internal Next.js errors so that they can be handled by the framework.\n * When wrapping an API that uses errors to interrupt control flow, you should use this function before you do any error handling.\n * This function will rethrow the error if it is a Next.js error so it can be handled, otherwise it will do nothing.\n *\n * Read more: [Next.js Docs: `unstable_rethrow`](https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow)\n */\nexport const unstable_rethrow =\n  typeof window === 'undefined'\n    ? (\n        require('./unstable-rethrow.server') as typeof import('./unstable-rethrow.server')\n      ).unstable_rethrow\n    : (\n        require('./unstable-rethrow.browser') as typeof import('./unstable-rethrow.browser')\n      ).unstable_rethrow\n","import { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type {\n  ReadonlyReducerState,\n  ReducerState,\n  HmrRefreshAction,\n  Mutable,\n} from '../router-reducer-types'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { handleMutable } from '../handle-mutable'\nimport { applyFlightData } from '../apply-flight-data'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { handleSegmentMismatch } from '../handle-segment-mismatch'\nimport { hasInterceptionRouteInCurrentTree } from './has-interception-route-in-current-tree'\n\n// A version of refresh reducer that keeps the cache around instead of wiping all of it.\nfunction hmrRefreshReducerImpl(\n  state: ReadonlyReducerState,\n  action: HmrRefreshAction\n): ReducerState {\n  const { origin } = action\n  const mutable: Mutable = {}\n  const href = state.canonicalUrl\n\n  mutable.preserveCustomHistoryState = false\n\n  const cache: CacheNode = createEmptyCacheNode()\n  // If the current tree was intercepted, the nextUrl should be included in the request.\n  // This is to ensure that the refresh request doesn't get intercepted, accidentally triggering the interception route.\n  const includeNextUrl = hasInterceptionRouteInCurrentTree(state.tree)\n\n  // TODO-APP: verify that `href` is not an external url.\n  // Fetch data from the root of the tree.\n  const navigatedAt = Date.now()\n  cache.lazyData = fetchServerResponse(new URL(href, origin), {\n    flightRouterState: [state.tree[0], state.tree[1], state.tree[2], 'refetch'],\n    nextUrl: includeNextUrl ? state.nextUrl : null,\n    isHmrRefresh: true,\n  })\n\n  return cache.lazyData.then(\n    ({ flightData, canonicalUrl: canonicalUrlOverride }) => {\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(\n          state,\n          mutable,\n          flightData,\n          state.pushRef.pendingPush\n        )\n      }\n\n      // Remove cache.lazyData as it has been resolved at this point.\n      cache.lazyData = null\n\n      let currentTree = state.tree\n      let currentCache = state.cache\n\n      for (const normalizedFlightData of flightData) {\n        const { tree: treePatch, isRootRender } = normalizedFlightData\n        if (!isRootRender) {\n          // TODO-APP: handle this case better\n          console.log('REFRESH FAILED')\n          return state\n        }\n\n        const newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          [''],\n          currentTree,\n          treePatch,\n          state.canonicalUrl\n        )\n\n        if (newTree === null) {\n          return handleSegmentMismatch(state, action, treePatch)\n        }\n\n        if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n          return handleExternalUrl(\n            state,\n            mutable,\n            href,\n            state.pushRef.pendingPush\n          )\n        }\n\n        const canonicalUrlOverrideHref = canonicalUrlOverride\n          ? createHrefFromUrl(canonicalUrlOverride)\n          : undefined\n\n        if (canonicalUrlOverride) {\n          mutable.canonicalUrl = canonicalUrlOverrideHref\n        }\n        const applied = applyFlightData(\n          navigatedAt,\n          currentCache,\n          cache,\n          normalizedFlightData\n        )\n\n        if (applied) {\n          mutable.cache = cache\n          currentCache = cache\n        }\n\n        mutable.patchedTree = newTree\n        mutable.canonicalUrl = href\n\n        currentTree = newTree\n      }\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n\nfunction hmrRefreshReducerNoop(\n  state: ReadonlyReducerState,\n  _action: HmrRefreshAction\n): ReducerState {\n  return state\n}\n\nexport const hmrRefreshReducer =\n  process.env.NODE_ENV === 'production'\n    ? hmrRefreshReducerNoop\n    : hmrRefreshReducerImpl\n","import type {\n  FlightRouterState,\n  FlightDataPath,\n  Segment,\n} from '../../../server/app-render/types'\nimport { getNextFlightSegmentPath } from '../../flight-data-helpers'\nimport { matchSegment } from '../match-segments'\n\n// TODO-APP: flightSegmentPath will be empty in case of static response, needs to be handled.\nexport function shouldHardNavigate(\n  flightSegmentPath: FlightDataPath,\n  flightRouterState: FlightRouterState\n): boolean {\n  const [segment, parallelRoutes] = flightRouterState\n  // TODO-APP: Check if `as` can be replaced.\n  const [currentSegment, parallelRouteKey] = flightSegmentPath as [\n    Segment,\n    string,\n  ]\n\n  // Check if current segment matches the existing segment.\n  if (!matchSegment(currentSegment, segment)) {\n    // If dynamic parameter in tree doesn't match up with segment path a hard navigation is triggered.\n    if (Array.isArray(currentSegment)) {\n      return true\n    }\n\n    // If the existing segment did not match soft navigation is triggered.\n    return false\n  }\n  const lastSegment = flightSegmentPath.length <= 2\n\n  if (lastSegment) {\n    return false\n  }\n\n  return shouldHardNavigate(\n    getNextFlightSegmentPath(flightSegmentPath),\n    parallelRoutes[parallelRouteKey]\n  )\n}\n","/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */\nexport function removeTrailingSlash(route: string) {\n  return route.replace(/\\/$/, '') || '/'\n}\n","import {\n  HTTP_ERROR_FALLBACK_ERROR_CODE,\n  type HTTPAccessFallbackError,\n} from './http-access-fallback/http-access-fallback'\n\n// TODO: Add `forbidden` docs\n/**\n * @experimental\n * This function allows you to render the [forbidden.js file](https://nextjs.org/docs/app/api-reference/file-conventions/forbidden)\n * within a route segment as well as inject a tag.\n *\n * `forbidden()` can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * Read more: [Next.js Docs: `forbidden`](https://nextjs.org/docs/app/api-reference/functions/forbidden)\n */\n\nconst DIGEST = `${HTTP_ERROR_FALLBACK_ERROR_CODE};403`\n\nexport function forbidden(): never {\n  if (!process.env.__NEXT_EXPERIMENTAL_AUTH_INTERRUPTS) {\n    throw new Error(\n      `\\`forbidden()\\` is experimental and only allowed to be enabled when \\`experimental.authInterrupts\\` is enabled.`\n    )\n  }\n\n  // eslint-disable-next-line no-throw-literal\n  const error = new Error(DIGEST) as HTTPAccessFallbackError\n  ;(error as HTTPAccessFallbackError).digest = DIGEST\n  throw error\n}\n","import { addPathPrefix } from '../shared/lib/router/utils/add-path-prefix'\nimport { normalizePathTrailingSlash } from './normalize-trailing-slash'\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nexport function addBasePath(path: string, required?: boolean): string {\n  return normalizePathTrailingSlash(\n    process.env.__NEXT_MANUAL_CLIENT_BASE_PATH && !required\n      ? path\n      : addPathPrefix(path, basePath)\n  )\n}\n","import { useEffect } from 'react'\nimport { createHrefFromUrl } from './router-reducer/create-href-from-url'\n\nexport function handleHardNavError(error: unknown): boolean {\n  if (\n    error &&\n    typeof window !== 'undefined' &&\n    window.next.__pendingUrl &&\n    createHrefFromUrl(new URL(window.location.href)) !==\n      createHrefFromUrl(window.next.__pendingUrl)\n  ) {\n    console.error(\n      `Error occurred during navigation, falling back to hard navigation`,\n      error\n    )\n    window.location.href = window.next.__pendingUrl.toString()\n    return true\n  }\n  return false\n}\n\nexport function useNavFailureHandler() {\n  if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n    // this if is only for DCE of the feature flag not conditional\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      const uncaughtExceptionHandler = (\n        evt: ErrorEvent | PromiseRejectionEvent\n      ) => {\n        const error = 'reason' in evt ? evt.reason : evt.error\n        // if we have an unhandled exception/rejection during\n        // a navigation we fall back to a hard navigation to\n        // attempt recovering to a good state\n        handleHardNavError(error)\n      }\n      window.addEventListener('unhandledrejection', uncaughtExceptionHandler)\n      window.addEventListener('error', uncaughtExceptionHandler)\n      return () => {\n        window.removeEventListener('error', uncaughtExceptionHandler)\n        window.removeEventListener(\n          'unhandledrejection',\n          uncaughtExceptionHandler\n        )\n      }\n    }, [])\n  }\n}\n","// This regex will have fast negatives meaning valid identifiers may not pass\n// this test. However this is only used during static generation to provide hints\n// about why a page bailed out of some or all prerendering and we can use bracket notation\n// for example while `ಠ_ಠ` is a valid identifier it's ok to print `searchParams['ಠ_ಠ']`\n// even if this would have been fine too `searchParams.ಠ_ಠ`\nconst isDefinitelyAValidIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/\n\nexport function describeStringPropertyAccess(target: string, prop: string) {\n  if (isDefinitelyAValidIdentifier.test(prop)) {\n    return `\\`${target}.${prop}\\``\n  }\n  return `\\`${target}[${JSON.stringify(prop)}]\\``\n}\n\nexport function describeHasCheckingStringProperty(\n  target: string,\n  prop: string\n) {\n  const stringifiedProp = JSON.stringify(prop)\n  return `\\`Reflect.has(${target}, ${stringifiedProp})\\`, \\`${stringifiedProp} in ${target}\\`, or similar`\n}\n\nexport const wellKnownProperties = new Set([\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toString',\n  'valueOf',\n  'toLocaleString',\n\n  // Promise prototype\n  // fallthrough\n  'then',\n  'catch',\n  'finally',\n\n  // React Promise extension\n  // fallthrough\n  'status',\n\n  // React introspection\n  'displayName',\n  '_debugInfo',\n\n  // Common tested properties\n  // fallthrough\n  'toJSON',\n  '$$typeof',\n  '__esModule',\n])\n","// This import must go first because it needs to patch webpack chunk loading\n// before React patches chunk loading.\nimport './app-webpack'\nimport { appBootstrap } from './app-bootstrap'\n\nconst instrumentationHooks =\n  // eslint-disable-next-line @next/internal/typechecked-require -- not a module\n  require('../lib/require-instrumentation-client')\n\nappBootstrap(() => {\n  const { hydrate } = require('./app-index') as typeof import('./app-index')\n  // Include app-router and layout-router in the main chunk\n  // eslint-disable-next-line @next/internal/typechecked-require -- Why not relative imports?\n  require('next/dist/client/components/app-router')\n  // eslint-disable-next-line @next/internal/typechecked-require -- Why not relative imports?\n  require('next/dist/client/components/layout-router')\n  hydrate(instrumentationHooks)\n})\n","export const HTTPAccessErrorStatus = {\n  NOT_FOUND: 404,\n  FORBIDDEN: 403,\n  UNAUTHORIZED: 401,\n}\n\nconst ALLOWED_CODES = new Set(Object.values(HTTPAccessErrorStatus))\n\nexport const HTTP_ERROR_FALLBACK_ERROR_CODE = 'NEXT_HTTP_ERROR_FALLBACK'\n\nexport type HTTPAccessFallbackError = Error & {\n  digest: `${typeof HTTP_ERROR_FALLBACK_ERROR_CODE};${string}`\n}\n\n/**\n * Checks an error to determine if it's an error generated by\n * the HTTP navigation APIs `notFound()`, `forbidden()` or `unauthorized()`.\n *\n * @param error the error that may reference a HTTP access error\n * @returns true if the error is a HTTP access error\n */\nexport function isHTTPAccessFallbackError(\n  error: unknown\n): error is HTTPAccessFallbackError {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n  const [prefix, httpStatus] = error.digest.split(';')\n\n  return (\n    prefix === HTTP_ERROR_FALLBACK_ERROR_CODE &&\n    ALLOWED_CODES.has(Number(httpStatus))\n  )\n}\n\nexport function getAccessFallbackHTTPStatus(\n  error: HTTPAccessFallbackError\n): number {\n  const httpStatus = error.digest.split(';')[1]\n  return Number(httpStatus)\n}\n\nexport function getAccessFallbackErrorTypeByStatus(\n  status: number\n): 'not-found' | 'forbidden' | 'unauthorized' | undefined {\n  switch (status) {\n    case 401:\n      return 'unauthorized'\n    case 403:\n      return 'forbidden'\n    case 404:\n      return 'not-found'\n    default:\n      return\n  }\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-server-dom-webpack-client.browser.production.js');\n} else {\n  module.exports = require('./cjs/react-server-dom-webpack-client.browser.development.js');\n}\n","import './app-globals'\nimport ReactDOMClient from 'react-dom/client'\nimport React, { use } from 'react'\n// TODO: Explicitly import from client.browser\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { createFromReadableStream as createFromReadableStreamBrowser } from 'react-server-dom-webpack/client'\nimport { HeadManagerContext } from '../shared/lib/head-manager-context.shared-runtime'\nimport { onRecoverableError } from './react-client-callbacks/on-recoverable-error'\nimport {\n  onCaughtError,\n  onUncaughtError,\n} from './react-client-callbacks/error-boundary-callbacks'\nimport { callServer } from './app-call-server'\nimport { findSourceMapURL } from './app-find-source-map-url'\nimport {\n  type AppRouterActionQueue,\n  createMutableActionQueue,\n} from './components/app-router-instance'\nimport AppRouter from './components/app-router'\nimport type { InitialRSCPayload } from '../server/app-render/types'\nimport { createInitialRouterState } from './components/router-reducer/create-initial-router-state'\nimport { MissingSlotContext } from '../shared/lib/app-router-context.shared-runtime'\nimport { setAppBuildId } from './app-build-id'\nimport { isBot } from '../shared/lib/router/utils/is-bot'\n\n/// <reference types=\"react-dom/experimental\" />\n\nconst createFromReadableStream =\n  createFromReadableStreamBrowser as (typeof import('react-server-dom-webpack/client.browser'))['createFromReadableStream']\n\nconst appElement: HTMLElement | Document = document\n\nconst encoder = new TextEncoder()\n\nlet initialServerDataBuffer: (string | Uint8Array)[] | undefined = undefined\nlet initialServerDataWriter: ReadableStreamDefaultController | undefined =\n  undefined\nlet initialServerDataLoaded = false\nlet initialServerDataFlushed = false\n\nlet initialFormStateData: null | any = null\n\ntype FlightSegment =\n  | [isBootStrap: 0]\n  | [isNotBootstrap: 1, responsePartial: string]\n  | [isFormState: 2, formState: any]\n  | [isBinary: 3, responseBase64Partial: string]\n\ntype NextFlight = Omit<Array<FlightSegment>, 'push'> & {\n  push: (seg: FlightSegment) => void\n}\n\ndeclare global {\n  // If you're working in a browser environment\n  interface Window {\n    __next_f: NextFlight\n  }\n}\n\nfunction nextServerDataCallback(seg: FlightSegment): void {\n  if (seg[0] === 0) {\n    initialServerDataBuffer = []\n  } else if (seg[0] === 1) {\n    if (!initialServerDataBuffer)\n      throw new Error('Unexpected server data: missing bootstrap script.')\n\n    if (initialServerDataWriter) {\n      initialServerDataWriter.enqueue(encoder.encode(seg[1]))\n    } else {\n      initialServerDataBuffer.push(seg[1])\n    }\n  } else if (seg[0] === 2) {\n    initialFormStateData = seg[1]\n  } else if (seg[0] === 3) {\n    if (!initialServerDataBuffer)\n      throw new Error('Unexpected server data: missing bootstrap script.')\n\n    // Decode the base64 string back to binary data.\n    const binaryString = atob(seg[1])\n    const decodedChunk = new Uint8Array(binaryString.length)\n    for (var i = 0; i < binaryString.length; i++) {\n      decodedChunk[i] = binaryString.charCodeAt(i)\n    }\n\n    if (initialServerDataWriter) {\n      initialServerDataWriter.enqueue(decodedChunk)\n    } else {\n      initialServerDataBuffer.push(decodedChunk)\n    }\n  }\n}\n\nfunction isStreamErrorOrUnfinished(ctr: ReadableStreamDefaultController) {\n  // If `desiredSize` is null, it means the stream is closed or errored. If it is lower than 0, the stream is still unfinished.\n  return ctr.desiredSize === null || ctr.desiredSize < 0\n}\n\n// There might be race conditions between `nextServerDataRegisterWriter` and\n// `DOMContentLoaded`. The former will be called when React starts to hydrate\n// the root, the latter will be called when the DOM is fully loaded.\n// For streaming, the former is called first due to partial hydration.\n// For non-streaming, the latter can be called first.\n// Hence, we use two variables `initialServerDataLoaded` and\n// `initialServerDataFlushed` to make sure the writer will be closed and\n// `initialServerDataBuffer` will be cleared in the right time.\nfunction nextServerDataRegisterWriter(ctr: ReadableStreamDefaultController) {\n  if (initialServerDataBuffer) {\n    initialServerDataBuffer.forEach((val) => {\n      ctr.enqueue(typeof val === 'string' ? encoder.encode(val) : val)\n    })\n    if (initialServerDataLoaded && !initialServerDataFlushed) {\n      if (isStreamErrorOrUnfinished(ctr)) {\n        ctr.error(\n          new Error(\n            'The connection to the page was unexpectedly closed, possibly due to the stop button being clicked, loss of Wi-Fi, or an unstable internet connection.'\n          )\n        )\n      } else {\n        ctr.close()\n      }\n      initialServerDataFlushed = true\n      initialServerDataBuffer = undefined\n    }\n  }\n\n  initialServerDataWriter = ctr\n}\n\n// When `DOMContentLoaded`, we can close all pending writers to finish hydration.\nconst DOMContentLoaded = function () {\n  if (initialServerDataWriter && !initialServerDataFlushed) {\n    initialServerDataWriter.close()\n    initialServerDataFlushed = true\n    initialServerDataBuffer = undefined\n  }\n  initialServerDataLoaded = true\n}\n\n// It's possible that the DOM is already loaded.\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', DOMContentLoaded, false)\n} else {\n  // Delayed in marco task to ensure it's executed later than hydration\n  setTimeout(DOMContentLoaded)\n}\n\nconst nextServerDataLoadingGlobal = (self.__next_f = self.__next_f || [])\nnextServerDataLoadingGlobal.forEach(nextServerDataCallback)\nnextServerDataLoadingGlobal.push = nextServerDataCallback\n\nconst readable = new ReadableStream({\n  start(controller) {\n    nextServerDataRegisterWriter(controller)\n  },\n})\n\nconst initialServerResponse = createFromReadableStream<InitialRSCPayload>(\n  readable,\n  { callServer, findSourceMapURL }\n)\n\nfunction ServerRoot({\n  pendingActionQueue,\n}: {\n  pendingActionQueue: Promise<AppRouterActionQueue>\n}): React.ReactNode {\n  const initialRSCPayload = use(initialServerResponse)\n  const actionQueue = use<AppRouterActionQueue>(pendingActionQueue)\n\n  const router = (\n    <AppRouter\n      gracefullyDegrade={isBot(window.navigator.userAgent)}\n      actionQueue={actionQueue}\n      globalErrorState={initialRSCPayload.G}\n      assetPrefix={initialRSCPayload.p}\n    />\n  )\n\n  if (process.env.NODE_ENV === 'development' && initialRSCPayload.m) {\n    // We provide missing slot information in a context provider only during development\n    // as we log some additional information about the missing slots in the console.\n    return (\n      <MissingSlotContext value={initialRSCPayload.m}>\n        {router}\n      </MissingSlotContext>\n    )\n  }\n\n  return router\n}\n\nconst StrictModeIfEnabled = process.env.__NEXT_STRICT_MODE_APP\n  ? React.StrictMode\n  : React.Fragment\n\nfunction Root({ children }: React.PropsWithChildren<{}>) {\n  if (process.env.__NEXT_TEST_MODE) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      window.__NEXT_HYDRATED = true\n      window.__NEXT_HYDRATED_AT = performance.now()\n      window.__NEXT_HYDRATED_CB?.()\n    }, [])\n  }\n\n  return children\n}\n\nfunction onDefaultTransitionIndicator() {\n  // TODO: Compose default with user-configureable (e.g. nprogress)\n  // TODO: Use React's default once we figure out hanging indicators: https://codesandbox.io/p/sandbox/charming-moon-hktkp6?file=%2Fsrc%2Findex.js%3A106%2C30\n  return () => {}\n}\n\nconst reactRootOptions: ReactDOMClient.RootOptions = {\n  onDefaultTransitionIndicator: onDefaultTransitionIndicator,\n  onRecoverableError,\n  onCaughtError,\n  onUncaughtError,\n}\n\nexport type ClientInstrumentationHooks = {\n  onRouterTransitionStart?: (\n    url: string,\n    navigationType: 'push' | 'replace' | 'traverse'\n  ) => void\n}\n\nexport function hydrate(\n  instrumentationHooks: ClientInstrumentationHooks | null\n) {\n  // React overrides `.then` and doesn't return a new promise chain,\n  // so we wrap the action queue in a promise to ensure that its value\n  // is defined when the promise resolves.\n  // https://github.com/facebook/react/blob/163365a07872337e04826c4f501565d43dbd2fd4/packages/react-client/src/ReactFlightClient.js#L189-L190\n  const pendingActionQueue: Promise<AppRouterActionQueue> = new Promise(\n    (resolve, reject) => {\n      initialServerResponse.then(\n        (initialRSCPayload) => {\n          // setAppBuildId should be called only once, during JS initialization\n          // and before any components have hydrated.\n          setAppBuildId(initialRSCPayload.b)\n\n          const initialTimestamp = Date.now()\n\n          resolve(\n            createMutableActionQueue(\n              createInitialRouterState({\n                navigatedAt: initialTimestamp,\n                initialFlightData: initialRSCPayload.f,\n                initialCanonicalUrlParts: initialRSCPayload.c,\n                initialParallelRoutes: new Map(),\n                location: window.location,\n                couldBeIntercepted: initialRSCPayload.i,\n                postponed: initialRSCPayload.s,\n                prerendered: initialRSCPayload.S,\n              }),\n              instrumentationHooks\n            )\n          )\n        },\n        (err: Error) => reject(err)\n      )\n    }\n  )\n\n  const reactEl = (\n    <StrictModeIfEnabled>\n      <HeadManagerContext.Provider value={{ appDir: true }}>\n        <Root>\n          <ServerRoot pendingActionQueue={pendingActionQueue} />\n        </Root>\n      </HeadManagerContext.Provider>\n    </StrictModeIfEnabled>\n  )\n\n  if (document.documentElement.id === '__next_error__') {\n    let element = reactEl\n    // Server rendering failed, fall back to client-side rendering\n    if (process.env.NODE_ENV !== 'production') {\n      const { createRootLevelDevOverlayElement } =\n        require('../next-devtools/userspace/app/client-entry') as typeof import('../next-devtools/userspace/app/client-entry')\n\n      // Note this won't cause hydration mismatch because we are doing CSR w/o hydration\n      element = createRootLevelDevOverlayElement(element)\n    }\n\n    ReactDOMClient.createRoot(appElement, reactRootOptions).render(element)\n  } else {\n    React.startTransition(() => {\n      ReactDOMClient.hydrateRoot(appElement, reactEl, {\n        ...reactRootOptions,\n        formState: initialFormStateData,\n      })\n    })\n  }\n\n  // TODO-APP: Remove this logic when Float has GC built-in in development.\n  if (process.env.NODE_ENV !== 'production') {\n    const { linkGc } =\n      require('./app-link-gc') as typeof import('./app-link-gc')\n    linkGc()\n  }\n}\n","// This gets assigned as a side-effect during app initialization. Because it\n// represents the build used to create the JS bundle, it should never change\n// after being set, so we store it in a global variable.\n//\n// When performing RSC requests, if the incoming data has a different build ID,\n// we perform an MPA navigation/refresh to load the updated build and ensure\n// that the client and server in sync.\n\n// Starts as an empty string. In practice, because setAppBuildId is called\n// during initialization before hydration starts, this will always get\n// reassigned to the actual build ID before it's ever needed by a navigation.\n// If for some reasons it didn't, due to a bug or race condition, then on\n// navigation the build comparision would fail and trigger an MPA navigation.\nlet globalBuildId: string = ''\n\nexport function setAppBuildId(buildId: string) {\n  globalBuildId = buildId\n}\n\nexport function getAppBuildId(): string {\n  return globalBuildId\n}\n","/**\n * @license React\n * react-dom.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar React = require(\"next/dist/compiled/react\");\nfunction formatProdErrorMessage(code) {\n  var url = \"https://react.dev/errors/\" + code;\n  if (1 < arguments.length) {\n    url += \"?args[]=\" + encodeURIComponent(arguments[1]);\n    for (var i = 2; i < arguments.length; i++)\n      url += \"&args[]=\" + encodeURIComponent(arguments[i]);\n  }\n  return (\n    \"Minified React error #\" +\n    code +\n    \"; visit \" +\n    url +\n    \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"\n  );\n}\nfunction noop() {}\nvar Internals = {\n    d: {\n      f: noop,\n      r: function () {\n        throw Error(formatProdErrorMessage(522));\n      },\n      D: noop,\n      C: noop,\n      L: noop,\n      m: noop,\n      X: noop,\n      S: noop,\n      M: noop\n    },\n    p: 0,\n    findDOMNode: null\n  },\n  REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\nfunction createPortal$1(children, containerInfo, implementation) {\n  var key =\n    3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;\n  return {\n    $$typeof: REACT_PORTAL_TYPE,\n    key: null == key ? null : \"\" + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n}\nvar ReactSharedInternals =\n  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\nfunction getCrossOriginStringAs(as, input) {\n  if (\"font\" === as) return \"\";\n  if (\"string\" === typeof input)\n    return \"use-credentials\" === input ? input : \"\";\n}\nexports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =\n  Internals;\nexports.createPortal = function (children, container) {\n  var key =\n    2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;\n  if (\n    !container ||\n    (1 !== container.nodeType &&\n      9 !== container.nodeType &&\n      11 !== container.nodeType)\n  )\n    throw Error(formatProdErrorMessage(299));\n  return createPortal$1(children, container, null, key);\n};\nexports.flushSync = function (fn) {\n  var previousTransition = ReactSharedInternals.T,\n    previousUpdatePriority = Internals.p;\n  try {\n    if (((ReactSharedInternals.T = null), (Internals.p = 2), fn)) return fn();\n  } finally {\n    (ReactSharedInternals.T = previousTransition),\n      (Internals.p = previousUpdatePriority),\n      Internals.d.f();\n  }\n};\nexports.preconnect = function (href, options) {\n  \"string\" === typeof href &&\n    (options\n      ? ((options = options.crossOrigin),\n        (options =\n          \"string\" === typeof options\n            ? \"use-credentials\" === options\n              ? options\n              : \"\"\n            : void 0))\n      : (options = null),\n    Internals.d.C(href, options));\n};\nexports.prefetchDNS = function (href) {\n  \"string\" === typeof href && Internals.d.D(href);\n};\nexports.preinit = function (href, options) {\n  if (\"string\" === typeof href && options && \"string\" === typeof options.as) {\n    var as = options.as,\n      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),\n      integrity =\n        \"string\" === typeof options.integrity ? options.integrity : void 0,\n      fetchPriority =\n        \"string\" === typeof options.fetchPriority\n          ? options.fetchPriority\n          : void 0;\n    \"style\" === as\n      ? Internals.d.S(\n          href,\n          \"string\" === typeof options.precedence ? options.precedence : void 0,\n          {\n            crossOrigin: crossOrigin,\n            integrity: integrity,\n            fetchPriority: fetchPriority\n          }\n        )\n      : \"script\" === as &&\n        Internals.d.X(href, {\n          crossOrigin: crossOrigin,\n          integrity: integrity,\n          fetchPriority: fetchPriority,\n          nonce: \"string\" === typeof options.nonce ? options.nonce : void 0\n        });\n  }\n};\nexports.preinitModule = function (href, options) {\n  if (\"string\" === typeof href)\n    if (\"object\" === typeof options && null !== options) {\n      if (null == options.as || \"script\" === options.as) {\n        var crossOrigin = getCrossOriginStringAs(\n          options.as,\n          options.crossOrigin\n        );\n        Internals.d.M(href, {\n          crossOrigin: crossOrigin,\n          integrity:\n            \"string\" === typeof options.integrity ? options.integrity : void 0,\n          nonce: \"string\" === typeof options.nonce ? options.nonce : void 0\n        });\n      }\n    } else null == options && Internals.d.M(href);\n};\nexports.preload = function (href, options) {\n  if (\n    \"string\" === typeof href &&\n    \"object\" === typeof options &&\n    null !== options &&\n    \"string\" === typeof options.as\n  ) {\n    var as = options.as,\n      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);\n    Internals.d.L(href, as, {\n      crossOrigin: crossOrigin,\n      integrity:\n        \"string\" === typeof options.integrity ? options.integrity : void 0,\n      nonce: \"string\" === typeof options.nonce ? options.nonce : void 0,\n      type: \"string\" === typeof options.type ? options.type : void 0,\n      fetchPriority:\n        \"string\" === typeof options.fetchPriority\n          ? options.fetchPriority\n          : void 0,\n      referrerPolicy:\n        \"string\" === typeof options.referrerPolicy\n          ? options.referrerPolicy\n          : void 0,\n      imageSrcSet:\n        \"string\" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,\n      imageSizes:\n        \"string\" === typeof options.imageSizes ? options.imageSizes : void 0,\n      media: \"string\" === typeof options.media ? options.media : void 0\n    });\n  }\n};\nexports.preloadModule = function (href, options) {\n  if (\"string\" === typeof href)\n    if (options) {\n      var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);\n      Internals.d.m(href, {\n        as:\n          \"string\" === typeof options.as && \"script\" !== options.as\n            ? options.as\n            : void 0,\n        crossOrigin: crossOrigin,\n        integrity:\n          \"string\" === typeof options.integrity ? options.integrity : void 0\n      });\n    } else Internals.d.m(href);\n};\nexports.requestFormReset = function (form) {\n  Internals.d.r(form);\n};\nexports.unstable_batchedUpdates = function (fn, a) {\n  return fn(a);\n};\nexports.useFormState = function (action, initialState, permalink) {\n  return ReactSharedInternals.H.useFormState(action, initialState, permalink);\n};\nexports.useFormStatus = function () {\n  return ReactSharedInternals.H.useHostTransitionStatus();\n};\nexports.version = \"19.2.0-canary-97cdd5d3-20250710\";\n","import { parsePath } from './parse-path'\n\n/**\n * Checks if a given path starts with a given prefix. It ensures it matches\n * exactly without containing extra chars. e.g. prefix /docs should replace\n * for /docs, /docs/, /docs/a but not /docsss\n * @param path The path to check.\n * @param prefix The prefix to check against.\n */\nexport function pathHasPrefix(path: string, prefix: string) {\n  if (typeof path !== 'string') {\n    return false\n  }\n\n  const { pathname } = parsePath(path)\n  return pathname === prefix || pathname.startsWith(prefix + '/')\n}\n","import {\n  type AppRouterState,\n  type ReducerActions,\n  type ReducerState,\n  ACTION_REFRESH,\n  ACTION_SERVER_ACTION,\n  ACTION_NAVIGATE,\n  ACTION_RESTORE,\n  type NavigateAction,\n  ACTION_HMR_REFRESH,\n  PrefetchKind,\n  ACTION_PREFETCH,\n} from './router-reducer/router-reducer-types'\nimport { reducer } from './router-reducer/router-reducer'\nimport { startTransition } from 'react'\nimport { isThenable } from '../../shared/lib/is-thenable'\nimport { prefetch as prefetchWithSegmentCache } from './segment-cache'\nimport { dispatchAppRouterAction } from './use-action-queue'\nimport { addBasePath } from '../add-base-path'\nimport { createPrefetchURL, isExternalURL } from './app-router'\nimport { prefetchReducer } from './router-reducer/reducers/prefetch-reducer'\nimport type {\n  AppRouterInstance,\n  NavigateOptions,\n  PrefetchOptions,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport { setLinkForCurrentNavigation, type LinkInstance } from './links'\nimport type { FlightRouterState } from '../../server/app-render/types'\nimport type { ClientInstrumentationHooks } from '../app-index'\nimport type { GlobalErrorComponent } from './builtin/global-error'\n\nexport type DispatchStatePromise = React.Dispatch<ReducerState>\n\nexport type AppRouterActionQueue = {\n  state: AppRouterState\n  dispatch: (payload: ReducerActions, setState: DispatchStatePromise) => void\n  action: (state: AppRouterState, action: ReducerActions) => ReducerState\n\n  onRouterTransitionStart:\n    | ((url: string, type: 'push' | 'replace' | 'traverse') => void)\n    | null\n\n  pending: ActionQueueNode | null\n  needsRefresh?: boolean\n  last: ActionQueueNode | null\n}\n\nexport type GlobalErrorState = [\n  GlobalError: GlobalErrorComponent,\n  styles: React.ReactNode,\n]\n\nexport type ActionQueueNode = {\n  payload: ReducerActions\n  next: ActionQueueNode | null\n  resolve: (value: ReducerState) => void\n  reject: (err: Error) => void\n  discarded?: boolean\n}\n\nfunction runRemainingActions(\n  actionQueue: AppRouterActionQueue,\n  setState: DispatchStatePromise\n) {\n  if (actionQueue.pending !== null) {\n    actionQueue.pending = actionQueue.pending.next\n    if (actionQueue.pending !== null) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      runAction({\n        actionQueue,\n        action: actionQueue.pending,\n        setState,\n      })\n    } else {\n      // No more actions are pending, check if a refresh is needed\n      if (actionQueue.needsRefresh) {\n        actionQueue.needsRefresh = false\n        actionQueue.dispatch(\n          {\n            type: ACTION_REFRESH,\n            origin: window.location.origin,\n          },\n          setState\n        )\n      }\n    }\n  }\n}\n\nasync function runAction({\n  actionQueue,\n  action,\n  setState,\n}: {\n  actionQueue: AppRouterActionQueue\n  action: ActionQueueNode\n  setState: DispatchStatePromise\n}) {\n  const prevState = actionQueue.state\n\n  actionQueue.pending = action\n\n  const payload = action.payload\n  const actionResult = actionQueue.action(prevState, payload)\n\n  function handleResult(nextState: AppRouterState) {\n    // if we discarded this action, the state should also be discarded\n    if (action.discarded) {\n      return\n    }\n\n    actionQueue.state = nextState\n\n    runRemainingActions(actionQueue, setState)\n    action.resolve(nextState)\n  }\n\n  // if the action is a promise, set up a callback to resolve it\n  if (isThenable(actionResult)) {\n    actionResult.then(handleResult, (err) => {\n      runRemainingActions(actionQueue, setState)\n      action.reject(err)\n    })\n  } else {\n    handleResult(actionResult)\n  }\n}\n\nfunction dispatchAction(\n  actionQueue: AppRouterActionQueue,\n  payload: ReducerActions,\n  setState: DispatchStatePromise\n) {\n  let resolvers: {\n    resolve: (value: ReducerState) => void\n    reject: (reason: any) => void\n  } = { resolve: setState, reject: () => {} }\n\n  // most of the action types are async with the exception of restore\n  // it's important that restore is handled quickly since it's fired on the popstate event\n  // and we don't want to add any delay on a back/forward nav\n  // this only creates a promise for the async actions\n  if (payload.type !== ACTION_RESTORE) {\n    // Create the promise and assign the resolvers to the object.\n    const deferredPromise = new Promise<AppRouterState>((resolve, reject) => {\n      resolvers = { resolve, reject }\n    })\n\n    startTransition(() => {\n      // we immediately notify React of the pending promise -- the resolver is attached to the action node\n      // and will be called when the associated action promise resolves\n      setState(deferredPromise)\n    })\n  }\n\n  const newAction: ActionQueueNode = {\n    payload,\n    next: null,\n    resolve: resolvers.resolve,\n    reject: resolvers.reject,\n  }\n\n  // Check if the queue is empty\n  if (actionQueue.pending === null) {\n    // The queue is empty, so add the action and start it immediately\n    // Mark this action as the last in the queue\n    actionQueue.last = newAction\n\n    runAction({\n      actionQueue,\n      action: newAction,\n      setState,\n    })\n  } else if (\n    payload.type === ACTION_NAVIGATE ||\n    payload.type === ACTION_RESTORE\n  ) {\n    // Navigations (including back/forward) take priority over any pending actions.\n    // Mark the pending action as discarded (so the state is never applied) and start the navigation action immediately.\n    actionQueue.pending.discarded = true\n\n    // The rest of the current queue should still execute after this navigation.\n    // (Note that it can't contain any earlier navigations, because we always put those into `actionQueue.pending` by calling `runAction`)\n    newAction.next = actionQueue.pending.next\n\n    // if the pending action was a server action, mark the queue as needing a refresh once events are processed\n    if (actionQueue.pending.payload.type === ACTION_SERVER_ACTION) {\n      actionQueue.needsRefresh = true\n    }\n\n    runAction({\n      actionQueue,\n      action: newAction,\n      setState,\n    })\n  } else {\n    // The queue is not empty, so add the action to the end of the queue\n    // It will be started by runRemainingActions after the previous action finishes\n    if (actionQueue.last !== null) {\n      actionQueue.last.next = newAction\n    }\n    actionQueue.last = newAction\n  }\n}\n\nlet globalActionQueue: AppRouterActionQueue | null = null\n\nexport function createMutableActionQueue(\n  initialState: AppRouterState,\n  instrumentationHooks: ClientInstrumentationHooks | null\n): AppRouterActionQueue {\n  const actionQueue: AppRouterActionQueue = {\n    state: initialState,\n    dispatch: (payload: ReducerActions, setState: DispatchStatePromise) =>\n      dispatchAction(actionQueue, payload, setState),\n    action: async (state: AppRouterState, action: ReducerActions) => {\n      const result = reducer(state, action)\n      return result\n    },\n    pending: null,\n    last: null,\n    onRouterTransitionStart:\n      instrumentationHooks !== null &&\n      typeof instrumentationHooks.onRouterTransitionStart === 'function'\n        ? // This profiling hook will be called at the start of every navigation.\n          instrumentationHooks.onRouterTransitionStart\n        : null,\n  }\n\n  if (typeof window !== 'undefined') {\n    // The action queue is lazily created on hydration, but after that point\n    // it doesn't change. So we can store it in a global rather than pass\n    // it around everywhere via props/context.\n    if (globalActionQueue !== null) {\n      throw new Error(\n        'Internal Next.js Error: createMutableActionQueue was called more ' +\n          'than once'\n      )\n    }\n    globalActionQueue = actionQueue\n  }\n\n  return actionQueue\n}\n\nexport function getCurrentAppRouterState(): AppRouterState | null {\n  return globalActionQueue !== null ? globalActionQueue.state : null\n}\n\nfunction getAppRouterActionQueue(): AppRouterActionQueue {\n  if (globalActionQueue === null) {\n    throw new Error(\n      'Internal Next.js error: Router action dispatched before initialization.'\n    )\n  }\n  return globalActionQueue\n}\n\nfunction getProfilingHookForOnNavigationStart() {\n  if (globalActionQueue !== null) {\n    return globalActionQueue.onRouterTransitionStart\n  }\n  return null\n}\n\nexport function dispatchNavigateAction(\n  href: string,\n  navigateType: NavigateAction['navigateType'],\n  shouldScroll: boolean,\n  linkInstanceRef: LinkInstance | null\n): void {\n  // TODO: This stuff could just go into the reducer. Leaving as-is for now\n  // since we're about to rewrite all the router reducer stuff anyway.\n  const url = new URL(addBasePath(href), location.href)\n  if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n    window.next.__pendingUrl = url\n  }\n\n  setLinkForCurrentNavigation(linkInstanceRef)\n\n  const onRouterTransitionStart = getProfilingHookForOnNavigationStart()\n  if (onRouterTransitionStart !== null) {\n    onRouterTransitionStart(href, navigateType)\n  }\n\n  dispatchAppRouterAction({\n    type: ACTION_NAVIGATE,\n    url,\n    isExternalUrl: isExternalURL(url),\n    locationSearch: location.search,\n    shouldScroll,\n    navigateType,\n    allowAliasing: true,\n  })\n}\n\nexport function dispatchTraverseAction(\n  href: string,\n  tree: FlightRouterState | undefined\n) {\n  const onRouterTransitionStart = getProfilingHookForOnNavigationStart()\n  if (onRouterTransitionStart !== null) {\n    onRouterTransitionStart(href, 'traverse')\n  }\n  dispatchAppRouterAction({\n    type: ACTION_RESTORE,\n    url: new URL(href),\n    tree,\n  })\n}\n\n/**\n * The app router that is exposed through `useRouter`. These are public API\n * methods. Internal Next.js code should call the lower level methods directly\n * (although there's lots of existing code that doesn't do that).\n */\nexport const publicAppRouterInstance: AppRouterInstance = {\n  back: () => window.history.back(),\n  forward: () => window.history.forward(),\n  prefetch: process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? // Unlike the old implementation, the Segment Cache doesn't store its\n      // data in the router reducer state; it writes into a global mutable\n      // cache. So we don't need to dispatch an action.\n      (href: string, options?: PrefetchOptions) => {\n        const actionQueue = getAppRouterActionQueue()\n        prefetchWithSegmentCache(\n          href,\n          actionQueue.state.nextUrl,\n          actionQueue.state.tree,\n          options?.kind === PrefetchKind.FULL,\n          options?.onInvalidate ?? null\n        )\n      }\n    : (href: string, options?: PrefetchOptions) => {\n        // Use the old prefetch implementation.\n        const actionQueue = getAppRouterActionQueue()\n        const url = createPrefetchURL(href)\n        if (url !== null) {\n          // The prefetch reducer doesn't actually update any state or\n          // trigger a rerender. It just writes to a mutable cache. So we\n          // shouldn't bother calling setState/dispatch; we can just re-run\n          // the reducer directly using the current state.\n          // TODO: Refactor this away from a \"reducer\" so it's\n          // less confusing.\n          prefetchReducer(actionQueue.state, {\n            type: ACTION_PREFETCH,\n            url,\n            kind: options?.kind ?? PrefetchKind.FULL,\n          })\n        }\n      },\n  replace: (href: string, options?: NavigateOptions) => {\n    startTransition(() => {\n      dispatchNavigateAction(href, 'replace', options?.scroll ?? true, null)\n    })\n  },\n  push: (href: string, options?: NavigateOptions) => {\n    startTransition(() => {\n      dispatchNavigateAction(href, 'push', options?.scroll ?? true, null)\n    })\n  },\n  refresh: () => {\n    startTransition(() => {\n      dispatchAppRouterAction({\n        type: ACTION_REFRESH,\n        origin: window.location.origin,\n      })\n    })\n  },\n  hmrRefresh: () => {\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'hmrRefresh can only be used in development mode. Please use refresh instead.'\n      )\n    } else {\n      startTransition(() => {\n        dispatchAppRouterAction({\n          type: ACTION_HMR_REFRESH,\n          origin: window.location.origin,\n        })\n      })\n    }\n  },\n}\n\n// Exists for debugging purposes. Don't use in application code.\nif (typeof window !== 'undefined' && window.next) {\n  window.next.router = publicAppRouterInstance\n}\n","import type { Segment } from '../../server/app-render/types'\n\nexport function isGroupSegment(segment: string) {\n  // Use array[0] for performant purpose\n  return segment[0] === '(' && segment.endsWith(')')\n}\n\nexport function isParallelRouteSegment(segment: string) {\n  return segment.startsWith('@') && segment !== '@children'\n}\n\nexport function addSearchParamsIfPageSegment(\n  segment: Segment,\n  searchParams: Record<string, string | string[] | undefined>\n) {\n  const isPageSegment = segment.includes(PAGE_SEGMENT_KEY)\n\n  if (isPageSegment) {\n    const stringifiedQuery = JSON.stringify(searchParams)\n    return stringifiedQuery !== '{}'\n      ? PAGE_SEGMENT_KEY + '?' + stringifiedQuery\n      : PAGE_SEGMENT_KEY\n  }\n\n  return segment\n}\n\nexport const PAGE_SEGMENT_KEY = '__PAGE__'\nexport const DEFAULT_SEGMENT_KEY = '__DEFAULT__'\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use client'\n\nimport { HandleISRError } from '../handle-isr-error'\n\nconst styles = {\n  error: {\n    // https://github.com/sindresorhus/modern-normalize/blob/main/modern-normalize.css#L38-L52\n    fontFamily:\n      'system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"',\n    height: '100vh',\n    textAlign: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: '14px',\n    fontWeight: 400,\n    lineHeight: '28px',\n    margin: '0 8px',\n  },\n} as const\n\nexport type GlobalErrorComponent = React.ComponentType<{\n  error: any\n}>\nfunction DefaultGlobalError({ error }: { error: any }) {\n  const digest: string | undefined = error?.digest\n  return (\n    <html id=\"__next_error__\">\n      <head></head>\n      <body>\n        <HandleISRError error={error} />\n        <div style={styles.error}>\n          <div>\n            <h2 style={styles.text}>\n              Application error: a {digest ? 'server' : 'client'}-side exception\n              has occurred while loading {window.location.hostname} (see the{' '}\n              {digest ? 'server logs' : 'browser console'} for more\n              information).\n            </h2>\n            {digest ? <p style={styles.text}>{`Digest: ${digest}`}</p> : null}\n          </div>\n        </div>\n      </body>\n    </html>\n  )\n}\n\n// Exported so that the import signature in the loaders can be identical to user\n// supplied custom global error signatures.\nexport default DefaultGlobalError\n","export enum RedirectStatusCode {\n  SeeOther = 303,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n}\n","export interface ServerReferenceInfo {\n  type: 'server-action' | 'use-cache'\n  usedArgs: [boolean, boolean, boolean, boolean, boolean, boolean]\n  hasRestArgs: boolean\n}\n\n/**\n * Extracts info about the server reference for the given server reference ID by\n * parsing the first byte of the hex-encoded ID.\n *\n * ```\n * Bit positions: [7]      [6] [5] [4] [3] [2] [1]  [0]\n * Bits:          typeBit  argMask                  restArgs\n * ```\n *\n * If the `typeBit` is `1` the server reference represents a `\"use cache\"`\n * function, otherwise a server action.\n *\n * The `argMask` encodes whether the function uses the argument at the\n * respective position.\n *\n * The `restArgs` bit indicates whether the function uses a rest parameter. It's\n * also set to 1 if the function has more than 6 args.\n *\n * @param id hex-encoded server reference ID\n */\nexport function extractInfoFromServerReferenceId(\n  id: string\n): ServerReferenceInfo {\n  const infoByte = parseInt(id.slice(0, 2), 16)\n  const typeBit = (infoByte >> 7) & 0x1\n  const argMask = (infoByte >> 1) & 0x3f\n  const restArgs = infoByte & 0x1\n  const usedArgs = Array(6)\n\n  for (let index = 0; index < 6; index++) {\n    const bitPosition = 5 - index\n    const bit = (argMask >> bitPosition) & 0x1\n    usedArgs[index] = bit === 1\n  }\n\n  return {\n    type: typeBit === 1 ? 'use-cache' : 'server-action',\n    usedArgs: usedArgs as [\n      boolean,\n      boolean,\n      boolean,\n      boolean,\n      boolean,\n      boolean,\n    ],\n    hasRestArgs: restArgs === 1,\n  }\n}\n\n/**\n * Creates a sparse array containing only the used arguments based on the\n * provided action info.\n */\nexport function omitUnusedArgs(\n  args: unknown[],\n  info: ServerReferenceInfo\n): unknown[] {\n  const filteredArgs = new Array(args.length)\n\n  for (let index = 0; index < args.length; index++) {\n    if (\n      (index < 6 && info.usedArgs[index]) ||\n      // This assumes that the server reference info byte has the restArgs bit\n      // set to 1 if there are more than 6 args.\n      (index >= 6 && info.hasRestArgs)\n    ) {\n      filteredArgs[index] = args[index]\n    }\n  }\n\n  return filteredArgs\n}\n","export class InvariantError extends Error {\n  constructor(message: string, options?: ErrorOptions) {\n    super(\n      `Invariant: ${message.endsWith('.') ? message : message + '.'} This is a bug in Next.js.`,\n      options\n    )\n    this.name = 'InvariantError'\n  }\n}\n","(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();","import type {\n  CacheNodeSeedData,\n  FlightData,\n  FlightDataPath,\n  FlightRouterState,\n  FlightSegmentPath,\n  Segment,\n} from '../server/app-render/types'\nimport type { HeadData } from '../shared/lib/app-router-context.shared-runtime'\nimport { PAGE_SEGMENT_KEY } from '../shared/lib/segment'\n\nexport type NormalizedFlightData = {\n  /**\n   * The full `FlightSegmentPath` inclusive of the final `Segment`\n   */\n  segmentPath: FlightSegmentPath\n  /**\n   * The `FlightSegmentPath` exclusive of the final `Segment`\n   */\n  pathToSegment: FlightSegmentPath\n  segment: Segment\n  tree: FlightRouterState\n  seedData: CacheNodeSeedData | null\n  head: HeadData\n  isHeadPartial: boolean\n  isRootRender: boolean\n}\n\n// TODO: We should only have to export `normalizeFlightData`, however because the initial flight data\n// that gets passed to `createInitialRouterState` doesn't conform to the `FlightDataPath` type (it's missing the root segment)\n// we're currently exporting it so we can use it directly. This should be fixed as part of the unification of\n// the different ways we express `FlightSegmentPath`.\nexport function getFlightDataPartsFromPath(\n  flightDataPath: FlightDataPath\n): NormalizedFlightData {\n  // Pick the last 4 items from the `FlightDataPath` to get the [tree, seedData, viewport, isHeadPartial].\n  const flightDataPathLength = 4\n  // tree, seedData, and head are *always* the last three items in the `FlightDataPath`.\n  const [tree, seedData, head, isHeadPartial] =\n    flightDataPath.slice(-flightDataPathLength)\n  // The `FlightSegmentPath` is everything except the last three items. For a root render, it won't be present.\n  const segmentPath = flightDataPath.slice(0, -flightDataPathLength)\n\n  return {\n    // TODO: Unify these two segment path helpers. We are inconsistently pushing an empty segment (\"\")\n    // to the start of the segment path in some places which makes it hard to use solely the segment path.\n    // Look for \"// TODO-APP: remove ''\" in the codebase.\n    pathToSegment: segmentPath.slice(0, -1),\n    segmentPath,\n    // if the `FlightDataPath` corresponds with the root, there'll be no segment path,\n    // in which case we default to ''.\n    segment: segmentPath[segmentPath.length - 1] ?? '',\n    tree,\n    seedData,\n    head,\n    isHeadPartial,\n    isRootRender: flightDataPath.length === flightDataPathLength,\n  }\n}\n\nexport function getNextFlightSegmentPath(\n  flightSegmentPath: FlightSegmentPath\n): FlightSegmentPath {\n  // Since `FlightSegmentPath` is a repeated tuple of `Segment` and `ParallelRouteKey`, we slice off two items\n  // to get the next segment path.\n  return flightSegmentPath.slice(2)\n}\n\nexport function normalizeFlightData(\n  flightData: FlightData\n): NormalizedFlightData[] | string {\n  // FlightData can be a string when the server didn't respond with a proper flight response,\n  // or when a redirect happens, to signal to the client that it needs to perform an MPA navigation.\n  if (typeof flightData === 'string') {\n    return flightData\n  }\n\n  return flightData.map(getFlightDataPartsFromPath)\n}\n\n/**\n * This function is used to prepare the flight router state for the request.\n * It removes markers that are not needed by the server, and are purely used\n * for stashing state on the client.\n * @param flightRouterState - The flight router state to prepare.\n * @param isHmrRefresh - Whether this is an HMR refresh request.\n * @returns The prepared flight router state.\n */\nexport function prepareFlightRouterStateForRequest(\n  flightRouterState: FlightRouterState,\n  isHmrRefresh?: boolean\n): string {\n  // HMR requests need the complete, unmodified state for proper functionality\n  if (isHmrRefresh) {\n    return encodeURIComponent(JSON.stringify(flightRouterState))\n  }\n\n  return encodeURIComponent(\n    JSON.stringify(stripClientOnlyDataFromFlightRouterState(flightRouterState))\n  )\n}\n\n/**\n * Recursively strips client-only data from FlightRouterState while preserving\n * server-needed information for proper rendering decisions.\n */\nfunction stripClientOnlyDataFromFlightRouterState(\n  flightRouterState: FlightRouterState\n): FlightRouterState {\n  const [\n    segment,\n    parallelRoutes,\n    _url, // Intentionally unused - URLs are client-only\n    refreshMarker,\n    isRootLayout,\n    hasLoadingBoundary,\n  ] = flightRouterState\n\n  // __PAGE__ segments are always fetched from the server, so there's\n  // no need to send them up\n  const cleanedSegment = stripSearchParamsFromPageSegment(segment)\n\n  // Recursively process parallel routes\n  const cleanedParallelRoutes: { [key: string]: FlightRouterState } = {}\n  for (const [key, childState] of Object.entries(parallelRoutes)) {\n    cleanedParallelRoutes[key] =\n      stripClientOnlyDataFromFlightRouterState(childState)\n  }\n\n  const result: FlightRouterState = [\n    cleanedSegment,\n    cleanedParallelRoutes,\n    null, // URLs omitted - server reconstructs paths from segments\n    shouldPreserveRefreshMarker(refreshMarker) ? refreshMarker : null,\n  ]\n\n  // Append optional fields if present\n  if (isRootLayout !== undefined) {\n    result[4] = isRootLayout\n  }\n  if (hasLoadingBoundary !== undefined) {\n    result[5] = hasLoadingBoundary\n  }\n\n  return result\n}\n\n/**\n * Strips search parameters from __PAGE__ segments to prevent sensitive\n * client-side data from being sent to the server.\n */\nfunction stripSearchParamsFromPageSegment(segment: Segment): Segment {\n  if (\n    typeof segment === 'string' &&\n    segment.startsWith(PAGE_SEGMENT_KEY + '?')\n  ) {\n    return PAGE_SEGMENT_KEY\n  }\n  return segment\n}\n\n/**\n * Determines whether the refresh marker should be sent to the server\n * Client-only markers like 'refresh' are stripped, while server-needed markers\n * like 'refetch' and 'inside-shared-layout' are preserved.\n */\nfunction shouldPreserveRefreshMarker(\n  refreshMarker: FlightRouterState[3]\n): boolean {\n  return Boolean(refreshMarker && refreshMarker !== 'refresh')\n}\n","import type {\n  ActionFlightResponse,\n  ActionResult,\n} from '../../../../server/app-render/types'\nimport { callServer } from '../../../app-call-server'\nimport { findSourceMapURL } from '../../../app-find-source-map-url'\nimport {\n  ACTION_HEADER,\n  NEXT_ACTION_NOT_FOUND_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  RSC_CONTENT_TYPE_HEADER,\n} from '../../app-router-headers'\n\n// TODO: Explicitly import from client.browser\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  createFromFetch as createFromFetchBrowser,\n  createTemporaryReferenceSet,\n  encodeReply,\n} from 'react-server-dom-webpack/client'\n\nimport {\n  PrefetchKind,\n  type ReadonlyReducerState,\n  type ReducerState,\n  type ServerActionAction,\n  type ServerActionMutable,\n} from '../router-reducer-types'\nimport { assignLocation } from '../../../assign-location'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { handleExternalUrl } from './navigate-reducer'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport { handleMutable } from '../handle-mutable'\nimport { fillLazyItemsTillLeafWithHead } from '../fill-lazy-items-till-leaf-with-head'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { hasInterceptionRouteInCurrentTree } from './has-interception-route-in-current-tree'\nimport { handleSegmentMismatch } from '../handle-segment-mismatch'\nimport { refreshInactiveParallelSegments } from '../refetch-inactive-parallel-segments'\nimport {\n  normalizeFlightData,\n  prepareFlightRouterStateForRequest,\n  type NormalizedFlightData,\n} from '../../../flight-data-helpers'\nimport { getRedirectError } from '../../redirect'\nimport { RedirectType } from '../../redirect-error'\nimport { createSeededPrefetchCacheEntry } from '../prefetch-cache-utils'\nimport { removeBasePath } from '../../../remove-base-path'\nimport { hasBasePath } from '../../../has-base-path'\nimport {\n  extractInfoFromServerReferenceId,\n  omitUnusedArgs,\n} from '../../../../shared/lib/server-reference-info'\nimport { revalidateEntireCache } from '../../segment-cache'\n\nconst createFromFetch =\n  createFromFetchBrowser as (typeof import('react-server-dom-webpack/client.browser'))['createFromFetch']\n\ntype FetchServerActionResult = {\n  redirectLocation: URL | undefined\n  redirectType: RedirectType | undefined\n  actionResult: ActionResult | undefined\n  actionFlightData: NormalizedFlightData[] | string | undefined\n  isPrerender: boolean\n  revalidatedParts: {\n    tag: boolean\n    cookie: boolean\n    paths: string[]\n  }\n}\n\nasync function fetchServerAction(\n  state: ReadonlyReducerState,\n  nextUrl: ReadonlyReducerState['nextUrl'],\n  { actionId, actionArgs }: ServerActionAction\n): Promise<FetchServerActionResult> {\n  const temporaryReferences = createTemporaryReferenceSet()\n  const info = extractInfoFromServerReferenceId(actionId)\n\n  // TODO: Currently, we're only omitting unused args for the experimental \"use\n  // cache\" functions. Once the server reference info byte feature is stable, we\n  // should apply this to server actions as well.\n  const usedArgs =\n    info.type === 'use-cache' ? omitUnusedArgs(actionArgs, info) : actionArgs\n\n  const body = await encodeReply(usedArgs, { temporaryReferences })\n\n  const res = await fetch(state.canonicalUrl, {\n    method: 'POST',\n    headers: {\n      Accept: RSC_CONTENT_TYPE_HEADER,\n      [ACTION_HEADER]: actionId,\n      [NEXT_ROUTER_STATE_TREE_HEADER]: prepareFlightRouterStateForRequest(\n        state.tree\n      ),\n      ...(process.env.NEXT_DEPLOYMENT_ID\n        ? {\n            'x-deployment-id': process.env.NEXT_DEPLOYMENT_ID,\n          }\n        : {}),\n      ...(nextUrl\n        ? {\n            [NEXT_URL]: nextUrl,\n          }\n        : {}),\n    },\n    body,\n  })\n\n  // Handle server actions that the server didn't recognize.\n  const unrecognizedActionHeader = res.headers.get(NEXT_ACTION_NOT_FOUND_HEADER)\n  if (unrecognizedActionHeader === '1') {\n    throw new Error(\n      `Server Action \"${actionId}\" was not found on the server. \\nRead more: https://nextjs.org/docs/messages/failed-to-find-server-action`\n    )\n  }\n\n  const redirectHeader = res.headers.get('x-action-redirect')\n  const [location, _redirectType] = redirectHeader?.split(';') || []\n  let redirectType: RedirectType | undefined\n  switch (_redirectType) {\n    case 'push':\n      redirectType = RedirectType.push\n      break\n    case 'replace':\n      redirectType = RedirectType.replace\n      break\n    default:\n      redirectType = undefined\n  }\n\n  const isPrerender = !!res.headers.get(NEXT_IS_PRERENDER_HEADER)\n  let revalidatedParts: FetchServerActionResult['revalidatedParts']\n  try {\n    const revalidatedHeader = JSON.parse(\n      res.headers.get('x-action-revalidated') || '[[],0,0]'\n    )\n    revalidatedParts = {\n      paths: revalidatedHeader[0] || [],\n      tag: !!revalidatedHeader[1],\n      cookie: revalidatedHeader[2],\n    }\n  } catch (e) {\n    revalidatedParts = NO_REVALIDATED_PARTS\n  }\n\n  const redirectLocation = location\n    ? assignLocation(\n        location,\n        new URL(state.canonicalUrl, window.location.href)\n      )\n    : undefined\n\n  const contentType = res.headers.get('content-type')\n  const isRscResponse = !!(\n    contentType && contentType.startsWith(RSC_CONTENT_TYPE_HEADER)\n  )\n\n  // Handle invalid server action responses.\n  // A valid response must have `content-type: text/x-component`, unless it's an external redirect.\n  // (external redirects have an 'x-action-redirect' header, but the body is an empty 'text/plain')\n  if (!isRscResponse && !redirectLocation) {\n    // The server can respond with a text/plain error message, but we'll fallback to something generic\n    // if there isn't one.\n    const message =\n      res.status >= 400 && contentType === 'text/plain'\n        ? await res.text()\n        : 'An unexpected response was received from the server.'\n\n    throw new Error(message)\n  }\n\n  let actionResult: FetchServerActionResult['actionResult']\n  let actionFlightData: FetchServerActionResult['actionFlightData']\n  if (isRscResponse) {\n    const response: ActionFlightResponse = await createFromFetch(\n      Promise.resolve(res),\n      { callServer, findSourceMapURL, temporaryReferences }\n    )\n    // An internal redirect can send an RSC response, but does not have a useful `actionResult`.\n    actionResult = redirectLocation ? undefined : response.a\n    actionFlightData = normalizeFlightData(response.f)\n  } else {\n    // An external redirect doesn't contain RSC data.\n    actionResult = undefined\n    actionFlightData = undefined\n  }\n\n  return {\n    actionResult,\n    actionFlightData,\n    redirectLocation,\n    redirectType,\n    revalidatedParts,\n    isPrerender,\n  }\n}\n\nconst NO_REVALIDATED_PARTS = {\n  paths: [],\n  tag: false,\n  cookie: false,\n}\n\n/*\n * This reducer is responsible for calling the server action and processing any side-effects from the server action.\n * It does not mutate the state by itself but rather delegates to other reducers to do the actual mutation.\n */\nexport function serverActionReducer(\n  state: ReadonlyReducerState,\n  action: ServerActionAction\n): ReducerState {\n  const { resolve, reject } = action\n  const mutable: ServerActionMutable = {}\n\n  let currentTree = state.tree\n\n  mutable.preserveCustomHistoryState = false\n\n  // only pass along the `nextUrl` param (used for interception routes) if the current route was intercepted.\n  // If the route has been intercepted, the action should be as well.\n  // Otherwise the server action might be intercepted with the wrong action id\n  // (ie, one that corresponds with the intercepted route)\n  const nextUrl =\n    state.nextUrl && hasInterceptionRouteInCurrentTree(state.tree)\n      ? state.nextUrl\n      : null\n\n  const navigatedAt = Date.now()\n\n  return fetchServerAction(state, nextUrl, action).then(\n    async ({\n      actionResult,\n      actionFlightData: flightData,\n      redirectLocation,\n      redirectType,\n      isPrerender,\n      revalidatedParts,\n    }) => {\n      let redirectHref: string | undefined\n\n      // honor the redirect type instead of defaulting to push in case of server actions.\n      if (redirectLocation) {\n        if (redirectType === RedirectType.replace) {\n          state.pushRef.pendingPush = false\n          mutable.pendingPush = false\n        } else {\n          state.pushRef.pendingPush = true\n          mutable.pendingPush = true\n        }\n\n        redirectHref = createHrefFromUrl(redirectLocation, false)\n        mutable.canonicalUrl = redirectHref\n      }\n\n      if (!flightData) {\n        resolve(actionResult)\n\n        // If there is a redirect but no flight data we need to do a mpaNavigation.\n        if (redirectLocation) {\n          return handleExternalUrl(\n            state,\n            mutable,\n            redirectLocation.href,\n            state.pushRef.pendingPush\n          )\n        }\n        return state\n      }\n\n      if (typeof flightData === 'string') {\n        // Handle case when navigating to page in `pages` from `app`\n        resolve(actionResult)\n\n        return handleExternalUrl(\n          state,\n          mutable,\n          flightData,\n          state.pushRef.pendingPush\n        )\n      }\n\n      const actionRevalidated =\n        revalidatedParts.paths.length > 0 ||\n        revalidatedParts.tag ||\n        revalidatedParts.cookie\n\n      for (const normalizedFlightData of flightData) {\n        const {\n          tree: treePatch,\n          seedData: cacheNodeSeedData,\n          head,\n          isRootRender,\n        } = normalizedFlightData\n\n        if (!isRootRender) {\n          // TODO-APP: handle this case better\n          console.log('SERVER ACTION APPLY FAILED')\n          resolve(actionResult)\n\n          return state\n        }\n\n        // Given the path can only have two items the items are only the router state and rsc for the root.\n        const newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          [''],\n          currentTree,\n          treePatch,\n          redirectHref ? redirectHref : state.canonicalUrl\n        )\n\n        if (newTree === null) {\n          resolve(actionResult)\n\n          return handleSegmentMismatch(state, action, treePatch)\n        }\n\n        if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n          resolve(actionResult)\n\n          return handleExternalUrl(\n            state,\n            mutable,\n            redirectHref || state.canonicalUrl,\n            state.pushRef.pendingPush\n          )\n        }\n\n        // The server sent back RSC data for the server action, so we need to apply it to the cache.\n        if (cacheNodeSeedData !== null) {\n          const rsc = cacheNodeSeedData[1]\n          const cache: CacheNode = createEmptyCacheNode()\n          cache.rsc = rsc\n          cache.prefetchRsc = null\n          cache.loading = cacheNodeSeedData[3]\n          fillLazyItemsTillLeafWithHead(\n            navigatedAt,\n            cache,\n            // Existing cache is not passed in as server actions have to invalidate the entire cache.\n            undefined,\n            treePatch,\n            cacheNodeSeedData,\n            head,\n            undefined\n          )\n\n          mutable.cache = cache\n          if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n            revalidateEntireCache(state.nextUrl, newTree)\n          } else {\n            mutable.prefetchCache = new Map()\n          }\n          if (actionRevalidated) {\n            await refreshInactiveParallelSegments({\n              navigatedAt,\n              state,\n              updatedTree: newTree,\n              updatedCache: cache,\n              includeNextUrl: Boolean(nextUrl),\n              canonicalUrl: mutable.canonicalUrl || state.canonicalUrl,\n            })\n          }\n        }\n\n        mutable.patchedTree = newTree\n        currentTree = newTree\n      }\n\n      if (redirectLocation && redirectHref) {\n        if (!process.env.__NEXT_CLIENT_SEGMENT_CACHE && !actionRevalidated) {\n          // Because the RedirectBoundary will trigger a navigation, we need to seed the prefetch cache\n          // with the FlightData that we got from the server action for the target page, so that it's\n          // available when the page is navigated to and doesn't need to be re-fetched.\n          // We only do this if the server action didn't revalidate any data, as in that case the\n          // client cache will be cleared and the data will be re-fetched anyway.\n          // NOTE: We don't do this in the Segment Cache implementation.\n          // Dynamic data should never be placed into the cache, unless it's\n          // \"converted\" to static data using <Link prefetch={true}>. What we\n          // do instead is re-prefetch links and forms whenever the cache is\n          // invalidated.\n          createSeededPrefetchCacheEntry({\n            url: redirectLocation,\n            data: {\n              flightData,\n              canonicalUrl: undefined,\n              couldBeIntercepted: false,\n              prerendered: false,\n              postponed: false,\n              // TODO: We should be able to set this if the server action\n              // returned a fully static response.\n              staleTime: -1,\n            },\n            tree: state.tree,\n            prefetchCache: state.prefetchCache,\n            nextUrl: state.nextUrl,\n            kind: isPrerender ? PrefetchKind.FULL : PrefetchKind.AUTO,\n          })\n          mutable.prefetchCache = state.prefetchCache\n        }\n\n        // If the action triggered a redirect, the action promise will be rejected with\n        // a redirect so that it's handled by RedirectBoundary as we won't have a valid\n        // action result to resolve the promise with. This will effectively reset the state of\n        // the component that called the action as the error boundary will remount the tree.\n        // The status code doesn't matter here as the action handler will have already sent\n        // a response with the correct status code.\n        reject(\n          getRedirectError(\n            hasBasePath(redirectHref)\n              ? removeBasePath(redirectHref)\n              : redirectHref,\n            redirectType || RedirectType.push\n          )\n        )\n      } else {\n        resolve(actionResult)\n      }\n\n      return handleMutable(state, mutable)\n    },\n    (e: any) => {\n      // When the server action is rejected we don't update the state and instead call the reject handler of the promise.\n      reject(e)\n\n      return state\n    }\n  )\n}\n","'use client'\n\nimport React, { useContext, type JSX } from 'react'\nimport { TemplateContext } from '../../shared/lib/app-router-context.shared-runtime'\n\nexport default function RenderFromTemplateContext(): JSX.Element {\n  const children = useContext(TemplateContext)\n  return <>{children}</>\n}\n","'use client'\n\nimport React, {\n  useEffect,\n  useMemo,\n  startTransition,\n  useInsertionEffect,\n  useDeferredValue,\n} from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  GlobalLayoutRouterContext,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport type { CacheNode } from '../../shared/lib/app-router-context.shared-runtime'\nimport { ACTION_RESTORE } from './router-reducer/router-reducer-types'\nimport type { AppRouterState } from './router-reducer/router-reducer-types'\nimport { createHrefFromUrl } from './router-reducer/create-href-from-url'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport { dispatchAppRouterAction, useActionQueue } from './use-action-queue'\nimport { ErrorBoundary } from './error-boundary'\nimport DefaultGlobalError from './builtin/global-error'\nimport { isBot } from '../../shared/lib/router/utils/is-bot'\nimport { addBasePath } from '../add-base-path'\nimport { AppRouterAnnouncer } from './app-router-announcer'\nimport { RedirectBoundary } from './redirect-boundary'\nimport { findHeadInCache } from './router-reducer/reducers/find-head-in-cache'\nimport { unresolvedThenable } from './unresolved-thenable'\nimport { removeBasePath } from '../remove-base-path'\nimport { hasBasePath } from '../has-base-path'\nimport { getSelectedParams } from './router-reducer/compute-changed-path'\nimport type { FlightRouterState } from '../../server/app-render/types'\nimport { useNavFailureHandler } from './nav-failure-handler'\nimport {\n  dispatchTraverseAction,\n  publicAppRouterInstance,\n  type AppRouterActionQueue,\n  type GlobalErrorState,\n} from './app-router-instance'\nimport { getRedirectTypeFromError, getURLFromRedirectError } from './redirect'\nimport { isRedirectError, RedirectType } from './redirect-error'\nimport { pingVisibleLinks } from './links'\nimport GracefulDegradeBoundary from './errors/graceful-degrade-boundary'\n\nconst globalMutable: {\n  pendingMpaPath?: string\n} = {}\n\nexport function isExternalURL(url: URL) {\n  return url.origin !== window.location.origin\n}\n\n/**\n * Given a link href, constructs the URL that should be prefetched. Returns null\n * in cases where prefetching should be disabled, like external URLs, or\n * during development.\n * @param href The href passed to <Link>, router.prefetch(), or similar\n * @returns A URL object to prefetch, or null if prefetching should be disabled\n */\nexport function createPrefetchURL(href: string): URL | null {\n  // Don't prefetch for bots as they don't navigate.\n  if (isBot(window.navigator.userAgent)) {\n    return null\n  }\n\n  let url: URL\n  try {\n    url = new URL(addBasePath(href), window.location.href)\n  } catch (_) {\n    // TODO: Does this need to throw or can we just console.error instead? Does\n    // anyone rely on this throwing? (Seems unlikely.)\n    throw new Error(\n      `Cannot prefetch '${href}' because it cannot be converted to a URL.`\n    )\n  }\n\n  // Don't prefetch during development (improves compilation performance)\n  if (process.env.NODE_ENV === 'development') {\n    return null\n  }\n\n  // External urls can't be prefetched in the same way.\n  if (isExternalURL(url)) {\n    return null\n  }\n\n  return url\n}\n\nfunction HistoryUpdater({\n  appRouterState,\n}: {\n  appRouterState: AppRouterState\n}) {\n  useInsertionEffect(() => {\n    if (process.env.__NEXT_APP_NAV_FAIL_HANDLING) {\n      // clear pending URL as navigation is no longer\n      // in flight\n      window.next.__pendingUrl = undefined\n    }\n\n    const { tree, pushRef, canonicalUrl } = appRouterState\n    const historyState = {\n      ...(pushRef.preserveCustomHistoryState ? window.history.state : {}),\n      // Identifier is shortened intentionally.\n      // __NA is used to identify if the history entry can be handled by the app-router.\n      // __N is used to identify if the history entry can be handled by the old router.\n      __NA: true,\n      __PRIVATE_NEXTJS_INTERNALS_TREE: tree,\n    }\n    if (\n      pushRef.pendingPush &&\n      // Skip pushing an additional history entry if the canonicalUrl is the same as the current url.\n      // This mirrors the browser behavior for normal navigation.\n      createHrefFromUrl(new URL(window.location.href)) !== canonicalUrl\n    ) {\n      // This intentionally mutates React state, pushRef is overwritten to ensure additional push/replace calls do not trigger an additional history entry.\n      pushRef.pendingPush = false\n      window.history.pushState(historyState, '', canonicalUrl)\n    } else {\n      window.history.replaceState(historyState, '', canonicalUrl)\n    }\n  }, [appRouterState])\n\n  useEffect(() => {\n    // The Next-Url and the base tree may affect the result of a prefetch\n    // task. Re-prefetch all visible links with the updated values. In most\n    // cases, this will not result in any new network requests, only if\n    // the prefetch result actually varies on one of these inputs.\n    if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n      pingVisibleLinks(appRouterState.nextUrl, appRouterState.tree)\n    }\n  }, [appRouterState.nextUrl, appRouterState.tree])\n\n  return null\n}\n\nexport function createEmptyCacheNode(): CacheNode {\n  return {\n    lazyData: null,\n    rsc: null,\n    prefetchRsc: null,\n    head: null,\n    prefetchHead: null,\n    parallelRoutes: new Map(),\n    loading: null,\n    navigatedAt: -1,\n  }\n}\n\nfunction copyNextJsInternalHistoryState(data: any) {\n  if (data == null) data = {}\n  const currentState = window.history.state\n  const __NA = currentState?.__NA\n  if (__NA) {\n    data.__NA = __NA\n  }\n  const __PRIVATE_NEXTJS_INTERNALS_TREE =\n    currentState?.__PRIVATE_NEXTJS_INTERNALS_TREE\n  if (__PRIVATE_NEXTJS_INTERNALS_TREE) {\n    data.__PRIVATE_NEXTJS_INTERNALS_TREE = __PRIVATE_NEXTJS_INTERNALS_TREE\n  }\n\n  return data\n}\n\nfunction Head({\n  headCacheNode,\n}: {\n  headCacheNode: CacheNode | null\n}): React.ReactNode {\n  // If this segment has a `prefetchHead`, it's the statically prefetched data.\n  // We should use that on initial render instead of `head`. Then we'll switch\n  // to `head` when the dynamic response streams in.\n  const head = headCacheNode !== null ? headCacheNode.head : null\n  const prefetchHead =\n    headCacheNode !== null ? headCacheNode.prefetchHead : null\n\n  // If no prefetch data is available, then we go straight to rendering `head`.\n  const resolvedPrefetchRsc = prefetchHead !== null ? prefetchHead : head\n\n  // We use `useDeferredValue` to handle switching between the prefetched and\n  // final values. The second argument is returned on initial render, then it\n  // re-renders with the first argument.\n  return useDeferredValue(head, resolvedPrefetchRsc)\n}\n\n/**\n * The global router that wraps the application components.\n */\nfunction Router({\n  actionQueue,\n  assetPrefix,\n  globalError,\n  gracefullyDegrade,\n}: {\n  actionQueue: AppRouterActionQueue\n  assetPrefix: string\n  globalError: GlobalErrorState\n  gracefullyDegrade: boolean\n}) {\n  const state = useActionQueue(actionQueue)\n  const { canonicalUrl } = state\n  // Add memoized pathname/query for useSearchParams and usePathname.\n  const { searchParams, pathname } = useMemo(() => {\n    const url = new URL(\n      canonicalUrl,\n      typeof window === 'undefined' ? 'http://n' : window.location.href\n    )\n\n    return {\n      // This is turned into a readonly class in `useSearchParams`\n      searchParams: url.searchParams,\n      pathname: hasBasePath(url.pathname)\n        ? removeBasePath(url.pathname)\n        : url.pathname,\n    }\n  }, [canonicalUrl])\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { cache, prefetchCache, tree } = state\n\n    // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      // Add `window.nd` for debugging purposes.\n      // This is not meant for use in applications as concurrent rendering will affect the cache/tree/router.\n      // @ts-ignore this is for debugging\n      window.nd = {\n        router: publicAppRouterInstance,\n        cache,\n        prefetchCache,\n        tree,\n      }\n    }, [cache, prefetchCache, tree])\n  }\n\n  useEffect(() => {\n    // If the app is restored from bfcache, it's possible that\n    // pushRef.mpaNavigation is true, which would mean that any re-render of this component\n    // would trigger the mpa navigation logic again from the lines below.\n    // This will restore the router to the initial state in the event that the app is restored from bfcache.\n    function handlePageShow(event: PageTransitionEvent) {\n      if (\n        !event.persisted ||\n        !window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n      ) {\n        return\n      }\n\n      // Clear the pendingMpaPath value so that a subsequent MPA navigation to the same URL can be triggered.\n      // This is necessary because if the browser restored from bfcache, the pendingMpaPath would still be set to the value\n      // of the last MPA navigation.\n      globalMutable.pendingMpaPath = undefined\n\n      dispatchAppRouterAction({\n        type: ACTION_RESTORE,\n        url: new URL(window.location.href),\n        tree: window.history.state.__PRIVATE_NEXTJS_INTERNALS_TREE,\n      })\n    }\n\n    window.addEventListener('pageshow', handlePageShow)\n\n    return () => {\n      window.removeEventListener('pageshow', handlePageShow)\n    }\n  }, [])\n\n  useEffect(() => {\n    // Ensure that any redirect errors that bubble up outside of the RedirectBoundary\n    // are caught and handled by the router.\n    function handleUnhandledRedirect(\n      event: ErrorEvent | PromiseRejectionEvent\n    ) {\n      const error = 'reason' in event ? event.reason : event.error\n      if (isRedirectError(error)) {\n        event.preventDefault()\n        const url = getURLFromRedirectError(error)\n        const redirectType = getRedirectTypeFromError(error)\n        // TODO: This should access the router methods directly, rather than\n        // go through the public interface.\n        if (redirectType === RedirectType.push) {\n          publicAppRouterInstance.push(url, {})\n        } else {\n          publicAppRouterInstance.replace(url, {})\n        }\n      }\n    }\n    window.addEventListener('error', handleUnhandledRedirect)\n    window.addEventListener('unhandledrejection', handleUnhandledRedirect)\n\n    return () => {\n      window.removeEventListener('error', handleUnhandledRedirect)\n      window.removeEventListener('unhandledrejection', handleUnhandledRedirect)\n    }\n  }, [])\n\n  // When mpaNavigation flag is set do a hard navigation to the new url.\n  // Infinitely suspend because we don't actually want to rerender any child\n  // components with the new URL and any entangled state updates shouldn't\n  // commit either (eg: useTransition isPending should stay true until the page\n  // unloads).\n  //\n  // This is a side effect in render. Don't try this at home, kids. It's\n  // probably safe because we know this is a singleton component and it's never\n  // in <Offscreen>. At least I hope so. (It will run twice in dev strict mode,\n  // but that's... fine?)\n  const { pushRef } = state\n  if (pushRef.mpaNavigation) {\n    // if there's a re-render, we don't want to trigger another redirect if one is already in flight to the same URL\n    if (globalMutable.pendingMpaPath !== canonicalUrl) {\n      const location = window.location\n      if (pushRef.pendingPush) {\n        location.assign(canonicalUrl)\n      } else {\n        location.replace(canonicalUrl)\n      }\n\n      globalMutable.pendingMpaPath = canonicalUrl\n    }\n    // TODO-APP: Should we listen to navigateerror here to catch failed\n    // navigations somehow? And should we call window.stop() if a SPA navigation\n    // should interrupt an MPA one?\n    // NOTE: This is intentionally using `throw` instead of `use` because we're\n    // inside an externally mutable condition (pushRef.mpaNavigation), which\n    // violates the rules of hooks.\n    throw unresolvedThenable\n  }\n\n  useEffect(() => {\n    const originalPushState = window.history.pushState.bind(window.history)\n    const originalReplaceState = window.history.replaceState.bind(\n      window.history\n    )\n\n    // Ensure the canonical URL in the Next.js Router is updated when the URL is changed so that `usePathname` and `useSearchParams` hold the pushed values.\n    const applyUrlFromHistoryPushReplace = (\n      url: string | URL | null | undefined\n    ) => {\n      const href = window.location.href\n      const tree: FlightRouterState | undefined =\n        window.history.state?.__PRIVATE_NEXTJS_INTERNALS_TREE\n\n      startTransition(() => {\n        dispatchAppRouterAction({\n          type: ACTION_RESTORE,\n          url: new URL(url ?? href, href),\n          tree,\n        })\n      })\n    }\n\n    /**\n     * Patch pushState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.pushState = function pushState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalPushState(data, _unused, url)\n      }\n\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n\n      return originalPushState(data, _unused, url)\n    }\n\n    /**\n     * Patch replaceState to ensure external changes to the history are reflected in the Next.js Router.\n     * Ensures Next.js internal history state is copied to the new history entry.\n     * Ensures usePathname and useSearchParams hold the newly provided url.\n     */\n    window.history.replaceState = function replaceState(\n      data: any,\n      _unused: string,\n      url?: string | URL | null\n    ): void {\n      // Avoid a loop when Next.js internals trigger pushState/replaceState\n      if (data?.__NA || data?._N) {\n        return originalReplaceState(data, _unused, url)\n      }\n      data = copyNextJsInternalHistoryState(data)\n\n      if (url) {\n        applyUrlFromHistoryPushReplace(url)\n      }\n      return originalReplaceState(data, _unused, url)\n    }\n\n    /**\n     * Handle popstate event, this is used to handle back/forward in the browser.\n     * By default dispatches ACTION_RESTORE, however if the history entry was not pushed/replaced by app-router it will reload the page.\n     * That case can happen when the old router injected the history entry.\n     */\n    const onPopState = (event: PopStateEvent) => {\n      if (!event.state) {\n        // TODO-APP: this case only happens when pushState/replaceState was called outside of Next.js. It should probably reload the page in this case.\n        return\n      }\n\n      // This case happens when the history entry was pushed by the `pages` router.\n      if (!event.state.__NA) {\n        window.location.reload()\n        return\n      }\n\n      // TODO-APP: Ideally the back button should not use startTransition as it should apply the updates synchronously\n      // Without startTransition works if the cache is there for this path\n      startTransition(() => {\n        dispatchTraverseAction(\n          window.location.href,\n          event.state.__PRIVATE_NEXTJS_INTERNALS_TREE\n        )\n      })\n    }\n\n    // Register popstate event to call onPopstate.\n    window.addEventListener('popstate', onPopState)\n    return () => {\n      window.history.pushState = originalPushState\n      window.history.replaceState = originalReplaceState\n      window.removeEventListener('popstate', onPopState)\n    }\n  }, [])\n\n  const { cache, tree, nextUrl, focusAndScrollRef } = state\n\n  const matchingHead = useMemo(() => {\n    return findHeadInCache(cache, tree[1])\n  }, [cache, tree])\n\n  // Add memoized pathParams for useParams.\n  const pathParams = useMemo(() => {\n    return getSelectedParams(tree)\n  }, [tree])\n\n  const layoutRouterContext = useMemo(() => {\n    return {\n      parentTree: tree,\n      parentCacheNode: cache,\n      parentSegmentPath: null,\n      // Root node always has `url`\n      // Provided in AppTreeContext to ensure it can be overwritten in layout-router\n      url: canonicalUrl,\n    }\n  }, [tree, cache, canonicalUrl])\n\n  const globalLayoutRouterContext = useMemo(() => {\n    return {\n      tree,\n      focusAndScrollRef,\n      nextUrl,\n    }\n  }, [tree, focusAndScrollRef, nextUrl])\n\n  let head\n  if (matchingHead !== null) {\n    // The head is wrapped in an extra component so we can use\n    // `useDeferredValue` to swap between the prefetched and final versions of\n    // the head. (This is what LayoutRouter does for segment data, too.)\n    //\n    // The `key` is used to remount the component whenever the head moves to\n    // a different segment.\n    const [headCacheNode, headKey] = matchingHead\n    head = <Head key={headKey} headCacheNode={headCacheNode} />\n  } else {\n    head = null\n  }\n\n  let content = (\n    <RedirectBoundary>\n      {head}\n      {cache.rsc}\n      <AppRouterAnnouncer tree={tree} />\n    </RedirectBoundary>\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    // In development, we apply few error boundaries and hot-reloader:\n    // - DevRootHTTPAccessFallbackBoundary: avoid using navigation API like notFound() in root layout\n    // - HotReloader:\n    //  - hot-reload the app when the code changes\n    //  - render dev overlay\n    //  - catch runtime errors and display global-error when necessary\n    if (typeof window !== 'undefined') {\n      const { DevRootHTTPAccessFallbackBoundary } =\n        require('./dev-root-http-access-fallback-boundary') as typeof import('./dev-root-http-access-fallback-boundary')\n      content = (\n        <DevRootHTTPAccessFallbackBoundary>\n          {content}\n        </DevRootHTTPAccessFallbackBoundary>\n      )\n    }\n    const HotReloader: typeof import('../dev/hot-reloader/app/hot-reloader-app').default =\n      (\n        require('../dev/hot-reloader/app/hot-reloader-app') as typeof import('../dev/hot-reloader/app/hot-reloader-app')\n      ).default\n\n    content = (\n      <HotReloader assetPrefix={assetPrefix} globalError={globalError}>\n        {content}\n      </HotReloader>\n    )\n  } else {\n    // If gracefully degrading is applied in production,\n    // leave the app as it is rather than caught by GlobalError boundary.\n    if (gracefullyDegrade) {\n      content = <GracefulDegradeBoundary>{content}</GracefulDegradeBoundary>\n    } else {\n      content = (\n        <ErrorBoundary\n          errorComponent={globalError[0]}\n          errorStyles={globalError[1]}\n        >\n          {content}\n        </ErrorBoundary>\n      )\n    }\n  }\n\n  return (\n    <>\n      <HistoryUpdater appRouterState={state} />\n      <RuntimeStyles />\n      <PathParamsContext.Provider value={pathParams}>\n        <PathnameContext.Provider value={pathname}>\n          <SearchParamsContext.Provider value={searchParams}>\n            <GlobalLayoutRouterContext.Provider\n              value={globalLayoutRouterContext}\n            >\n              {/* TODO: We should be able to remove this context. useRouter\n                  should import from app-router-instance instead. It's only\n                  necessary because useRouter is shared between Pages and\n                  App Router. We should fork that module, then remove this\n                  context provider. */}\n              <AppRouterContext.Provider value={publicAppRouterInstance}>\n                <LayoutRouterContext.Provider value={layoutRouterContext}>\n                  {content}\n                </LayoutRouterContext.Provider>\n              </AppRouterContext.Provider>\n            </GlobalLayoutRouterContext.Provider>\n          </SearchParamsContext.Provider>\n        </PathnameContext.Provider>\n      </PathParamsContext.Provider>\n    </>\n  )\n}\n\nexport default function AppRouter({\n  actionQueue,\n  globalErrorState,\n  assetPrefix,\n  gracefullyDegrade,\n}: {\n  actionQueue: AppRouterActionQueue\n  globalErrorState: GlobalErrorState\n  assetPrefix: string\n  gracefullyDegrade: boolean\n}) {\n  useNavFailureHandler()\n\n  const router = (\n    <Router\n      actionQueue={actionQueue}\n      assetPrefix={assetPrefix}\n      globalError={globalErrorState}\n      gracefullyDegrade={gracefullyDegrade}\n    />\n  )\n\n  if (gracefullyDegrade) {\n    return router\n  } else {\n    return (\n      <ErrorBoundary\n        // At the very top level, use the default GlobalError component as the final fallback.\n        // When the app router itself fails, which means the framework itself fails, we show the default error.\n        errorComponent={DefaultGlobalError}\n      >\n        {router}\n      </ErrorBoundary>\n    )\n  }\n}\n\nconst runtimeStyles = new Set<string>()\nlet runtimeStyleChanged = new Set<() => void>()\n\nglobalThis._N_E_STYLE_LOAD = function (href: string) {\n  let len = runtimeStyles.size\n  runtimeStyles.add(href)\n  if (runtimeStyles.size !== len) {\n    runtimeStyleChanged.forEach((cb) => cb())\n  }\n  // TODO figure out how to get a promise here\n  // But maybe it's not necessary as react would block rendering until it's loaded\n  return Promise.resolve()\n}\n\nfunction RuntimeStyles() {\n  const [, forceUpdate] = React.useState(0)\n  const renderedStylesSize = runtimeStyles.size\n  useEffect(() => {\n    const changed = () => forceUpdate((c) => c + 1)\n    runtimeStyleChanged.add(changed)\n    if (renderedStylesSize !== runtimeStyles.size) {\n      changed()\n    }\n    return () => {\n      runtimeStyleChanged.delete(changed)\n    }\n  }, [renderedStylesSize, forceUpdate])\n\n  const dplId = process.env.NEXT_DEPLOYMENT_ID\n    ? `?dpl=${process.env.NEXT_DEPLOYMENT_ID}`\n    : ''\n  return [...runtimeStyles].map((href, i) => (\n    <link\n      key={i}\n      rel=\"stylesheet\"\n      href={`${href}${dplId}`}\n      // @ts-ignore\n      precedence=\"next\"\n      // TODO figure out crossOrigin and nonce\n      // crossOrigin={TODO}\n      // nonce={TODO}\n    />\n  ))\n}\n","'use client'\n\nimport type { FetchServerResponseResult } from '../../client/components/router-reducer/fetch-server-response'\nimport type {\n  FocusAndScrollRef,\n  PrefetchKind,\n} from '../../client/components/router-reducer/router-reducer-types'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../server/app-render/types'\nimport React from 'react'\n\nexport type ChildSegmentMap = Map<string, CacheNode>\n\n/**\n * Cache node used in app-router / layout-router.\n */\nexport type CacheNode = ReadyCacheNode | LazyCacheNode\n\nexport type LoadingModuleData =\n  | [React.JSX.Element, React.ReactNode, React.ReactNode]\n  | null\n\n/** viewport metadata node */\nexport type HeadData = React.ReactNode\n\nexport type LazyCacheNode = {\n  /**\n   * When rsc is null, this is a lazily-initialized cache node.\n   *\n   * If the app attempts to render it, it triggers a lazy data fetch,\n   * postpones the render, and schedules an update to a new tree.\n   *\n   * TODO: This mechanism should not be used when PPR is enabled, though it\n   * currently is in some cases until we've implemented partial\n   * segment fetching.\n   */\n  rsc: null\n\n  /**\n   * A prefetched version of the segment data. See explanation in corresponding\n   * field of ReadyCacheNode (below).\n   *\n   * Since LazyCacheNode mostly only exists in the non-PPR implementation, this\n   * will usually be null, but it could have been cloned from a previous\n   * CacheNode that was created by the PPR implementation. Eventually we want\n   * to migrate everything away from LazyCacheNode entirely.\n   */\n  prefetchRsc: React.ReactNode\n\n  /**\n   * A pending response for the lazy data fetch. If this is not present\n   * during render, it is lazily created.\n   */\n  lazyData: Promise<FetchServerResponseResult> | null\n\n  prefetchHead: HeadData | null\n\n  head: HeadData\n\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n\n  /**\n   * Child parallel routes.\n   */\n  parallelRoutes: Map<string, ChildSegmentMap>\n\n  /**\n   * The timestamp of the navigation that last updated the CacheNode's data. If\n   * a CacheNode is reused from a previous navigation, this value is not\n   * updated. Used to track the staleness of the data.\n   */\n  navigatedAt: number\n}\n\nexport type ReadyCacheNode = {\n  /**\n   * When rsc is not null, it represents the RSC data for the\n   * corresponding segment.\n   *\n   * `null` is a valid React Node but because segment data is always a\n   * <LayoutRouter> component, we can use `null` to represent empty.\n   *\n   * TODO: For additional type safety, update this type to\n   * Exclude<React.ReactNode, null>. Need to update createEmptyCacheNode to\n   * accept rsc as an argument, or just inline the callers.\n   */\n  rsc: React.ReactNode\n\n  /**\n   * Represents a static version of the segment that can be shown immediately,\n   * and may or may not contain dynamic holes. It's prefetched before a\n   * navigation occurs.\n   *\n   * During rendering, we will choose whether to render `rsc` or `prefetchRsc`\n   * with `useDeferredValue`. As with the `rsc` field, a value of `null` means\n   * no value was provided. In this case, the LayoutRouter will go straight to\n   * rendering the `rsc` value; if that one is also missing, it will suspend and\n   * trigger a lazy fetch.\n   */\n  prefetchRsc: React.ReactNode\n\n  /**\n   * There should never be a lazy data request in this case.\n   */\n  lazyData: null\n  prefetchHead: HeadData | null\n\n  head: HeadData\n\n  loading: LoadingModuleData | Promise<LoadingModuleData>\n\n  parallelRoutes: Map<string, ChildSegmentMap>\n\n  navigatedAt: number\n}\n\nexport interface NavigateOptions {\n  scroll?: boolean\n}\n\nexport interface PrefetchOptions {\n  kind: PrefetchKind\n  onInvalidate?: () => void\n}\n\nexport interface AppRouterInstance {\n  /**\n   * Navigate to the previous history entry.\n   */\n  back(): void\n  /**\n   * Navigate to the next history entry.\n   */\n  forward(): void\n  /**\n   * Refresh the current page.\n   */\n  refresh(): void\n  /**\n   * Refresh the current page. Use in development only.\n   * @internal\n   */\n  hmrRefresh(): void\n  /**\n   * Navigate to the provided href.\n   * Pushes a new history entry.\n   */\n  push(href: string, options?: NavigateOptions): void\n  /**\n   * Navigate to the provided href.\n   * Replaces the current history entry.\n   */\n  replace(href: string, options?: NavigateOptions): void\n  /**\n   * Prefetch the provided href.\n   */\n  prefetch(href: string, options?: PrefetchOptions): void\n}\n\nexport const AppRouterContext = React.createContext<AppRouterInstance | null>(\n  null\n)\nexport const LayoutRouterContext = React.createContext<{\n  parentTree: FlightRouterState\n  parentCacheNode: CacheNode\n  parentSegmentPath: FlightSegmentPath | null\n  url: string\n} | null>(null)\n\nexport const GlobalLayoutRouterContext = React.createContext<{\n  tree: FlightRouterState\n  focusAndScrollRef: FocusAndScrollRef\n  nextUrl: string | null\n}>(null as any)\n\nexport const TemplateContext = React.createContext<React.ReactNode>(null as any)\n\nif (process.env.NODE_ENV !== 'production') {\n  AppRouterContext.displayName = 'AppRouterContext'\n  LayoutRouterContext.displayName = 'LayoutRouterContext'\n  GlobalLayoutRouterContext.displayName = 'GlobalLayoutRouterContext'\n  TemplateContext.displayName = 'TemplateContext'\n}\n\nexport const MissingSlotContext = React.createContext<Set<string>>(new Set())\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","// This file is only used in app router due to the specific error state handling.\n\nimport type { ErrorInfo } from 'react'\nimport { isNextRouterError } from '../components/is-next-router-error'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { reportGlobalError } from './report-global-error'\nimport { ErrorBoundaryHandler } from '../components/error-boundary'\nimport DefaultErrorBoundary from '../components/builtin/global-error'\n\nconst devToolErrorMod: typeof import('../../next-devtools/userspace/app/errors') =\n  process.env.NODE_ENV !== 'production'\n    ? (require('../../next-devtools/userspace/app/errors') as typeof import('../../next-devtools/userspace/app/errors'))\n    : {\n        decorateDevError: (error: unknown) => error as Error,\n        handleClientError: () => {},\n        originConsoleError: console.error.bind(console),\n      }\n\nexport function onCaughtError(\n  thrownValue: unknown,\n  errorInfo: ErrorInfo & { errorBoundary?: React.Component }\n) {\n  const errorBoundaryComponent = errorInfo.errorBoundary?.constructor\n\n  let isImplicitErrorBoundary\n\n  if (process.env.NODE_ENV !== 'production') {\n    const { AppDevOverlayErrorBoundary } =\n      require('../../next-devtools/userspace/app/app-dev-overlay-error-boundary') as typeof import('../../next-devtools/userspace/app/app-dev-overlay-error-boundary')\n\n    isImplicitErrorBoundary =\n      errorBoundaryComponent === AppDevOverlayErrorBoundary\n  }\n\n  isImplicitErrorBoundary =\n    isImplicitErrorBoundary ||\n    (errorBoundaryComponent === ErrorBoundaryHandler &&\n      (errorInfo.errorBoundary! as InstanceType<typeof ErrorBoundaryHandler>)\n        .props.errorComponent === DefaultErrorBoundary)\n\n  // Skip the segment explorer triggered error\n  if (process.env.NODE_ENV !== 'production') {\n    const { SEGMENT_EXPLORER_SIMULATED_ERROR_MESSAGE } =\n      require('../../next-devtools/userspace/app/segment-explorer-node') as typeof import('../../next-devtools/userspace/app/segment-explorer-node')\n    if (\n      thrownValue instanceof Error &&\n      thrownValue.message === SEGMENT_EXPLORER_SIMULATED_ERROR_MESSAGE\n    ) {\n      return\n    }\n  }\n\n  if (isImplicitErrorBoundary) {\n    // We don't consider errors caught unless they're caught by an explicit error\n    // boundary. The built-in ones are considered implicit.\n    // This mimics how the same app would behave without Next.js.\n    return onUncaughtError(thrownValue, errorInfo)\n  }\n\n  // Skip certain custom errors which are not expected to be reported on client\n  if (isBailoutToCSRError(thrownValue) || isNextRouterError(thrownValue)) return\n\n  if (process.env.NODE_ENV !== 'production') {\n    const errorBoundaryName =\n      // read react component displayName\n      (errorBoundaryComponent as any)?.displayName ||\n      errorBoundaryComponent?.name ||\n      'Unknown'\n\n    const componentThatErroredFrame = errorInfo?.componentStack?.split('\\n')[1]\n\n    // Match chrome or safari stack trace\n    const matches =\n      // regex to match the function name in the stack trace\n      // example 1: at Page (http://localhost:3000/_next/static/chunks/pages/index.js?ts=1631600000000:2:1)\n      // example 2: Page@http://localhost:3000/_next/static/chunks/pages/index.js?ts=1631600000000:2:1\n      componentThatErroredFrame?.match(/\\s+at (\\w+)\\s+|(\\w+)@/) ?? []\n    const componentThatErroredName = matches[1] || matches[2] || 'Unknown'\n\n    // Create error location with errored component and error boundary, to match the behavior of default React onCaughtError handler.\n    const errorBoundaryMessage = `It was handled by the <${errorBoundaryName}> error boundary.`\n    const componentErrorMessage = componentThatErroredName\n      ? `The above error occurred in the <${componentThatErroredName}> component.`\n      : `The above error occurred in one of your components.`\n\n    const errorLocation = `${componentErrorMessage} ${errorBoundaryMessage}`\n    const error = devToolErrorMod.decorateDevError(thrownValue, errorInfo)\n\n    // Log and report the error with location but without modifying the error stack\n    devToolErrorMod.originConsoleError('%o\\n\\n%s', thrownValue, errorLocation)\n\n    devToolErrorMod.handleClientError(error)\n  } else {\n    devToolErrorMod.originConsoleError(thrownValue)\n  }\n}\n\nexport function onUncaughtError(\n  thrownValue: unknown,\n  errorInfo: React.ErrorInfo\n) {\n  // Skip certain custom errors which are not expected to be reported on client\n  if (isBailoutToCSRError(thrownValue) || isNextRouterError(thrownValue)) return\n\n  if (process.env.NODE_ENV !== 'production') {\n    const error = devToolErrorMod.decorateDevError(thrownValue, errorInfo)\n\n    // TODO: Add an adendum to the overlay telling people about custom error boundaries.\n    reportGlobalError(error)\n  } else {\n    reportGlobalError(thrownValue)\n  }\n}\n","/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */\nexport function parsePath(path: string) {\n  const hashIndex = path.indexOf('#')\n  const queryIndex = path.indexOf('?')\n  const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex)\n\n  if (hasQuery || hashIndex > -1) {\n    return {\n      pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n      query: hasQuery\n        ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined)\n        : '',\n      hash: hashIndex > -1 ? path.slice(hashIndex) : '',\n    }\n  }\n\n  return { pathname: path, query: '', hash: '' }\n}\n","/**\n * Create a \"Thenable\" that does not resolve. This is used to suspend indefinitely when data is not available yet.\n */\nexport const unresolvedThenable = {\n  then: () => {},\n} as PromiseLike<void>\n","// Override chunk URL mapping in the webpack runtime\n// https://github.com/webpack/webpack/blob/2738eebc7880835d88c727d364ad37f3ec557593/lib/RuntimeGlobals.js#L204\n\nimport { getDeploymentIdQueryOrEmptyString } from '../build/deployment-id'\nimport { encodeURIPath } from '../shared/lib/encode-uri-path'\n\ndeclare const __webpack_require__: any\n\n// If we have a deployment ID, we need to append it to the webpack chunk names\n// I am keeping the process check explicit so this can be statically optimized\nif (process.env.NEXT_DEPLOYMENT_ID) {\n  const suffix = getDeploymentIdQueryOrEmptyString()\n  // eslint-disable-next-line no-undef\n  const getChunkScriptFilename = __webpack_require__.u\n  // eslint-disable-next-line no-undef\n  __webpack_require__.u = (...args: any[]) =>\n    // We encode the chunk filename because our static server matches against and encoded\n    // filename path.\n    encodeURIPath(getChunkScriptFilename(...args)) + suffix\n\n  // eslint-disable-next-line no-undef\n  const getChunkCssFilename = __webpack_require__.k\n  // eslint-disable-next-line no-undef\n  __webpack_require__.k = (...args: any[]) =>\n    getChunkCssFilename(...args) + suffix\n\n  // eslint-disable-next-line no-undef\n  const getMiniCssFilename = __webpack_require__.miniCssF\n  // eslint-disable-next-line no-undef\n  __webpack_require__.miniCssF = (...args: any[]) =>\n    getMiniCssFilename(...args) + suffix\n} else {\n  // eslint-disable-next-line no-undef\n  const getChunkScriptFilename = __webpack_require__.u\n  // eslint-disable-next-line no-undef\n  __webpack_require__.u = (...args: any[]) =>\n    // We encode the chunk filename because our static server matches against and encoded\n    // filename path.\n    encodeURIPath(getChunkScriptFilename(...args))\n\n  // We don't need to override __webpack_require__.k because we don't modify\n  // the css chunk name when not using deployment id suffixes\n\n  // WE don't need to override __webpack_require__.miniCssF because we don't modify\n  // the mini css chunk name when not using deployment id suffixes\n}\n\nexport {}\n","/**\n * Entry point to the Segment Cache implementation.\n *\n * All code related to the Segment Cache lives `segment-cache-impl` directory.\n * Callers access it through this indirection.\n *\n * This is to ensure the code is dead code eliminated from the bundle if the\n * flag is disabled.\n *\n * TODO: This is super tedious. Since experimental flags are an essential part\n * of our workflow, we should establish a better pattern for dead code\n * elimination. Ideally it would be done at the bundler level, like how React's\n * build process works. In the React repo, you don't even need to add any extra\n * configuration per experiment — if the code is not reachable, it gets stripped\n * from the build automatically by Rollup. Or, shorter term, we could stub out\n * experimental modules at build time by updating the build config, i.e. a more\n * automated version of what I'm doing manually in this file.\n */\n\nexport type { NavigationResult } from './segment-cache-impl/navigation'\nexport type { PrefetchTask } from './segment-cache-impl/scheduler'\n\nconst notEnabled: any = () => {\n  throw new Error(\n    'Segment Cache experiment is not enabled. This is a bug in Next.js.'\n  )\n}\n\nexport const prefetch: typeof import('./segment-cache-impl/prefetch').prefetch =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/prefetch') as typeof import('./segment-cache-impl/prefetch')\n        ).prefetch(...args)\n      }\n    : notEnabled\n\nexport const navigate: typeof import('./segment-cache-impl/navigation').navigate =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/navigation') as typeof import('./segment-cache-impl/navigation')\n        ).navigate(...args)\n      }\n    : notEnabled\n\nexport const revalidateEntireCache: typeof import('./segment-cache-impl/cache').revalidateEntireCache =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/cache') as typeof import('./segment-cache-impl/cache')\n        ).revalidateEntireCache(...args)\n      }\n    : notEnabled\n\nexport const getCurrentCacheVersion: typeof import('./segment-cache-impl/cache').getCurrentCacheVersion =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/cache') as typeof import('./segment-cache-impl/cache')\n        ).getCurrentCacheVersion(...args)\n      }\n    : notEnabled\n\nexport const schedulePrefetchTask: typeof import('./segment-cache-impl/scheduler').schedulePrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/scheduler') as typeof import('./segment-cache-impl/scheduler')\n        ).schedulePrefetchTask(...args)\n      }\n    : notEnabled\n\nexport const cancelPrefetchTask: typeof import('./segment-cache-impl/scheduler').cancelPrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/scheduler') as typeof import('./segment-cache-impl/scheduler')\n        ).cancelPrefetchTask(...args)\n      }\n    : notEnabled\n\nexport const reschedulePrefetchTask: typeof import('./segment-cache-impl/scheduler').reschedulePrefetchTask =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/scheduler') as typeof import('./segment-cache-impl/scheduler')\n        ).reschedulePrefetchTask(...args)\n      }\n    : notEnabled\n\nexport const isPrefetchTaskDirty: typeof import('./segment-cache-impl/scheduler').isPrefetchTaskDirty =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/scheduler') as typeof import('./segment-cache-impl/scheduler')\n        ).isPrefetchTaskDirty(...args)\n      }\n    : notEnabled\n\nexport const createCacheKey: typeof import('./segment-cache-impl/cache-key').createCacheKey =\n  process.env.__NEXT_CLIENT_SEGMENT_CACHE\n    ? function (...args) {\n        return (\n          require('./segment-cache-impl/cache-key') as typeof import('./segment-cache-impl/cache-key')\n        ).createCacheKey(...args)\n      }\n    : notEnabled\n\n/**\n * Below are public constants. They're small enough that we don't need to\n * DCE them.\n */\n\nexport const enum NavigationResultTag {\n  MPA,\n  Success,\n  NoOp,\n  Async,\n}\n\n/**\n * The priority of the prefetch task. Higher numbers are higher priority.\n */\nexport const enum PrefetchPriority {\n  /**\n   * Assigned to the most recently hovered/touched link. Special network\n   * bandwidth is reserved for this task only. There's only ever one Intent-\n   * priority task at a time; when a new Intent task is scheduled, the previous\n   * one is bumped down to Default.\n   */\n  Intent = 2,\n  /**\n   * The default priority for prefetch tasks.\n   */\n  Default = 1,\n  /**\n   * Assigned to tasks when they spawn non-blocking background work, like\n   * revalidating a partially cached entry to see if more data is available.\n   */\n  Background = 0,\n}\n","import type { FlightRouterState } from '../../../server/app-render/types'\nimport { handleExternalUrl } from './reducers/navigate-reducer'\nimport type {\n  ReadonlyReducerState,\n  ReducerActions,\n} from './router-reducer-types'\n\n/**\n * Handles the case where the client router attempted to patch the tree but, due to a mismatch, the patch failed.\n * This will perform an MPA navigation to return the router to a valid state.\n */\nexport function handleSegmentMismatch(\n  state: ReadonlyReducerState,\n  action: ReducerActions,\n  treePatch: FlightRouterState\n) {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(\n      'Performing hard navigation because your application experienced an unrecoverable error. If this keeps occurring, please file a Next.js issue.\\n\\n' +\n        'Reason: Segment mismatch\\n' +\n        `Last Action: ${action.type}\\n\\n` +\n        `Current Tree: ${JSON.stringify(state.tree)}\\n\\n` +\n        `Tree Patch Payload: ${JSON.stringify(treePatch)}`\n    )\n  }\n\n  return handleExternalUrl(state, {}, state.canonicalUrl, true)\n}\n","/** @internal */\nclass ReadonlyURLSearchParamsError extends Error {\n  constructor() {\n    super(\n      'Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams'\n    )\n  }\n}\n\nclass ReadonlyURLSearchParams extends URLSearchParams {\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  append() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  delete() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  set() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n  /** @deprecated Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams */\n  sort() {\n    throw new ReadonlyURLSearchParamsError()\n  }\n}\n\nexport { redirect, permanentRedirect } from './redirect'\nexport { RedirectType } from './redirect-error'\nexport { notFound } from './not-found'\nexport { forbidden } from './forbidden'\nexport { unauthorized } from './unauthorized'\nexport { unstable_rethrow } from './unstable-rethrow'\nexport { ReadonlyURLSearchParams }\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  CacheNodeSeedData,\n} from '../../../server/app-render/types'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport {\n  PrefetchCacheEntryStatus,\n  type PrefetchCacheEntry,\n} from './router-reducer-types'\n\nexport function fillLazyItemsTillLeafWithHead(\n  navigatedAt: number,\n  newCache: CacheNode,\n  existingCache: CacheNode | undefined,\n  routerState: FlightRouterState,\n  cacheNodeSeedData: CacheNodeSeedData | null,\n  head: React.ReactNode,\n  prefetchEntry: PrefetchCacheEntry | undefined\n): void {\n  const isLastSegment = Object.keys(routerState[1]).length === 0\n  if (isLastSegment) {\n    newCache.head = head\n    return\n  }\n  // Remove segment that we got data for so that it is filled in during rendering of rsc.\n  for (const key in routerState[1]) {\n    const parallelRouteState = routerState[1][key]\n    const segmentForParallelRoute = parallelRouteState[0]\n    const cacheKey = createRouterCacheKey(segmentForParallelRoute)\n\n    // TODO: We should traverse the cacheNodeSeedData tree instead of the router\n    // state tree. Ideally, they would always be the same shape, but because of\n    // the loading.js pattern, cacheNodeSeedData sometimes only represents a\n    // partial tree. That's why this node is sometimes null. Once PPR lands,\n    // loading.js will no longer have special behavior and we can traverse the\n    // data tree instead.\n    //\n    // We should also consider merging the router state tree and the data tree\n    // in the response format, so that we don't have to send the keys twice.\n    // Then the client can convert them into separate representations.\n    const parallelSeedData =\n      cacheNodeSeedData !== null && cacheNodeSeedData[2][key] !== undefined\n        ? cacheNodeSeedData[2][key]\n        : null\n    if (existingCache) {\n      const existingParallelRoutesCacheNode =\n        existingCache.parallelRoutes.get(key)\n      if (existingParallelRoutesCacheNode) {\n        const hasReusablePrefetch =\n          prefetchEntry?.kind === 'auto' &&\n          prefetchEntry.status === PrefetchCacheEntryStatus.reusable\n\n        let parallelRouteCacheNode = new Map(existingParallelRoutesCacheNode)\n        const existingCacheNode = parallelRouteCacheNode.get(cacheKey)\n        let newCacheNode: CacheNode\n        if (parallelSeedData !== null) {\n          // New data was sent from the server.\n          const seedNode = parallelSeedData[1]\n          const loading = parallelSeedData[3]\n          newCacheNode = {\n            lazyData: null,\n            rsc: seedNode,\n            // This is a PPR-only field. When PPR is enabled, we shouldn't hit\n            // this path during a navigation, but until PPR is fully implemented\n            // yet it's possible the existing node does have a non-null\n            // `prefetchRsc`. As an incremental step, we'll just de-opt to the\n            // old behavior — no PPR value.\n            prefetchRsc: null,\n            head: null,\n            prefetchHead: null,\n            loading,\n            parallelRoutes: new Map(existingCacheNode?.parallelRoutes),\n            navigatedAt,\n          }\n        } else if (hasReusablePrefetch && existingCacheNode) {\n          // No new data was sent from the server, but the existing cache node\n          // was prefetched, so we should reuse that.\n          newCacheNode = {\n            lazyData: existingCacheNode.lazyData,\n            rsc: existingCacheNode.rsc,\n            // This is a PPR-only field. Unlike the previous branch, since we're\n            // just cloning the existing cache node, we might as well keep the\n            // PPR value, if it exists.\n            prefetchRsc: existingCacheNode.prefetchRsc,\n            head: existingCacheNode.head,\n            prefetchHead: existingCacheNode.prefetchHead,\n            parallelRoutes: new Map(existingCacheNode.parallelRoutes),\n            loading: existingCacheNode.loading,\n          } as CacheNode\n        } else {\n          // No data available for this node. This will trigger a lazy fetch\n          // during render.\n          newCacheNode = {\n            lazyData: null,\n            rsc: null,\n            prefetchRsc: null,\n            head: null,\n            prefetchHead: null,\n            parallelRoutes: new Map(existingCacheNode?.parallelRoutes),\n            loading: null,\n            navigatedAt,\n          }\n        }\n\n        // Overrides the cache key with the new cache node.\n        parallelRouteCacheNode.set(cacheKey, newCacheNode)\n        // Traverse deeper to apply the head / fill lazy items till the head.\n        fillLazyItemsTillLeafWithHead(\n          navigatedAt,\n          newCacheNode,\n          existingCacheNode,\n          parallelRouteState,\n          parallelSeedData ? parallelSeedData : null,\n          head,\n          prefetchEntry\n        )\n\n        newCache.parallelRoutes.set(key, parallelRouteCacheNode)\n        continue\n      }\n    }\n\n    let newCacheNode: CacheNode\n    if (parallelSeedData !== null) {\n      // New data was sent from the server.\n      const seedNode = parallelSeedData[1]\n      const loading = parallelSeedData[3]\n      newCacheNode = {\n        lazyData: null,\n        rsc: seedNode,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading,\n        navigatedAt,\n      }\n    } else {\n      // No data available for this node. This will trigger a lazy fetch\n      // during render.\n      newCacheNode = {\n        lazyData: null,\n        rsc: null,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        parallelRoutes: new Map(),\n        loading: null,\n        navigatedAt,\n      }\n    }\n\n    const existingParallelRoutes = newCache.parallelRoutes.get(key)\n    if (existingParallelRoutes) {\n      existingParallelRoutes.set(cacheKey, newCacheNode)\n    } else {\n      newCache.parallelRoutes.set(key, new Map([[cacheKey, newCacheNode]]))\n    }\n\n    fillLazyItemsTillLeafWithHead(\n      navigatedAt,\n      newCacheNode,\n      undefined,\n      parallelRouteState,\n      parallelSeedData,\n      head,\n      prefetchEntry\n    )\n  }\n}\n","import { RedirectStatusCode } from './redirect-status-code'\n\nexport const REDIRECT_ERROR_CODE = 'NEXT_REDIRECT'\n\nexport enum RedirectType {\n  push = 'push',\n  replace = 'replace',\n}\n\nexport type RedirectError = Error & {\n  digest: `${typeof REDIRECT_ERROR_CODE};${RedirectType};${string};${RedirectStatusCode};`\n}\n\n/**\n * Checks an error to determine if it's an error generated by the\n * `redirect(url)` helper.\n *\n * @param error the error that may reference a redirect error\n * @returns true if the error is a redirect error\n */\nexport function isRedirectError(error: unknown): error is RedirectError {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n\n  const digest = error.digest.split(';')\n  const [errorCode, type] = digest\n  const destination = digest.slice(2, -2).join(';')\n  const status = digest.at(-2)\n\n  const statusCode = Number(status)\n\n  return (\n    errorCode === REDIRECT_ERROR_CODE &&\n    (type === 'replace' || type === 'push') &&\n    typeof destination === 'string' &&\n    !isNaN(statusCode) &&\n    statusCode in RedirectStatusCode\n  )\n}\n","/*\n    This is a simple promise queue that allows you to limit the number of concurrent promises\n    that are running at any given time. It's used to limit the number of concurrent\n    prefetch requests that are being made to the server but could be used for other\n    things as well.\n*/\nexport class PromiseQueue {\n  #maxConcurrency: number\n  #runningCount: number\n  #queue: Array<{\n    promiseFn: Promise<any>\n    task: () => void\n  }>\n\n  constructor(maxConcurrency = 5) {\n    this.#maxConcurrency = maxConcurrency\n    this.#runningCount = 0\n    this.#queue = []\n  }\n\n  enqueue<T>(promiseFn: () => Promise<T>): Promise<T> {\n    let taskResolve: (value: T | PromiseLike<T>) => void\n    let taskReject: (reason?: any) => void\n\n    const taskPromise = new Promise((resolve, reject) => {\n      taskResolve = resolve\n      taskReject = reject\n    }) as Promise<T>\n\n    const task = async () => {\n      try {\n        this.#runningCount++\n        const result = await promiseFn()\n        taskResolve(result)\n      } catch (error) {\n        taskReject(error)\n      } finally {\n        this.#runningCount--\n        this.#processNext()\n      }\n    }\n\n    const enqueueResult = { promiseFn: taskPromise, task }\n    // wonder if we should take a LIFO approach here\n    this.#queue.push(enqueueResult)\n    this.#processNext()\n\n    return taskPromise\n  }\n\n  bump(promiseFn: Promise<any>) {\n    const index = this.#queue.findIndex((item) => item.promiseFn === promiseFn)\n\n    if (index > -1) {\n      const bumpedItem = this.#queue.splice(index, 1)[0]\n      this.#queue.unshift(bumpedItem)\n      this.#processNext(true)\n    }\n  }\n\n  #processNext(forced = false) {\n    if (\n      (this.#runningCount < this.#maxConcurrency || forced) &&\n      this.#queue.length > 0\n    ) {\n      this.#queue.shift()?.task()\n    }\n  }\n}\n","import { createHrefFromUrl } from '../create-href-from-url'\nimport type {\n  ReadonlyReducerState,\n  ReducerState,\n  RestoreAction,\n} from '../router-reducer-types'\nimport { extractPathFromFlightRouterState } from '../compute-changed-path'\nimport { updateCacheNodeOnPopstateRestoration } from '../ppr-navigations'\n\nexport function restoreReducer(\n  state: ReadonlyReducerState,\n  action: RestoreAction\n): ReducerState {\n  const { url, tree } = action\n  const href = createHrefFromUrl(url)\n  // This action is used to restore the router state from the history state.\n  // However, it's possible that the history state no longer contains the `FlightRouterState`.\n  // We will copy over the internal state on pushState/replaceState events, but if a history entry\n  // occurred before hydration, or if the user navigated to a hash using a regular anchor link,\n  // the history state will not contain the `FlightRouterState`.\n  // In this case, we'll continue to use the existing tree so the router doesn't get into an invalid state.\n  const treeToRestore = tree || state.tree\n\n  const oldCache = state.cache\n  const newCache = process.env.__NEXT_PPR\n    ? // When PPR is enabled, we update the cache to drop the prefetch\n      // data for any segment whose dynamic data was already received. This\n      // prevents an unnecessary flash back to PPR state during a\n      // back/forward navigation.\n      updateCacheNodeOnPopstateRestoration(oldCache, treeToRestore)\n    : oldCache\n\n  return {\n    // Set canonical url\n    canonicalUrl: href,\n    pushRef: {\n      pendingPush: false,\n      mpaNavigation: false,\n      // Ensures that the custom history state that was set is preserved when applying this update.\n      preserveCustomHistoryState: true,\n    },\n    focusAndScrollRef: state.focusAndScrollRef,\n    cache: newCache,\n    prefetchCache: state.prefetchCache,\n    // Restore provided tree\n    tree: treeToRestore,\n    nextUrl: extractPathFromFlightRouterState(treeToRestore) ?? url.pathname,\n  }\n}\n","'use client'\n\nimport type { ParsedUrlQuery } from 'querystring'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nimport type { Params } from '../../server/request/params'\n\n/**\n * When the Page is a client component we send the params and searchParams to this client wrapper\n * where they are turned into dynamically tracked values before being passed to the actual Page component.\n *\n * additionally we may send promises representing the params and searchParams. We don't ever use these passed\n * values but it can be necessary for the sender to send a Promise that doesn't resolve in certain situations.\n * It is up to the caller to decide if the promises are needed.\n */\nexport function ClientPageRoot({\n  Component,\n  searchParams,\n  params,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  promises,\n}: {\n  Component: React.ComponentType<any>\n  searchParams: ParsedUrlQuery\n  params: Params\n  promises?: Array<Promise<any>>\n}) {\n  if (typeof window === 'undefined') {\n    const { workAsyncStorage } =\n      require('../../server/app-render/work-async-storage.external') as typeof import('../../server/app-render/work-async-storage.external')\n\n    let clientSearchParams: Promise<ParsedUrlQuery>\n    let clientParams: Promise<Params>\n    // We are going to instrument the searchParams prop with tracking for the\n    // appropriate context. We wrap differently in prerendering vs rendering\n    const store = workAsyncStorage.getStore()\n    if (!store) {\n      throw new InvariantError(\n        'Expected workStore to exist when handling searchParams in a client Page.'\n      )\n    }\n\n    const { createSearchParamsFromClient } =\n      require('../../server/request/search-params') as typeof import('../../server/request/search-params')\n    clientSearchParams = createSearchParamsFromClient(searchParams, store)\n\n    const { createParamsFromClient } =\n      require('../../server/request/params') as typeof import('../../server/request/params')\n    clientParams = createParamsFromClient(params, store)\n\n    return <Component params={clientParams} searchParams={clientSearchParams} />\n  } else {\n    const { createRenderSearchParamsFromClient } =\n      require('../request/search-params.browser') as typeof import('../request/search-params.browser')\n    const clientSearchParams = createRenderSearchParamsFromClient(searchParams)\n    const { createRenderParamsFromClient } =\n      require('../request/params.browser') as typeof import('../request/params.browser')\n    const clientParams = createRenderParamsFromClient(params)\n\n    return <Component params={clientParams} searchParams={clientSearchParams} />\n  }\n}\n","export const createRenderSearchParamsFromClient =\n  process.env.NODE_ENV === 'development'\n    ? (\n        require('./search-params.browser.dev') as typeof import('./search-params.browser.dev')\n      ).createRenderSearchParamsFromClient\n    : (\n        require('./search-params.browser.prod') as typeof import('./search-params.browser.prod')\n      ).createRenderSearchParamsFromClient\n","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../server/app-render/types'\nimport type { FetchServerResponseResult } from './fetch-server-response'\n\nexport const ACTION_REFRESH = 'refresh'\nexport const ACTION_NAVIGATE = 'navigate'\nexport const ACTION_RESTORE = 'restore'\nexport const ACTION_SERVER_PATCH = 'server-patch'\nexport const ACTION_PREFETCH = 'prefetch'\nexport const ACTION_HMR_REFRESH = 'hmr-refresh'\nexport const ACTION_SERVER_ACTION = 'server-action'\n\nexport type RouterChangeByServerResponse = ({\n  navigatedAt,\n  previousTree,\n  serverResponse,\n}: {\n  navigatedAt: number\n  previousTree: FlightRouterState\n  serverResponse: FetchServerResponseResult\n}) => void\n\nexport interface Mutable {\n  mpaNavigation?: boolean\n  patchedTree?: FlightRouterState\n  canonicalUrl?: string\n  scrollableSegments?: FlightSegmentPath[]\n  pendingPush?: boolean\n  cache?: CacheNode\n  prefetchCache?: AppRouterState['prefetchCache']\n  hashFragment?: string\n  shouldScroll?: boolean\n  preserveCustomHistoryState?: boolean\n  onlyHashChange?: boolean\n}\n\nexport interface ServerActionMutable extends Mutable {\n  inFlightServerAction?: Promise<any> | null\n}\n\n/**\n * Refresh triggers a refresh of the full page data.\n * - fetches the Flight data and fills rsc at the root of the cache.\n * - The router state is updated at the root.\n */\nexport interface RefreshAction {\n  type: typeof ACTION_REFRESH\n  origin: Location['origin']\n}\n\nexport interface HmrRefreshAction {\n  type: typeof ACTION_HMR_REFRESH\n  origin: Location['origin']\n}\n\nexport type ServerActionDispatcher = (\n  args: Omit<\n    ServerActionAction,\n    'type' | 'mutable' | 'navigate' | 'changeByServerResponse' | 'cache'\n  >\n) => void\n\nexport interface ServerActionAction {\n  type: typeof ACTION_SERVER_ACTION\n  actionId: string\n  actionArgs: any[]\n  resolve: (value: any) => void\n  reject: (reason?: any) => void\n}\n\n/**\n * Navigate triggers a navigation to the provided url. It supports two types: `push` and `replace`.\n *\n * `navigateType`:\n * - `push` - pushes a new history entry in the browser history\n * - `replace` - replaces the current history entry in the browser history\n *\n * Navigate has multiple cache heuristics:\n * - page was prefetched\n *  - Apply router state tree from prefetch\n *  - Apply Flight data from prefetch to the cache\n *  - If Flight data is a string, it's a redirect and the state is updated to trigger a redirect\n *  - Check if hard navigation is needed\n *    - Hard navigation happens when a dynamic parameter below the common layout changed\n *    - When hard navigation is needed the cache is invalidated below the flightSegmentPath\n *    - The missing cache nodes of the page will be fetched in layout-router and trigger the SERVER_PATCH action\n *  - If hard navigation is not needed\n *    - The cache is reused\n *    - If any cache nodes are missing they'll be fetched in layout-router and trigger the SERVER_PATCH action\n * - page was not prefetched\n *  - The navigate was called from `next/router` (`router.push()` / `router.replace()`) / `next/link` without prefetched data available (e.g. the prefetch didn't come back from the server before clicking the link)\n *    - Flight data is fetched in the reducer (suspends the reducer)\n *    - Router state tree is created based on Flight data\n *    - Cache is filled based on the Flight data\n *\n * Above steps explain 3 cases:\n * - `soft` - Reuses the existing cache and fetches missing nodes in layout-router.\n * - `hard` - Creates a new cache where cache nodes are removed below the common layout and fetches missing nodes in layout-router.\n * - `optimistic` (explicit no prefetch) - Creates a new cache and kicks off the data fetch in the reducer. The data fetch is awaited in the layout-router.\n */\nexport interface NavigateAction {\n  type: typeof ACTION_NAVIGATE\n  url: URL\n  isExternalUrl: boolean\n  locationSearch: Location['search']\n  navigateType: 'push' | 'replace'\n  shouldScroll: boolean\n  allowAliasing: boolean\n}\n\n/**\n * Restore applies the provided router state.\n * - Used for `popstate` (back/forward navigation) where a known router state has to be applied.\n * - Also used when syncing the router state with `pushState`/`replaceState` calls.\n * - Router state is applied as-is from the history state, if available.\n * - If the history state does not contain the router state, the existing router state is used.\n * - If any cache node is missing it will be fetched in layout-router during rendering and the server-patch case.\n * - If existing cache nodes match these are used.\n */\nexport interface RestoreAction {\n  type: typeof ACTION_RESTORE\n  url: URL\n  tree: FlightRouterState | undefined\n}\n\n/**\n * Server-patch applies the provided Flight data to the cache and router tree.\n * - Only triggered in layout-router.\n * - Creates a new cache and router state with the Flight data applied.\n */\nexport interface ServerPatchAction {\n  type: typeof ACTION_SERVER_PATCH\n  navigatedAt: number\n  serverResponse: FetchServerResponseResult\n  previousTree: FlightRouterState\n}\n\n/**\n * PrefetchKind defines the type of prefetching that should be done.\n * - `auto` - if the page is dynamic, prefetch the page data partially, if static prefetch the page data fully.\n * - `full` - prefetch the page data fully.\n * - `temporary` - a temporary prefetch entry is added to the cache, this is used when prefetch={false} is used in next/link or when you push a route programmatically.\n */\n\nexport enum PrefetchKind {\n  AUTO = 'auto',\n  FULL = 'full',\n  TEMPORARY = 'temporary',\n}\n\n/**\n * Prefetch adds the provided FlightData to the prefetch cache\n * - Creates the router state tree based on the patch in FlightData\n * - Adds the FlightData to the prefetch cache\n * - In ACTION_NAVIGATE the prefetch cache is checked and the router state tree and FlightData are applied.\n */\nexport interface PrefetchAction {\n  type: typeof ACTION_PREFETCH\n  url: URL\n  kind: PrefetchKind\n}\n\nexport interface PushRef {\n  /**\n   * If the app-router should push a new history entry in app-router's useEffect()\n   */\n  pendingPush: boolean\n  /**\n   * Multi-page navigation through location.href.\n   */\n  mpaNavigation: boolean\n  /**\n   * Skip applying the router state to the browser history state.\n   */\n  preserveCustomHistoryState: boolean\n}\n\nexport type FocusAndScrollRef = {\n  /**\n   * If focus and scroll should be set in the layout-router's useEffect()\n   */\n  apply: boolean\n  /**\n   * The hash fragment that should be scrolled to.\n   */\n  hashFragment: string | null\n  /**\n   * The paths of the segments that should be focused.\n   */\n  segmentPaths: FlightSegmentPath[]\n  /**\n   * If only the URLs hash fragment changed\n   */\n  onlyHashChange: boolean\n}\n\nexport type PrefetchCacheEntry = {\n  treeAtTimeOfPrefetch: FlightRouterState\n  data: Promise<FetchServerResponseResult>\n  kind: PrefetchKind\n  prefetchTime: number\n  staleTime: number\n  lastUsedTime: number | null\n  key: string\n  status: PrefetchCacheEntryStatus\n  url: URL\n}\n\nexport enum PrefetchCacheEntryStatus {\n  fresh = 'fresh',\n  reusable = 'reusable',\n  expired = 'expired',\n  stale = 'stale',\n}\n\n/**\n * Handles keeping the state of app-router.\n */\nexport type AppRouterState = {\n  /**\n   * The router state, this is written into the history state in app-router using replaceState/pushState.\n   * - Has to be serializable as it is written into the history state.\n   * - Holds which segments and parallel routes are shown on the screen.\n   */\n  tree: FlightRouterState\n  /**\n   * The cache holds React nodes for every segment that is shown on screen as well as previously shown segments.\n   * It also holds in-progress data requests.\n   * Prefetched data is stored separately in `prefetchCache`, that is applied during ACTION_NAVIGATE.\n   */\n  cache: CacheNode\n  /**\n   * Cache that holds prefetched Flight responses keyed by url.\n   */\n  prefetchCache: Map<string, PrefetchCacheEntry>\n  /**\n   * Decides if the update should create a new history entry and if the navigation has to trigger a browser navigation.\n   */\n  pushRef: PushRef\n  /**\n   * Decides if the update should apply scroll and focus management.\n   */\n  focusAndScrollRef: FocusAndScrollRef\n  /**\n   * The canonical url that is pushed/replaced.\n   * - This is the url you see in the browser.\n   */\n  canonicalUrl: string\n  /**\n   * The underlying \"url\" representing the UI state, which is used for intercepting routes.\n   */\n  nextUrl: string | null\n}\n\nexport type ReadonlyReducerState = Readonly<AppRouterState>\nexport type ReducerState = Promise<AppRouterState> | AppRouterState\nexport type ReducerActions = Readonly<\n  | RefreshAction\n  | NavigateAction\n  | RestoreAction\n  | ServerPatchAction\n  | PrefetchAction\n  | HmrRefreshAction\n  | ServerActionAction\n>\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getDeploymentIdQueryOrEmptyString\", {\n    enumerable: true,\n    get: function() {\n        return getDeploymentIdQueryOrEmptyString;\n    }\n});\nfunction getDeploymentIdQueryOrEmptyString() {\n    if (process.env.NEXT_DEPLOYMENT_ID) {\n        return `?dpl=${process.env.NEXT_DEPLOYMENT_ID}`;\n    }\n    return '';\n}\n\n//# sourceMappingURL=deployment-id.js.map","import type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime'\nimport type { FlightSegmentPath } from '../../../server/app-render/types'\nimport { createRouterCacheKey } from './create-router-cache-key'\nimport { getNextFlightSegmentPath } from '../../flight-data-helpers'\n\n/**\n * Fill cache up to the end of the flightSegmentPath, invalidating anything below it.\n */\nexport function invalidateCacheBelowFlightSegmentPath(\n  newCache: CacheNode,\n  existingCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath\n): void {\n  const isLastEntry = flightSegmentPath.length <= 2\n  const [parallelRouteKey, segment] = flightSegmentPath\n\n  const cacheKey = createRouterCacheKey(segment)\n\n  const existingChildSegmentMap =\n    existingCache.parallelRoutes.get(parallelRouteKey)\n\n  if (!existingChildSegmentMap) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return\n  }\n\n  let childSegmentMap = newCache.parallelRoutes.get(parallelRouteKey)\n  if (!childSegmentMap || childSegmentMap === existingChildSegmentMap) {\n    childSegmentMap = new Map(existingChildSegmentMap)\n    newCache.parallelRoutes.set(parallelRouteKey, childSegmentMap)\n  }\n\n  // In case of last entry don't copy further down.\n  if (isLastEntry) {\n    childSegmentMap.delete(cacheKey)\n    return\n  }\n\n  const existingChildCacheNode = existingChildSegmentMap.get(cacheKey)\n  let childCacheNode = childSegmentMap.get(cacheKey)\n\n  if (!childCacheNode || !existingChildCacheNode) {\n    // Bailout because the existing cache does not have the path to the leaf node\n    // Will trigger lazy fetch in layout-router because of missing segment\n    return\n  }\n\n  if (childCacheNode === existingChildCacheNode) {\n    childCacheNode = {\n      lazyData: childCacheNode.lazyData,\n      rsc: childCacheNode.rsc,\n      prefetchRsc: childCacheNode.prefetchRsc,\n      head: childCacheNode.head,\n      prefetchHead: childCacheNode.prefetchHead,\n      parallelRoutes: new Map(childCacheNode.parallelRoutes),\n    } as CacheNode\n    childSegmentMap.set(cacheKey, childCacheNode)\n  }\n\n  invalidateCacheBelowFlightSegmentPath(\n    childCacheNode,\n    existingChildCacheNode,\n    getNextFlightSegmentPath(flightSegmentPath)\n  )\n}\n","import type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../../server/app-render/types'\nimport { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { invalidateCacheBelowFlightSegmentPath } from '../invalidate-cache-below-flight-segmentpath'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { shouldHardNavigate } from '../should-hard-navigate'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport {\n  PrefetchCacheEntryStatus,\n  type Mutable,\n  type NavigateAction,\n  type ReadonlyReducerState,\n  type ReducerState,\n} from '../router-reducer-types'\nimport { handleMutable } from '../handle-mutable'\nimport { applyFlightData } from '../apply-flight-data'\nimport { prefetchQueue } from './prefetch-reducer'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { DEFAULT_SEGMENT_KEY } from '../../../../shared/lib/segment'\nimport { listenForDynamicRequest, startPPRNavigation } from '../ppr-navigations'\nimport {\n  getOrCreatePrefetchCacheEntry,\n  prunePrefetchCache,\n} from '../prefetch-cache-utils'\nimport { clearCacheNodeDataForSegmentPath } from '../clear-cache-node-data-for-segment-path'\nimport { handleAliasedPrefetchEntry } from '../aliased-prefetch-navigations'\nimport {\n  navigate as navigateUsingSegmentCache,\n  NavigationResultTag,\n  type NavigationResult,\n} from '../../segment-cache'\n\nexport function handleExternalUrl(\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  url: string,\n  pendingPush: boolean\n) {\n  mutable.mpaNavigation = true\n  mutable.canonicalUrl = url\n  mutable.pendingPush = pendingPush\n  mutable.scrollableSegments = undefined\n\n  return handleMutable(state, mutable)\n}\n\nfunction generateSegmentsFromPatch(\n  flightRouterPatch: FlightRouterState\n): FlightSegmentPath[] {\n  const segments: FlightSegmentPath[] = []\n  const [segment, parallelRoutes] = flightRouterPatch\n\n  if (Object.keys(parallelRoutes).length === 0) {\n    return [[segment]]\n  }\n\n  for (const [parallelRouteKey, parallelRoute] of Object.entries(\n    parallelRoutes\n  )) {\n    for (const childSegment of generateSegmentsFromPatch(parallelRoute)) {\n      // If the segment is empty, it means we are at the root of the tree\n      if (segment === '') {\n        segments.push([parallelRouteKey, ...childSegment])\n      } else {\n        segments.push([segment, parallelRouteKey, ...childSegment])\n      }\n    }\n  }\n\n  return segments\n}\n\nfunction triggerLazyFetchForLeafSegments(\n  newCache: CacheNode,\n  currentCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath,\n  treePatch: FlightRouterState\n) {\n  let appliedPatch = false\n\n  newCache.rsc = currentCache.rsc\n  newCache.prefetchRsc = currentCache.prefetchRsc\n  newCache.loading = currentCache.loading\n  newCache.parallelRoutes = new Map(currentCache.parallelRoutes)\n\n  const segmentPathsToFill = generateSegmentsFromPatch(treePatch).map(\n    (segment) => [...flightSegmentPath, ...segment]\n  )\n\n  for (const segmentPaths of segmentPathsToFill) {\n    clearCacheNodeDataForSegmentPath(newCache, currentCache, segmentPaths)\n\n    appliedPatch = true\n  }\n\n  return appliedPatch\n}\n\nfunction handleNavigationResult(\n  url: URL,\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  pendingPush: boolean,\n  result: NavigationResult\n): ReducerState {\n  switch (result.tag) {\n    case NavigationResultTag.MPA: {\n      // Perform an MPA navigation.\n      const newUrl = result.data\n      return handleExternalUrl(state, mutable, newUrl, pendingPush)\n    }\n    case NavigationResultTag.NoOp: {\n      // The server responded with no change to the current page. However, if\n      // the URL changed, we still need to update that.\n      const newCanonicalUrl = result.data.canonicalUrl\n      mutable.canonicalUrl = newCanonicalUrl\n\n      // Check if the only thing that changed was the hash fragment.\n      const oldUrl = new URL(state.canonicalUrl, url)\n      const onlyHashChange =\n        // We don't need to compare the origins, because client-driven\n        // navigations are always same-origin.\n        url.pathname === oldUrl.pathname &&\n        url.search === oldUrl.search &&\n        url.hash !== oldUrl.hash\n      if (onlyHashChange) {\n        // The only updated part of the URL is the hash.\n        mutable.onlyHashChange = true\n        mutable.shouldScroll = result.data.shouldScroll\n        mutable.hashFragment = url.hash\n        // Setting this to an empty array triggers a scroll for all new and\n        // updated segments. See `ScrollAndFocusHandler` for more details.\n        mutable.scrollableSegments = []\n      }\n\n      return handleMutable(state, mutable)\n    }\n    case NavigationResultTag.Success: {\n      // Received a new result.\n      mutable.cache = result.data.cacheNode\n      mutable.patchedTree = result.data.flightRouterState\n      mutable.canonicalUrl = result.data.canonicalUrl\n      mutable.scrollableSegments = result.data.scrollableSegments\n      mutable.shouldScroll = result.data.shouldScroll\n      mutable.hashFragment = result.data.hash\n      return handleMutable(state, mutable)\n    }\n    case NavigationResultTag.Async: {\n      return result.data.then(\n        (asyncResult) =>\n          handleNavigationResult(url, state, mutable, pendingPush, asyncResult),\n        // If the navigation failed, return the current state.\n        // TODO: This matches the current behavior but we need to do something\n        // better here if the network fails.\n        () => {\n          return state\n        }\n      )\n    }\n    default: {\n      result satisfies never\n      return state\n    }\n  }\n}\n\nexport function navigateReducer(\n  state: ReadonlyReducerState,\n  action: NavigateAction\n): ReducerState {\n  const { url, isExternalUrl, navigateType, shouldScroll, allowAliasing } =\n    action\n  const mutable: Mutable = {}\n  const { hash } = url\n  const href = createHrefFromUrl(url)\n  const pendingPush = navigateType === 'push'\n  // we want to prune the prefetch cache on every navigation to avoid it growing too large\n  prunePrefetchCache(state.prefetchCache)\n\n  mutable.preserveCustomHistoryState = false\n  mutable.pendingPush = pendingPush\n\n  if (isExternalUrl) {\n    return handleExternalUrl(state, mutable, url.toString(), pendingPush)\n  }\n\n  // Handles case where `<meta http-equiv=\"refresh\">` tag is present,\n  // which will trigger an MPA navigation.\n  if (document.getElementById('__next-page-redirect')) {\n    return handleExternalUrl(state, mutable, href, pendingPush)\n  }\n\n  if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n    // (Very Early Experimental Feature) Segment Cache\n    //\n    // Bypass the normal prefetch cache and use the new per-segment cache\n    // implementation instead. This is only supported if PPR is enabled, too.\n    //\n    // Temporary glue code between the router reducer and the new navigation\n    // implementation. Eventually we'll rewrite the router reducer to a\n    // state machine.\n    const result = navigateUsingSegmentCache(\n      url,\n      state.cache,\n      state.tree,\n      state.nextUrl,\n      shouldScroll\n    )\n    return handleNavigationResult(url, state, mutable, pendingPush, result)\n  }\n\n  const prefetchValues = getOrCreatePrefetchCacheEntry({\n    url,\n    nextUrl: state.nextUrl,\n    tree: state.tree,\n    prefetchCache: state.prefetchCache,\n    allowAliasing,\n  })\n  const { treeAtTimeOfPrefetch, data } = prefetchValues\n\n  prefetchQueue.bump(data)\n\n  return data.then(\n    ({ flightData, canonicalUrl: canonicalUrlOverride, postponed }) => {\n      const navigatedAt = Date.now()\n\n      let isFirstRead = false\n      // we only want to mark this once\n      if (!prefetchValues.lastUsedTime) {\n        // important: we should only mark the cache node as dirty after we unsuspend from the call above\n        prefetchValues.lastUsedTime = navigatedAt\n        isFirstRead = true\n      }\n\n      if (prefetchValues.aliased) {\n        // When alias is enabled, search param may not be included in the canonicalUrl.\n        // But we want to set url to canonicalUrl so that we use redirected path for fetching dynamic data.\n        const urlWithCanonicalPathname = new URL(url.href)\n        if (canonicalUrlOverride) {\n          urlWithCanonicalPathname.pathname = canonicalUrlOverride.pathname\n        }\n\n        const result = handleAliasedPrefetchEntry(\n          navigatedAt,\n          state,\n          flightData,\n          urlWithCanonicalPathname,\n          mutable\n        )\n\n        // We didn't return new router state because we didn't apply the aliased entry for some reason.\n        // We'll re-invoke the navigation handler but ensure that we don't attempt to use the aliased entry. This\n        // will create an on-demand prefetch entry.\n        if (result === false) {\n          return navigateReducer(state, { ...action, allowAliasing: false })\n        }\n\n        return result\n      }\n\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(state, mutable, flightData, pendingPush)\n      }\n\n      const updatedCanonicalUrl = canonicalUrlOverride\n        ? createHrefFromUrl(canonicalUrlOverride)\n        : href\n\n      const onlyHashChange =\n        !!hash &&\n        state.canonicalUrl.split('#', 1)[0] ===\n          updatedCanonicalUrl.split('#', 1)[0]\n\n      // If only the hash has changed, the server hasn't sent us any new data. We can just update\n      // the mutable properties responsible for URL and scroll handling and return early.\n      if (onlyHashChange) {\n        mutable.onlyHashChange = true\n        mutable.canonicalUrl = updatedCanonicalUrl\n        mutable.shouldScroll = shouldScroll\n        mutable.hashFragment = hash\n        mutable.scrollableSegments = []\n        return handleMutable(state, mutable)\n      }\n\n      let currentTree = state.tree\n      let currentCache = state.cache\n      let scrollableSegments: FlightSegmentPath[] = []\n      for (const normalizedFlightData of flightData) {\n        const {\n          pathToSegment: flightSegmentPath,\n          seedData,\n          head,\n          isHeadPartial,\n          isRootRender,\n        } = normalizedFlightData\n        let treePatch = normalizedFlightData.tree\n\n        // TODO-APP: remove ''\n        const flightSegmentPathWithLeadingEmpty = ['', ...flightSegmentPath]\n\n        // Create new tree based on the flightSegmentPath and router state patch\n        let newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          flightSegmentPathWithLeadingEmpty,\n          currentTree,\n          treePatch,\n          href\n        )\n\n        // If the tree patch can't be applied to the current tree then we use the tree at time of prefetch\n        // TODO-APP: This should instead fill in the missing pieces in `currentTree` with the data from `treeAtTimeOfPrefetch`, then apply the patch.\n        if (newTree === null) {\n          newTree = applyRouterStatePatchToTree(\n            // TODO-APP: remove ''\n            flightSegmentPathWithLeadingEmpty,\n            treeAtTimeOfPrefetch,\n            treePatch,\n            href\n          )\n        }\n\n        if (newTree !== null) {\n          if (\n            // This is just a paranoid check. When a route is PPRed, the server\n            // will send back a static response that's rendered from\n            // the root. If for some reason it doesn't, we fall back to the\n            // non-PPR implementation.\n            // TODO: We should get rid of the else branch and do all navigations\n            // via startPPRNavigation. The current structure is just\n            // an incremental step.\n            seedData &&\n            isRootRender &&\n            postponed\n          ) {\n            const task = startPPRNavigation(\n              navigatedAt,\n              currentCache,\n              currentTree,\n              treePatch,\n              seedData,\n              head,\n              isHeadPartial,\n              false,\n              scrollableSegments\n            )\n\n            if (task !== null) {\n              if (task.route === null) {\n                // Detected a change to the root layout. Perform an full-\n                // page navigation.\n                return handleExternalUrl(state, mutable, href, pendingPush)\n              }\n              // Use the tree computed by startPPRNavigation instead\n              // of the one computed by applyRouterStatePatchToTree.\n              // TODO: We should remove applyRouterStatePatchToTree\n              // from the PPR path entirely.\n              const patchedRouterState: FlightRouterState = task.route\n              newTree = patchedRouterState\n\n              const newCache = task.node\n              if (newCache !== null) {\n                // We've created a new Cache Node tree that contains a prefetched\n                // version of the next page. This can be rendered instantly.\n                mutable.cache = newCache\n              }\n              const dynamicRequestTree = task.dynamicRequestTree\n              if (dynamicRequestTree !== null) {\n                // The prefetched tree has dynamic holes in it. We initiate a\n                // dynamic request to fill them in.\n                //\n                // Do not block on the result. We'll immediately render the Cache\n                // Node tree and suspend on the dynamic parts. When the request\n                // comes in, we'll fill in missing data and ping React to\n                // re-render. Unlike the lazy fetching model in the non-PPR\n                // implementation, this is modeled as a single React update +\n                // streaming, rather than multiple top-level updates. (However,\n                // even in the new model, we'll still need to sometimes update the\n                // root multiple times per navigation, like if the server sends us\n                // a different response than we expected. For now, we revert back\n                // to the lazy fetching mechanism in that case.)\n                const dynamicRequest = fetchServerResponse(\n                  new URL(updatedCanonicalUrl, url.origin),\n                  {\n                    flightRouterState: dynamicRequestTree,\n                    nextUrl: state.nextUrl,\n                  }\n                )\n\n                listenForDynamicRequest(task, dynamicRequest)\n                // We store the dynamic request on the `lazyData` property of the CacheNode\n                // because we're not going to await the dynamic request here. Since we're not blocking\n                // on the dynamic request, `layout-router` will\n                // task.node.lazyData = dynamicRequest\n              } else {\n                // The prefetched tree does not contain dynamic holes — it's\n                // fully static. We can skip the dynamic request.\n              }\n            } else {\n              // Nothing changed, so reuse the old cache.\n              // TODO: What if the head changed but not any of the segment data?\n              // Is that possible? If so, we should clone the whole tree and\n              // update the head.\n              newTree = treePatch\n            }\n          } else {\n            // The static response does not include any dynamic holes, so\n            // there's no need to do a second request.\n            // TODO: As an incremental step this just reverts back to the\n            // non-PPR implementation. We can simplify this branch further,\n            // given that PPR prefetches are always static and return the whole\n            // tree. Or in the meantime we could factor it out into a\n            // separate function.\n\n            if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n              return handleExternalUrl(state, mutable, href, pendingPush)\n            }\n\n            const cache: CacheNode = createEmptyCacheNode()\n            let applied = false\n\n            if (\n              prefetchValues.status === PrefetchCacheEntryStatus.stale &&\n              !isFirstRead\n            ) {\n              // When we have a stale prefetch entry, we only want to re-use the loading state of the route we're navigating to, to support instant loading navigations\n              // this will trigger a lazy fetch for the actual page data by nulling the `rsc` and `prefetchRsc` values for page data,\n              // while copying over the `loading` for the segment that contains the page data.\n              // We only do this on subsequent reads, as otherwise there'd be no loading data to re-use.\n\n              // We skip this branch if only the hash fragment has changed, as we don't want to trigger a lazy fetch in that case\n              applied = triggerLazyFetchForLeafSegments(\n                cache,\n                currentCache,\n                flightSegmentPath,\n                treePatch\n              )\n              // since we re-used the stale cache's loading state & refreshed the data,\n              // update the `lastUsedTime` so that it can continue to be re-used for the next 30s\n              prefetchValues.lastUsedTime = navigatedAt\n            } else {\n              applied = applyFlightData(\n                navigatedAt,\n                currentCache,\n                cache,\n                normalizedFlightData,\n                prefetchValues\n              )\n            }\n\n            const hardNavigate = shouldHardNavigate(\n              // TODO-APP: remove ''\n              flightSegmentPathWithLeadingEmpty,\n              currentTree\n            )\n\n            if (hardNavigate) {\n              // Copy rsc for the root node of the cache.\n              cache.rsc = currentCache.rsc\n              cache.prefetchRsc = currentCache.prefetchRsc\n\n              invalidateCacheBelowFlightSegmentPath(\n                cache,\n                currentCache,\n                flightSegmentPath\n              )\n              // Ensure the existing cache value is used when the cache was not invalidated.\n              mutable.cache = cache\n            } else if (applied) {\n              mutable.cache = cache\n              // If we applied the cache, we update the \"current cache\" value so any other\n              // segments in the FlightDataPath will be able to reference the updated cache.\n              currentCache = cache\n            }\n\n            for (const subSegment of generateSegmentsFromPatch(treePatch)) {\n              const scrollableSegmentPath = [\n                ...flightSegmentPath,\n                ...subSegment,\n              ]\n              // Filter out the __DEFAULT__ paths as they shouldn't be scrolled to in this case.\n              if (\n                scrollableSegmentPath[scrollableSegmentPath.length - 1] !==\n                DEFAULT_SEGMENT_KEY\n              ) {\n                scrollableSegments.push(scrollableSegmentPath)\n              }\n            }\n          }\n\n          currentTree = newTree\n        }\n      }\n\n      mutable.patchedTree = currentTree\n      mutable.canonicalUrl = updatedCanonicalUrl\n      mutable.scrollableSegments = scrollableSegments\n      mutable.hashFragment = hash\n      mutable.shouldScroll = shouldScroll\n\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n","import type { FlightRouterState } from '../../../../server/app-render/types'\nimport { isInterceptionRouteAppPath } from '../../../../shared/lib/router/utils/interception-routes'\n\nexport function hasInterceptionRouteInCurrentTree([\n  segment,\n  parallelRoutes,\n]: FlightRouterState): boolean {\n  // If we have a dynamic segment, it's marked as an interception route by the presence of the `i` suffix.\n  if (Array.isArray(segment) && (segment[2] === 'di' || segment[2] === 'ci')) {\n    return true\n  }\n\n  // If segment is not an array, apply the existing string-based check\n  if (typeof segment === 'string' && isInterceptionRouteAppPath(segment)) {\n    return true\n  }\n\n  // Iterate through parallelRoutes if they exist\n  if (parallelRoutes) {\n    for (const key in parallelRoutes) {\n      if (hasInterceptionRouteInCurrentTree(parallelRoutes[key])) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","/**\n * @license React\n * scheduler.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  a: for (; 0 < index; ) {\n    var parentIndex = (index - 1) >>> 1,\n      parent = heap[parentIndex];\n    if (0 < compare(parent, node))\n      (heap[parentIndex] = node), (heap[index] = parent), (index = parentIndex);\n    else break a;\n  }\n}\nfunction peek(heap) {\n  return 0 === heap.length ? null : heap[0];\n}\nfunction pop(heap) {\n  if (0 === heap.length) return null;\n  var first = heap[0],\n    last = heap.pop();\n  if (last !== first) {\n    heap[0] = last;\n    a: for (\n      var index = 0, length = heap.length, halfLength = length >>> 1;\n      index < halfLength;\n\n    ) {\n      var leftIndex = 2 * (index + 1) - 1,\n        left = heap[leftIndex],\n        rightIndex = leftIndex + 1,\n        right = heap[rightIndex];\n      if (0 > compare(left, last))\n        rightIndex < length && 0 > compare(right, left)\n          ? ((heap[index] = right),\n            (heap[rightIndex] = last),\n            (index = rightIndex))\n          : ((heap[index] = left),\n            (heap[leftIndex] = last),\n            (index = leftIndex));\n      else if (rightIndex < length && 0 > compare(right, last))\n        (heap[index] = right), (heap[rightIndex] = last), (index = rightIndex);\n      else break a;\n    }\n  }\n  return first;\n}\nfunction compare(a, b) {\n  var diff = a.sortIndex - b.sortIndex;\n  return 0 !== diff ? diff : a.id - b.id;\n}\nexports.unstable_now = void 0;\nif (\"object\" === typeof performance && \"function\" === typeof performance.now) {\n  var localPerformance = performance;\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date,\n    initialTime = localDate.now();\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n}\nvar taskQueue = [],\n  timerQueue = [],\n  taskIdCounter = 1,\n  currentTask = null,\n  currentPriorityLevel = 3,\n  isPerformingWork = !1,\n  isHostCallbackScheduled = !1,\n  isHostTimeoutScheduled = !1,\n  needsPaint = !1,\n  localSetTimeout = \"function\" === typeof setTimeout ? setTimeout : null,\n  localClearTimeout = \"function\" === typeof clearTimeout ? clearTimeout : null,\n  localSetImmediate = \"undefined\" !== typeof setImmediate ? setImmediate : null;\nfunction advanceTimers(currentTime) {\n  for (var timer = peek(timerQueue); null !== timer; ) {\n    if (null === timer.callback) pop(timerQueue);\n    else if (timer.startTime <= currentTime)\n      pop(timerQueue),\n        (timer.sortIndex = timer.expirationTime),\n        push(taskQueue, timer);\n    else break;\n    timer = peek(timerQueue);\n  }\n}\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = !1;\n  advanceTimers(currentTime);\n  if (!isHostCallbackScheduled)\n    if (null !== peek(taskQueue))\n      (isHostCallbackScheduled = !0),\n        isMessageLoopRunning ||\n          ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());\n    else {\n      var firstTimer = peek(timerQueue);\n      null !== firstTimer &&\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n}\nvar isMessageLoopRunning = !1,\n  taskTimeoutID = -1,\n  frameInterval = 5,\n  startTime = -1;\nfunction shouldYieldToHost() {\n  return needsPaint\n    ? !0\n    : exports.unstable_now() - startTime < frameInterval\n      ? !1\n      : !0;\n}\nfunction performWorkUntilDeadline() {\n  needsPaint = !1;\n  if (isMessageLoopRunning) {\n    var currentTime = exports.unstable_now();\n    startTime = currentTime;\n    var hasMoreWork = !0;\n    try {\n      a: {\n        isHostCallbackScheduled = !1;\n        isHostTimeoutScheduled &&\n          ((isHostTimeoutScheduled = !1),\n          localClearTimeout(taskTimeoutID),\n          (taskTimeoutID = -1));\n        isPerformingWork = !0;\n        var previousPriorityLevel = currentPriorityLevel;\n        try {\n          b: {\n            advanceTimers(currentTime);\n            for (\n              currentTask = peek(taskQueue);\n              null !== currentTask &&\n              !(\n                currentTask.expirationTime > currentTime && shouldYieldToHost()\n              );\n\n            ) {\n              var callback = currentTask.callback;\n              if (\"function\" === typeof callback) {\n                currentTask.callback = null;\n                currentPriorityLevel = currentTask.priorityLevel;\n                var continuationCallback = callback(\n                  currentTask.expirationTime <= currentTime\n                );\n                currentTime = exports.unstable_now();\n                if (\"function\" === typeof continuationCallback) {\n                  currentTask.callback = continuationCallback;\n                  advanceTimers(currentTime);\n                  hasMoreWork = !0;\n                  break b;\n                }\n                currentTask === peek(taskQueue) && pop(taskQueue);\n                advanceTimers(currentTime);\n              } else pop(taskQueue);\n              currentTask = peek(taskQueue);\n            }\n            if (null !== currentTask) hasMoreWork = !0;\n            else {\n              var firstTimer = peek(timerQueue);\n              null !== firstTimer &&\n                requestHostTimeout(\n                  handleTimeout,\n                  firstTimer.startTime - currentTime\n                );\n              hasMoreWork = !1;\n            }\n          }\n          break a;\n        } finally {\n          (currentTask = null),\n            (currentPriorityLevel = previousPriorityLevel),\n            (isPerformingWork = !1);\n        }\n        hasMoreWork = void 0;\n      }\n    } finally {\n      hasMoreWork\n        ? schedulePerformWorkUntilDeadline()\n        : (isMessageLoopRunning = !1);\n    }\n  }\n}\nvar schedulePerformWorkUntilDeadline;\nif (\"function\" === typeof localSetImmediate)\n  schedulePerformWorkUntilDeadline = function () {\n    localSetImmediate(performWorkUntilDeadline);\n  };\nelse if (\"undefined\" !== typeof MessageChannel) {\n  var channel = new MessageChannel(),\n    port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n  schedulePerformWorkUntilDeadline = function () {\n    port.postMessage(null);\n  };\n} else\n  schedulePerformWorkUntilDeadline = function () {\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = localSetTimeout(function () {\n    callback(exports.unstable_now());\n  }, ms);\n}\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\nexports.unstable_cancelCallback = function (task) {\n  task.callback = null;\n};\nexports.unstable_forceFrameRate = function (fps) {\n  0 > fps || 125 < fps\n    ? console.error(\n        \"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"\n      )\n    : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);\n};\nexports.unstable_getCurrentPriorityLevel = function () {\n  return currentPriorityLevel;\n};\nexports.unstable_next = function (eventHandler) {\n  switch (currentPriorityLevel) {\n    case 1:\n    case 2:\n    case 3:\n      var priorityLevel = 3;\n      break;\n    default:\n      priorityLevel = currentPriorityLevel;\n  }\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n};\nexports.unstable_requestPaint = function () {\n  needsPaint = !0;\n};\nexports.unstable_runWithPriority = function (priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      break;\n    default:\n      priorityLevel = 3;\n  }\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n};\nexports.unstable_scheduleCallback = function (\n  priorityLevel,\n  callback,\n  options\n) {\n  var currentTime = exports.unstable_now();\n  \"object\" === typeof options && null !== options\n    ? ((options = options.delay),\n      (options =\n        \"number\" === typeof options && 0 < options\n          ? currentTime + options\n          : currentTime))\n    : (options = currentTime);\n  switch (priorityLevel) {\n    case 1:\n      var timeout = -1;\n      break;\n    case 2:\n      timeout = 250;\n      break;\n    case 5:\n      timeout = 1073741823;\n      break;\n    case 4:\n      timeout = 1e4;\n      break;\n    default:\n      timeout = 5e3;\n  }\n  timeout = options + timeout;\n  priorityLevel = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: options,\n    expirationTime: timeout,\n    sortIndex: -1\n  };\n  options > currentTime\n    ? ((priorityLevel.sortIndex = options),\n      push(timerQueue, priorityLevel),\n      null === peek(taskQueue) &&\n        priorityLevel === peek(timerQueue) &&\n        (isHostTimeoutScheduled\n          ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))\n          : (isHostTimeoutScheduled = !0),\n        requestHostTimeout(handleTimeout, options - currentTime)))\n    : ((priorityLevel.sortIndex = timeout),\n      push(taskQueue, priorityLevel),\n      isHostCallbackScheduled ||\n        isPerformingWork ||\n        ((isHostCallbackScheduled = !0),\n        isMessageLoopRunning ||\n          ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline())));\n  return priorityLevel;\n};\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = function (callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n};\n","import type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../server/app-render/types'\nimport { DEFAULT_SEGMENT_KEY } from '../../../shared/lib/segment'\nimport { getNextFlightSegmentPath } from '../../flight-data-helpers'\nimport { matchSegment } from '../match-segments'\nimport { addRefreshMarkerToActiveParallelSegments } from './refetch-inactive-parallel-segments'\n\n/**\n * Deep merge of the two router states. Parallel route keys are preserved if the patch doesn't have them.\n */\nfunction applyPatch(\n  initialTree: FlightRouterState,\n  patchTree: FlightRouterState\n): FlightRouterState {\n  const [initialSegment, initialParallelRoutes] = initialTree\n  const [patchSegment, patchParallelRoutes] = patchTree\n\n  // if the applied patch segment is __DEFAULT__ then it can be ignored in favor of the initial tree\n  // this is because the __DEFAULT__ segment is used as a placeholder on navigation\n  if (\n    patchSegment === DEFAULT_SEGMENT_KEY &&\n    initialSegment !== DEFAULT_SEGMENT_KEY\n  ) {\n    return initialTree\n  }\n\n  if (matchSegment(initialSegment, patchSegment)) {\n    const newParallelRoutes: FlightRouterState[1] = {}\n    for (const key in initialParallelRoutes) {\n      const isInPatchTreeParallelRoutes =\n        typeof patchParallelRoutes[key] !== 'undefined'\n      if (isInPatchTreeParallelRoutes) {\n        newParallelRoutes[key] = applyPatch(\n          initialParallelRoutes[key],\n          patchParallelRoutes[key]\n        )\n      } else {\n        newParallelRoutes[key] = initialParallelRoutes[key]\n      }\n    }\n\n    for (const key in patchParallelRoutes) {\n      if (newParallelRoutes[key]) {\n        continue\n      }\n\n      newParallelRoutes[key] = patchParallelRoutes[key]\n    }\n\n    const tree: FlightRouterState = [initialSegment, newParallelRoutes]\n\n    // Copy over the existing tree\n    if (initialTree[2]) {\n      tree[2] = initialTree[2]\n    }\n\n    if (initialTree[3]) {\n      tree[3] = initialTree[3]\n    }\n\n    if (initialTree[4]) {\n      tree[4] = initialTree[4]\n    }\n\n    return tree\n  }\n\n  return patchTree\n}\n\n/**\n * Apply the router state from the Flight response, but skip patching default segments.\n * Useful for patching the router cache when navigating, where we persist the existing default segment if there isn't a new one.\n * Creates a new router state tree.\n */\nexport function applyRouterStatePatchToTree(\n  flightSegmentPath: FlightSegmentPath,\n  flightRouterState: FlightRouterState,\n  treePatch: FlightRouterState,\n  path: string\n): FlightRouterState | null {\n  const [segment, parallelRoutes, url, refetch, isRootLayout] =\n    flightRouterState\n\n  // Root refresh\n  if (flightSegmentPath.length === 1) {\n    const tree: FlightRouterState = applyPatch(flightRouterState, treePatch)\n\n    addRefreshMarkerToActiveParallelSegments(tree, path)\n\n    return tree\n  }\n\n  const [currentSegment, parallelRouteKey] = flightSegmentPath\n\n  // Tree path returned from the server should always match up with the current tree in the browser\n  if (!matchSegment(currentSegment, segment)) {\n    return null\n  }\n\n  const lastSegment = flightSegmentPath.length === 2\n\n  let parallelRoutePatch\n  if (lastSegment) {\n    parallelRoutePatch = applyPatch(parallelRoutes[parallelRouteKey], treePatch)\n  } else {\n    parallelRoutePatch = applyRouterStatePatchToTree(\n      getNextFlightSegmentPath(flightSegmentPath),\n      parallelRoutes[parallelRouteKey],\n      treePatch,\n      path\n    )\n\n    if (parallelRoutePatch === null) {\n      return null\n    }\n  }\n\n  const tree: FlightRouterState = [\n    flightSegmentPath[0],\n    {\n      ...parallelRoutes,\n      [parallelRouteKey]: parallelRoutePatch,\n    },\n    url,\n    refetch,\n  ]\n\n  // Current segment is the root layout\n  if (isRootLayout) {\n    tree[4] = true\n  }\n\n  addRefreshMarkerToActiveParallelSegments(tree, path)\n\n  return tree\n}\n","import React from 'react'\n\nexport const HeadManagerContext: React.Context<{\n  updateHead?: (state: any) => void\n  mountedInstances?: any\n  updateScripts?: (state: any) => void\n  scripts?: any\n  getIsSsr?: () => boolean\n\n  // Used in app directory, to render script tags as server components.\n  appDir?: boolean\n  nonce?: string\n}> = React.createContext({})\n\nif (process.env.NODE_ENV !== 'production') {\n  HeadManagerContext.displayName = 'HeadManagerContext'\n}\n","/**\n * This module imports the client instrumentation hook from the project root.\n *\n * The `private-next-instrumentation-client` module is automatically aliased to\n * the `instrumentation-client.ts` file in the project root by webpack or turbopack.\n */ \"use strict\";\nif (process.env.NODE_ENV === 'development') {\n    const measureName = 'Client Instrumentation Hook';\n    const startTime = performance.now();\n    // eslint-disable-next-line @next/internal/typechecked-require -- Not a module.\n    module.exports = require('private-next-instrumentation-client');\n    const endTime = performance.now();\n    const duration = endTime - startTime;\n    // Using 16ms threshold as it represents one frame (1000ms/60fps)\n    // This helps identify if the instrumentation hook initialization\n    // could potentially cause frame drops during development.\n    const THRESHOLD = 16;\n    if (duration > THRESHOLD) {\n        console.log(`[${measureName}] Slow execution detected: ${duration.toFixed(0)}ms (Note: Code download overhead is not included in this measurement)`);\n    }\n} else {\n    // eslint-disable-next-line @next/internal/typechecked-require -- Not a module.\n    module.exports = require('private-next-instrumentation-client');\n}\n\n//# sourceMappingURL=require-instrumentation-client.js.map"],"names":["createInitialRouterState","initialSeedData","extractPathFromFlightRouterState","navigatedAt","initialFlightData","initialCanonicalUrlParts","initialParallelRoutes","location","couldBeIntercepted","postponed","prerendered","initialCanonicalUrl","join","normalizedFlightData","getFlightDataPartsFromPath","tree","initialTree","seedData","head","initialHead","cache","lazyData","rsc","prefetchRsc","prefetchHead","parallelRoutes","loading","canonicalUrl","createHrefFromUrl","addRefreshMarkerToActiveParallelSegments","prefetchCache","Map","size","fillLazyItemsTillLeafWithHead","undefined","initialState","pushRef","pendingPush","mpaNavigation","preserveCustomHistoryState","focusAndScrollRef","apply","onlyHashChange","hashFragment","segmentPaths","nextUrl","pathname","process","url","URL","search","origin","createSeededPrefetchCacheEntry","data","flightData","staleTime","STATIC_STALETIME_MS","kind","PrefetchKind","FULL","AUTO","applyFlightData","existingCache","prefetchEntry","treePatch","isRootRender","fillCacheWithNewSubTreeData","ensureLeadingSlash","path","startsWith","reportGlobalError","reportError","globalThis","console","error","fillCacheWithNewSubTreeDataButOnlyLoading","fillCacheHelper","newCache","fillLazyItems","segmentPath","cacheNodeSeedData","newCacheNode","existingCacheNode","i","length","parallelRouteKey","segment","isLastEntry","cacheKey","createRouterCacheKey","existingChildSegmentMap","get","childSegmentMap","set","existingChildCacheNode","childCacheNode","incomingSegment","PAGE_SEGMENT_KEY","invalidateCacheByRouterState","unstable_rethrow","isNextRouterError","isBailoutToCSRError","Error","GracefulDegradeBoundary","Component","getDerivedStateFromError","_","hasError","componentDidMount","htmlNode","htmlRef","current","state","Object","htmlAttributes","forEach","key","value","setAttribute","render","rootHtml","document","documentElement","innerHTML","getDomNodeAttributes","node","result","attributes","attr","name","html","ref","suppressHydrationWarning","dangerouslySetInnerHTML","__html","props","children","constructor","createRef","hasBasePath","pathHasPrefix","basePath","matchSegment","existingSegment","setCacheBustingSearchParam","setCacheBustingSearchParamWithHash","headers","computeCacheBustingSearchParam","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_SEGMENT_PREFETCH_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_URL","hash","existingSearch","pairs","rawQuery","slice","split","filter","pair","NEXT_RSC_UNION_QUERY","push","getObjectClassLabel","prototype","toString","call","isPlainObject","getPrototypeOf","hasOwnProperty","isRedirectError","isHTTPAccessFallbackError","withoutSearchParameters","Array","isArray","AppRouterAnnouncer","ANNOUNCER_TYPE","portalNode","setPortalNode","useState","useEffect","getAnnouncerNode","announcer","existingAnnouncer","getElementsByName","shadowRoot","childNodes","container","createElement","style","cssText","ariaLive","id","ANNOUNCER_ID","role","attachShadow","mode","appendChild","body","getElementsByTagName","isConnected","removeChild","routeAnnouncement","setRouteAnnouncement","previousTitle","useRef","currentTitle","title","pageHeader","querySelector","innerText","textContent","createPortal","createRenderSearchParamsFromClient","CachedSearchParams","WeakMap","underlyingSearchParams","cachedSearchParams","promise","Promise","resolve","keys","wellKnownProperties","has","prop","prefetchHeader","segmentPrefetchHeader","stateTreeHeader","nextUrlHeader","hexHash","IDLE_LINK_STATUS","PENDING_LINK_STATUS","mountFormInstance","mountLinkInstance","onLinkVisibilityChanged","onNavigationIntent","pingVisibleLinks","setLinkForCurrentNavigation","unmountLinkForCurrentNavigation","unmountPrefetchableInstance","linkForMostRecentNavigation","pending","link","startTransition","setOptimisticLinkStatus","prefetchable","prefetchableAndVisible","Set","observer","IntersectionObserver","handleIntersect","entry","entries","isVisible","intersectionRatio","target","rootMargin","observeVisibility","element","instance","existingInstance","observe","coercePrefetchableUrl","href","createPrefetchURL","reportErrorFn","router","prefetchEnabled","prefetchURL","prefetchTask","prefetchHref","delete","cancelPrefetchTask","unobserve","add","rescheduleLinkPrefetch","PrefetchPriority","Default","unstable_upgradeToDynamicPrefetch","Intent","priority","existingPrefetchTask","doPrefetch","prefetch","catch","task","isPrefetchTaskDirty","createCacheKey","scheduleSegmentPrefetchTask","useRouterBFCache","activeTree","activeStateKey","prevActiveEntry","setPrevActiveEntry","stateKey","next","newActiveEntry","n","oldEntry","clonedEntry","MAX_BF_CACHE_ENTRIES","warnOnce","createRenderParamsFromClient","CachedParams","clientParams","cachedParams","underlyingParams","DYNAMIC_STALETIME_MS","getOrCreatePrefetchCacheEntry","prunePrefetchCache","createPrefetchCacheKeyImpl","includeSearchParams","prefix","pathnameFromUrl","INTERCEPTION_CACHE_KEY_MARKER","createPrefetchCacheKey","allowAliasing","existingCacheEntry","getExistingCacheEntry","maybeNextUrl","TEMPORARY","cacheKeyWithParams","cacheKeyWithoutParams","cacheKeyToUse","existingEntry","isAliased","aliased","entryWithoutParams","includes","cacheEntry","values","status","getPrefetchEntryCacheStatus","then","isFullPrefetch","prefetchResponse","some","createLazyPrefetchEntry","prefetchCacheKey","treeAtTimeOfPrefetch","prefetchTime","Date","now","lastUsedTime","PrefetchCacheEntryStatus","fresh","prefetchQueue","enqueue","fetchServerResponse","flightRouterState","prefetchKind","newCacheKey","prefixExistingPrefetchCacheEntry","existingCacheKey","prefetchCacheEntry","expired","Number","stale","reusable","disableSmoothScrollDuringRouteTransition","fn","options","htmlElement","dataset","scrollBehavior","existing","dontForceLayout","getClientRects","isNavigatingToNewRootLayout","currentTree","nextTree","currentTreeSegment","nextTreeSegment","currentTreeChild","nextTreeChild","INTERCEPTION_ROUTE_MARKERS","extractInterceptionRouteInformation","isInterceptionRouteAppPath","find","m","interceptingRoute","marker","interceptedRoute","normalizeAppPath","concat","splitInterceptingRoute","OuterLayoutRouter","__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE","ReactDOM","rectProperties","topOfElementInViewport","viewportHeight","rect","getBoundingClientRect","top","InnerScrollAndFocusHandler","React","handlePotentialScroll","componentDidUpdate","every","index","scrollRefSegmentPath","domNode","getHashFragmentDomNode","getElementById","internal_reactDOMfindDOMNode","findDOMNode","Element","HTMLElement","getComputedStyle","position","item","nextElementSibling","scrollIntoView","clientHeight","scrollTop","focus","ScrollAndFocusHandler","context","useContext","GlobalLayoutRouterContext","InnerLayoutRouter","cacheNode","fullTree","resolvedPrefetchRsc","useDeferredValue","resolvedRsc","use","refetchTree","walkAddRefetch","segmentPathToWalk","treeToRecreate","isLast","subTree","includeNextUrl","hasInterceptionRouteInCurrentTree","dispatchAppRouterAction","type","ACTION_SERVER_PATCH","previousTree","serverResponse","unresolvedThenable","subtree","LayoutRouterContext","Provider","parentTree","parentCacheNode","parentSegmentPath","LoadingBoundary","loadingModuleData","promiseForLoading","loadingRsc","loadingStyles","loadingScripts","Suspense","fallback","RenderChildren","parallelRouterKey","errorStyles","errorScripts","templateStyles","templateScripts","template","notFound","forbidden","unauthorized","gracefullyDegrade","segmentViewBoundaries","parentParallelRoutes","segmentMap","parentTreeSegment","activeSegment","bfcacheEntry","newLazyCacheNode","ErrorBoundaryComponent","ErrorBoundary","child","TemplateContext","errorComponent","HTTPAccessFallbackBoundary","RedirectBoundary","getSegmentValue","ACTION_HEADER","FLIGHT_HEADERS","NEXT_ACTION_NOT_FOUND_HEADER","NEXT_DID_POSTPONE_HEADER","NEXT_HMR_REFRESH_HASH_COOKIE","NEXT_HMR_REFRESH_HEADER","NEXT_IS_PRERENDER_HEADER","NEXT_REWRITTEN_PATH_HEADER","NEXT_REWRITTEN_QUERY_HEADER","NEXT_ROUTER_STALE_TIME_HEADER","RSC_CONTENT_TYPE_HEADER","RSC_HEADER","HTTPAccessFallbackErrorBoundary","componentDidCatch","triggeredStatus","getAccessFallbackHTTPStatus","getDerivedStateFromProps","previousPathname","errorComponents","HTTPAccessErrorStatus","NOT_FOUND","FORBIDDEN","UNAUTHORIZED","isNotFound","isForbidden","isUnauthorized","meta","content","useUntrackedPathname","missingSlots","MissingSlotContext","hasErrorFallback","abortTask","listenForDynamicRequest","startPPRNavigation","updateCacheNodeOnPopstateRestoration","oldCacheNode","routerState","routerStateChildren","oldParallelRoutes","newParallelRoutes","routerStateChild","segmentChild","segmentKeyChild","oldSegmentMapChild","oldCacheNodeChild","newCacheNodeChild","newSegmentMapChild","shouldUsePrefetch","isDeferredRsc","MPA_NAVIGATION_TASK","route","dynamicRequestTree","oldRouterState","newRouterState","prefetchData","isPrefetchHeadPartial","isSamePageNavigation","scrollableSegmentsResult","updateCacheNodeOnNavigation","didFindRootLayout","oldRouterStateChildren","newRouterStateChildren","prefetchDataChildren","isRootLayout","prefetchParallelRoutes","patchedRouterStateChildren","taskChildren","needsDynamicRequest","dynamicRequestTreeChildren","taskChild","newRouterStateChild","oldRouterStateChild","prefetchDataChild","newSegmentChild","newSegmentPathChild","newSegmentKeyChild","oldSegmentChild","DEFAULT_SEGMENT_KEY","spawnReusedTask","reusedRouterState","beginRenderingNewRouteTree","taskChildRoute","dynamicRequestTreeChild","patchRouterStateWithNewChildren","possiblyPartialPrefetchHead","createCacheNodeOnNavigation","cacheNodeNavigatedAt","isLeafSegment","spawnPendingTask","existingCacheNodeChildren","cacheNodeChildren","existingSegmentMapChild","segmentPathChild","baseRouterState","newChildren","clone","createPendingCacheNode","maybePrefetchRsc","maybePrefetchLoading","createDeferredRsc","responsePromise","serverRouterState","dynamicData","dynamicHead","writeDynamicDataIntoPendingTask","rootTask","taskSegment","finishTaskUsingDynamicDataPayload","taskNode","finishPendingCacheNode","taskState","serverState","taskStateChildren","serverStateChildren","dataChildren","taskStateChild","serverStateChild","dataChild","segmentMapChild","taskSegmentChild","taskSegmentKeyChild","cacheNodeChild","abortPendingCacheNode","dynamicSegmentData","serverChildren","dynamicDataChildren","serverRouterStateChild","dynamicDataChild","reject","DEFERRED","Symbol","tag","pendingRsc","res","rej","fulfilledRsc","rejectedRsc","reason","addSearchParamsToPageSegments","handleAliasedPrefetchEntry","mutable","applied","currentCache","hasLoadingComponentInSeedData","fromEntries","searchParams","pathToSegment","flightSegmentPathWithLeadingEmpty","newTree","applyRouterStatePatchToTree","createEmptyCacheNode","fillNewTreeWithOnlyLoadingSegments","isLastSegment","parallelRouteState","segmentForParallelRoute","parallelSeedData","existingParallelRoutes","patchedTree","handleMutable","rest","addSearchParamsIfPageSegment","updatedParallelRoutes","parallelRoute","normalizeRscURL","reduce","segments","isGroupSegment","replace","AsyncMetadataOutlet","MetadataOutlet","digest","refreshReducer","action","canonicalUrlOverride","handleExternalUrl","handleSegmentMismatch","canonicalUrlOverrideHref","refreshInactiveParallelSegments","updatedTree","updatedCache","existingParallelRoutesCacheNode","parallelRouteCacheNode","refetchMarker","fetchedSegments","refreshInactiveParallelSegmentsImpl","rootTree","refetchPath","fetchPromises","fetchPromise","flightDataPath","parallelFetchPromise","all","getRedirectError","getRedirectStatusCodeFromError","getRedirectTypeFromError","getURLFromRedirectError","permanentRedirect","redirect","actionAsyncStorage","statusCode","require","RedirectStatusCode","TemporaryRedirect","REDIRECT_ERROR_CODE","getStore","isAction","RedirectType","PermanentRedirect","at","isNotUndefined","shouldScroll","changedPath","computeChangedPath","scrollableSegments","decodeURIComponent","RedirectErrorBoundary","HandleRedirect","reset","redirectType","useRouter","setState","normalizePathTrailingSlash","query","parsePath","test","removeTrailingSlash","endsWith","HTTP_ERROR_FALLBACK_ERROR_CODE","encodeURIPath","file","map","encodeURIComponent","p","getSelectedParams","params","isDynamicParameter","segmentValue","segmentToPathname","normalizeSegments","acc","removeLeadingSlash","childrenPath","childPath","treeA","treeB","computeChangedPathImpl","segmentA","parallelRoutesA","segmentB","parallelRoutesB","normalizedSegmentA","normalizedSegmentB","prefetchReducer","PromiseQueue","prefetchReducerImpl","identityReducerWhenSegmentCacheIsEnabled","addPathPrefix","removeBasePath","findSourceMapURL","useActionQueue","dispatch","actionQueue","isThenable","clearCacheNodeDataForSegmentPath","flightSegmentPath","getNextFlightSegmentPath","djb2Hash","str","charCodeAt","char","HTML_LIMITED_BOT_UA_RE","HTML_LIMITED_BOT_UA_RE_STRING","getBotType","isBot","HEADLESS_BROWSER_BOT_UA_RE","source","isHtmlLimitedBotUA","userAgent","isDomBotUA","BailoutToCSRError","BAILOUT_TO_CSR","err","ClientSegmentRoot","slots","ReadonlyURLSearchParams","ServerInsertedHTMLContext","useParams","usePathname","useSearchParams","useSelectedLayoutSegment","useSelectedLayoutSegments","useServerInsertedHTML","useDynamicRouteParams","SearchParamsContext","useMemo","readonlySearchParams","PathnameContext","AppRouterContext","PathParamsContext","getSelectedLayoutSegmentPath","first","selectedLayoutSegments","selectedLayoutSegment","IconMark","HandleISRError","workAsyncStorage","store","isRevalidate","isStaticGeneration","createContext","reducer","clientReducer","serverReducer","ACTION_NAVIGATE","navigateReducer","serverPatchReducer","ACTION_RESTORE","restoreReducer","ACTION_REFRESH","ACTION_HMR_REFRESH","hmrRefreshReducer","ACTION_PREFETCH","ACTION_SERVER_ACTION","serverActionReducer","findHeadInCache","findHeadInCacheImpl","keyPrefix","isLastItem","parallelRoutesKeys","unshift","childParallelRoutes","ErrorBoundaryHandler","this","appBootstrap","hydrate","scripts","self","src","el","onload","onerror","setTimeout","window","version","env","appDir","MetadataBoundary","OutletBoundary","ViewportBoundary","NameSpace","METADATA_BOUNDARY_NAME","VIEWPORT_BOUNDARY_NAME","OUTLET_BOUNDARY_NAME","DIGEST","isRecoverableError","onRecoverableError","recoverableErrors","WeakSet","errorInfo","cause","isError","assignLocation","urlBase","addBasePath","callback","addInsertedServerHTMLCallback","includeHash","createFetch","createFromNextReadableStream","urlToUrlWithoutFlightMarker","createFromReadableStream","createFromReadableStreamBrowser","urlWithoutFlightParameters","doMpaNavigation","abortController","AbortController","prepareFlightRouterStateForRequest","isHmrRefresh","fetchPriority","signal","responseUrl","redirected","contentType","interception","staleTimeHeaderSeconds","parseInt","isFlightResponse","flightStream","createUnclosingPrefetchStream","reader","originalFlightStream","getReader","ReadableStream","pull","controller","done","read","response","getAppBuildId","b","normalizeFlightData","f","S","aborted","fetchUrl","browserResponse","fetch","credentials","fetchOptions","rscResponse","ok","callServer","addEventListener","abort","actionId","actionArgs","hmrRefreshReducerNoop","_action","hmrRefreshReducerImpl","shouldHardNavigate","currentSegment","required","handleHardNavError","useNavFailureHandler","__pendingUrl","describeHasCheckingStringProperty","describeStringPropertyAccess","isDefinitelyAValidIdentifier","JSON","stringify","stringifiedProp","instrumentationHooks","getAccessFallbackErrorTypeByStatus","ALLOWED_CODES","httpStatus","initialServerDataBuffer","initialServerDataWriter","appElement","encoder","TextEncoder","initialServerDataLoaded","initialServerDataFlushed","initialFormStateData","nextServerDataCallback","seg","encode","binaryString","atob","decodedChunk","Uint8Array","DOMContentLoaded","close","readyState","nextServerDataLoadingGlobal","__next_f","initialServerResponse","start","readable","ctr","val","desiredSize","ServerRoot","pendingActionQueue","initialRSCPayload","AppRouter","navigator","globalErrorState","G","assetPrefix","StrictModeIfEnabled","StrictMode","Root","reactRootOptions","onDefaultTransitionIndicator","onCaughtError","onUncaughtError","setAppBuildId","initialTimestamp","createMutableActionQueue","c","s","reactEl","HeadManagerContext","ReactDOMClient","createRoot","hydrateRoot","formState","globalBuildId","buildId","dispatchNavigateAction","dispatchTraverseAction","getCurrentAppRouterState","publicAppRouterInstance","runRemainingActions","runAction","needsRefresh","prevState","payload","actionResult","handleResult","nextState","discarded","globalActionQueue","dispatchAction","resolvers","deferredPromise","newAction","last","onRouterTransitionStart","getProfilingHookForOnNavigationStart","navigateType","linkInstanceRef","isExternalUrl","isExternalURL","locationSearch","back","history","forward","getAppRouterActionQueue","scroll","refresh","hmrRefresh","isParallelRouteSegment","isPageSegment","stringifiedQuery","styles","fontFamily","height","textAlign","display","flexDirection","alignItems","justifyContent","text","fontSize","fontWeight","lineHeight","margin","div","h2","hostname","extractInfoFromServerReferenceId","infoByte","argMask","usedArgs","bit","bitPosition","typeBit","hasRestArgs","restArgs","omitUnusedArgs","args","info","filteredArgs","InvariantError","message","isHeadPartial","flightDataPathLength","stripClientOnlyDataFromFlightRouterState","_url","refreshMarker","hasLoadingBoundary","cleanedSegment","stripSearchParamsFromPageSegment","cleanedParallelRoutes","childState","shouldPreserveRefreshMarker","createFromFetch","createFromFetchBrowser","fetchServerAction","revalidatedParts","actionFlightData","temporaryReferences","createTemporaryReferenceSet","encodeReply","method","Accept","unrecognizedActionHeader","redirectHeader","_redirectType","isPrerender","revalidatedHeader","parse","paths","cookie","e","NO_REVALIDATED_PARTS","redirectLocation","isRscResponse","a","redirectHref","actionRevalidated","Boolean","RenderFromTemplateContext","globalMutable","HistoryUpdater","appRouterState","useInsertionEffect","historyState","__NA","__PRIVATE_NEXTJS_INTERNALS_TREE","pushState","replaceState","copyNextJsInternalHistoryState","currentState","Head","headCacheNode","Router","globalError","handlePageShow","event","persisted","pendingMpaPath","removeEventListener","handleUnhandledRedirect","preventDefault","assign","originalPushState","bind","originalReplaceState","applyUrlFromHistoryPushReplace","_unused","_N","onPopState","reload","matchingHead","pathParams","layoutRouterContext","globalLayoutRouterContext","headKey","RuntimeStyles","DefaultGlobalError","runtimeStyles","runtimeStyleChanged","forceUpdate","renderedStylesSize","changed","rel","precedence","dplId","_N_E_STYLE_LOAD","len","cb","devToolErrorMod","decorateDevError","handleClientError","originConsoleError","thrownValue","isImplicitErrorBoundary","errorBoundaryComponent","errorBoundary","DefaultErrorBoundary","hashIndex","indexOf","queryIndex","hasQuery","substring","getChunkScriptFilename","__webpack_require__","u","NavigationResultTag","getCurrentCacheVersion","navigate","reschedulePrefetchTask","revalidateEntireCache","schedulePrefetchTask","notEnabled","ReadonlyURLSearchParamsError","URLSearchParams","append","sort","hasReusablePrefetch","seedNode","errorCode","destination","isNaN","promiseFn","taskResolve","taskReject","taskPromise","enqueueResult","bump","findIndex","bumpedItem","splice","maxConcurrency","forced","shift","treeToRestore","oldCache","ClientPageRoot","clientSearchParams","invalidateCacheBelowFlightSegmentPath","prefetchValues","isFirstRead","urlWithCanonicalPathname","updatedCanonicalUrl","patchedRouterState","dynamicRequest","subSegment","triggerLazyFetchForLeafSegments","appliedPatch","segmentPathsToFill","generateSegmentsFromPatch","scrollableSegmentPath","flightRouterPatch","childSegment","parallelRoutePatch","refetch","applyPatch","lastSegment","patchTree","initialSegment","patchSegment","patchParallelRoutes"],"sourceRoot":"","ignoreList":[5,6,18,23,27,41,42,43,48,53,63,73,75,85,98,101,105,110,116,131,135,138]}