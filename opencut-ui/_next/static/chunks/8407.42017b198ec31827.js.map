{"version":3,"file":"static/chunks/8407.42017b198ec31827.js","mappings":"8PAUA,OAAqB,0BACrB,EAAkC,QAAe,EACjD,wBACA,SACA,MAAoB,QAAG,EACvB,QAAgB,mBAAsB,IAAe,UACrD,CAAK,EACL,EAA2B,QAAiB,GAC5C,EAAyB,OAAe,GACxC,EAAqC,QAAG,GAAG,EACvC,QAAS,MACb,yBACA,4CACA,CAAO,CACP,CAAK,EACL,MAA8B,QAAQ,KACtC,oBACA,oDAGA,EAAuB,QAAQ,KAC/B,kBAEA,YACA,qBACA,SACA,iCACA,4CACA,oCACA,EACA,CACA,EACA,YACA,yBACA,+BACA,oBACA,CAAO,EACP,SACA,EACA,YACA,yBACA,+BACA,oBACA,CAAO,EACP,SACA,EACA,YACA,yBACA,2BACA,oBACA,CAAO,EACP,SACA,EACA,OACA,wBACA,EACA,EAAiB,QAAG,GACpB,GACA,CACA,mBACA,mBACA,SACA,CAAO,CACP,CACA,oBACA,mBACA,SACA,CAAO,CACP,CACA,0BACA,mBACA,UACA,qCAEA,CACA,cACa,QAAS,GAAI,QAAW,CAAC,IAAW,EACjD,kBACA,uBACA,CAAO,EACP,OAAgB,QAAO,MACb,QAAW,CAAC,IAAS,EAC/B,gCACA,6DACA,4CACA,CAAW,sCACX,SAA8B,QAAS,GAAI,QAAW,CAAC,QAAK,CAAC,GAAO,GACpE,MACA,gBACA,mBACA,gCACA,CAAW,EACX,QAAqB,QAAO,MACd,QAAkB,aACf,QAAS,KAAQ,QAAkB,CAAC,IAAQ,MAAQ,QAAU,aACtD,QAAS,GAAI,QAAkB,OACxD,WACmB,EACC,QAAkB,aAAe,QAAe,CAAC,QAAK,+CACtD,QAAe,KAAO,QAAe,YACzD,IACiB,MACjB,EACc,QAAkB,UAChB,QAAW,CAAC,QAAK,CAAC,GAAM,GACxC,qCACA,YACA,kBACA,SACA,CAAiB,mBACjB,EACA,EACA,GACA,EAAW,EAAK,QAAkB,QAClC,EACA,QAAiB,QAAO,MACd,QAAW,CAAC,QAAK,CAAC,GAAS,GACrC,MAAmB,QAAK,eACxB,kBACA,aACA,gBACW,EACX,QAAqB,QAAO,MACd,QAAW,CAAC,QAAK,CAAC,GAAM,GACtC,+BACA,YACA,YACA,CAAe,EACf,KAAsB,QAAO,KACX,QAAe,CAAC,QAAe,qBAC/B,QAAK,iCAAyD,SAAS,GAAI,QAAW,CAAC,QAAK,CAAC,GAAG,GAClH,MACA,YACA,EAAmB,EAAK,QAAkB,QAC1C,EACA,GACA,CAAe,eACD,QAAW,CAAC,QAAK,CAAC,GAAM,GAAK,IAC3C,2CACA,wCACA,EAAiB,EACjB,OAAwB,QAAO,MACb,QAAW,CAAC,QAAK,CAAC,GAAM,GAC1C,wBACA,QACA,qBACA,wBACA,MACA,yCACA,EAAqB,CACF,EACD,QAAW,CAAC,QAAK,CAAC,GAAW,GAC/C,eACA,MACA,OACA,CAAmB,WACnB,EACA,KAAsB,QAAO,KACX,QAAW,CAAC,QAAK,CAAC,GAAY,GAChD,gCACA,gDACA,SAA8B,QAAK,qCACnC,UACA,CAAmB,yDACnB,EACA,GACA,CAAe,EACf,EACA,GACA,CAAW,wBACX,EACA,GACA,EAAO,CAEP,CACA,CAAC","sources":["webpack://_N_E/../../node_modules/.bun/@comfyorg+comfyui-frontend@.+comfyorg-comfyui-frontend-1.26.2.tgz+af8430f8c26f463e/node_modules/@comfyorg/comfyui-frontend/lib/ExtensionPanel-DgXcjLsI.js"],"sourcesContent":["import { defineComponent, ref, onMounted, computed, openBlock, createBlock, withCtx, createVNode, unref, createElementVNode, createElementBlock, Fragment, renderList, toDisplayString, createTextVNode, createCommentVNode } from \"vue\";\nimport { FilterMatchMode } from \"@primevue/core/api\";\nimport Button from \"primevue/button\";\nimport Column from \"primevue/column\";\nimport ContextMenu from \"primevue/contextmenu\";\nimport DataTable from \"primevue/datatable\";\nimport Message from \"primevue/message\";\nimport Tag from \"primevue/tag\";\nimport ToggleSwitch from \"primevue/toggleswitch\";\nimport { am as useExtensionStore, P as useSettingStore, a7 as _sfc_main$1, al as SearchBox } from \"./lib-index-DdMUP0fe.js\";\nconst _hoisted_1 = { class: \"flex justify-end\" };\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  __name: \"ExtensionPanel\",\n  setup(__props) {\n    const filters = ref({\n      global: { value: \"\", matchMode: FilterMatchMode.CONTAINS }\n    });\n    const extensionStore = useExtensionStore();\n    const settingStore = useSettingStore();\n    const editingEnabledExtensions = ref({});\n    onMounted(() => {\n      extensionStore.extensions.forEach((ext) => {\n        editingEnabledExtensions.value[ext.name] = extensionStore.isExtensionEnabled(ext.name);\n      });\n    });\n    const changedExtensions = computed(() => {\n      return extensionStore.extensions.filter(\n        (ext) => editingEnabledExtensions.value[ext.name] !== extensionStore.isExtensionEnabled(ext.name)\n      );\n    });\n    const hasChanges = computed(() => {\n      return changedExtensions.value.length > 0;\n    });\n    const updateExtensionStatus = async () => {\n      const editingDisabledExtensionNames = Object.entries(\n        editingEnabledExtensions.value\n      ).filter(([_, enabled]) => !enabled).map(([name]) => name);\n      await settingStore.set(\"Comfy.Extension.Disabled\", [\n        ...extensionStore.inactiveDisabledExtensionNames,\n        ...editingDisabledExtensionNames\n      ]);\n    };\n    const enableAllExtensions = async () => {\n      extensionStore.extensions.forEach((ext) => {\n        if (extensionStore.isExtensionReadOnly(ext.name)) return;\n        editingEnabledExtensions.value[ext.name] = true;\n      });\n      await updateExtensionStatus();\n    };\n    const disableAllExtensions = async () => {\n      extensionStore.extensions.forEach((ext) => {\n        if (extensionStore.isExtensionReadOnly(ext.name)) return;\n        editingEnabledExtensions.value[ext.name] = false;\n      });\n      await updateExtensionStatus();\n    };\n    const disableThirdPartyExtensions = async () => {\n      extensionStore.extensions.forEach((ext) => {\n        if (extensionStore.isCoreExtension(ext.name)) return;\n        editingEnabledExtensions.value[ext.name] = false;\n      });\n      await updateExtensionStatus();\n    };\n    const applyChanges = () => {\n      window.location.reload();\n    };\n    const menu = ref();\n    const contextMenuItems = [\n      {\n        label: \"Enable All\",\n        icon: \"pi pi-check\",\n        command: enableAllExtensions\n      },\n      {\n        label: \"Disable All\",\n        icon: \"pi pi-times\",\n        command: disableAllExtensions\n      },\n      {\n        label: \"Disable 3rd Party\",\n        icon: \"pi pi-times\",\n        command: disableThirdPartyExtensions,\n        disabled: !extensionStore.hasThirdPartyExtensions\n      }\n    ];\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(_sfc_main$1, {\n        value: \"Extension\",\n        class: \"extension-panel\"\n      }, {\n        header: withCtx(() => [\n          createVNode(SearchBox, {\n            modelValue: filters.value[\"global\"].value,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event) => filters.value[\"global\"].value = $event),\n            placeholder: _ctx.$t(\"g.searchExtensions\") + \"...\"\n          }, null, 8, [\"modelValue\", \"placeholder\"]),\n          hasChanges.value ? (openBlock(), createBlock(unref(Message), {\n            key: 0,\n            severity: \"info\",\n            \"pt:text\": \"w-full\",\n            class: \"max-h-96 overflow-y-auto\"\n          }, {\n            default: withCtx(() => [\n              createElementVNode(\"ul\", null, [\n                (openBlock(true), createElementBlock(Fragment, null, renderList(changedExtensions.value, (ext) => {\n                  return openBlock(), createElementBlock(\"li\", {\n                    key: ext.name\n                  }, [\n                    createElementVNode(\"span\", null, toDisplayString(unref(extensionStore).isExtensionEnabled(ext.name) ? \"[-]\" : \"[+]\"), 1),\n                    createTextVNode(\" \" + toDisplayString(ext.name), 1)\n                  ]);\n                }), 128))\n              ]),\n              createElementVNode(\"div\", _hoisted_1, [\n                createVNode(unref(Button), {\n                  label: _ctx.$t(\"g.reloadToApplyChanges\"),\n                  outlined: \"\",\n                  severity: \"danger\",\n                  onClick: applyChanges\n                }, null, 8, [\"label\"])\n              ])\n            ]),\n            _: 1\n          })) : createCommentVNode(\"\", true)\n        ]),\n        default: withCtx(() => [\n          createVNode(unref(DataTable), {\n            value: unref(extensionStore).extensions,\n            \"striped-rows\": \"\",\n            size: \"small\",\n            filters: filters.value\n          }, {\n            default: withCtx(() => [\n              createVNode(unref(Column), {\n                header: _ctx.$t(\"g.extensionName\"),\n                sortable: \"\",\n                field: \"name\"\n              }, {\n                body: withCtx((slotProps) => [\n                  createTextVNode(toDisplayString(slotProps.data.name) + \" \", 1),\n                  unref(extensionStore).isCoreExtension(slotProps.data.name) ? (openBlock(), createBlock(unref(Tag), {\n                    key: 0,\n                    value: \"Core\"\n                  })) : createCommentVNode(\"\", true)\n                ]),\n                _: 1\n              }, 8, [\"header\"]),\n              createVNode(unref(Column), { pt: {\n                headerCell: \"flex items-center justify-end\",\n                bodyCell: \"flex items-center justify-end\"\n              } }, {\n                header: withCtx(() => [\n                  createVNode(unref(Button), {\n                    icon: \"pi pi-ellipsis-h\",\n                    text: \"\",\n                    severity: \"secondary\",\n                    onClick: _cache[1] || (_cache[1] = ($event) => {\n                      var _a;\n                      return (_a = menu.value) == null ? void 0 : _a.show($event);\n                    })\n                  }),\n                  createVNode(unref(ContextMenu), {\n                    ref_key: \"menu\",\n                    ref: menu,\n                    model: contextMenuItems\n                  }, null, 512)\n                ]),\n                body: withCtx((slotProps) => [\n                  createVNode(unref(ToggleSwitch), {\n                    modelValue: editingEnabledExtensions.value[slotProps.data.name],\n                    \"onUpdate:modelValue\": ($event) => editingEnabledExtensions.value[slotProps.data.name] = $event,\n                    disabled: unref(extensionStore).isExtensionReadOnly(slotProps.data.name),\n                    onChange: updateExtensionStatus\n                  }, null, 8, [\"modelValue\", \"onUpdate:modelValue\", \"disabled\"])\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          }, 8, [\"value\", \"filters\"])\n        ]),\n        _: 1\n      });\n    };\n  }\n});\nexport {\n  _sfc_main as default\n};\n//# sourceMappingURL=ExtensionPanel-DgXcjLsI.js.map\n"],"names":[],"sourceRoot":"","ignoreList":[0]}