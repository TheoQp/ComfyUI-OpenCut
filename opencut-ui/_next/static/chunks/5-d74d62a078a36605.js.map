{"version":3,"file":"static/chunks/5-d74d62a078a36605.js","mappings":"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","sources":["webpack://_N_E/../src/tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { createSlottable } from '@radix-ui/react-slot';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P = {}> = P & { __scopeTooltip?: Scope };\nconst [createTooltipContext, createTooltipScope] = createContextScope('Tooltip', [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipProvider\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROVIDER_NAME = 'TooltipProvider';\nconst DEFAULT_DELAY_DURATION = 700;\nconst TOOLTIP_OPEN = 'tooltip.open';\n\ntype TooltipProviderContextValue = {\n  isOpenDelayedRef: React.MutableRefObject<boolean>;\n  delayDuration: number;\n  onOpen(): void;\n  onClose(): void;\n  onPointerInTransitChange(inTransit: boolean): void;\n  isPointerInTransitRef: React.MutableRefObject<boolean>;\n  disableHoverableContent: boolean;\n};\n\nconst [TooltipProviderContextProvider, useTooltipProviderContext] =\n  createTooltipContext<TooltipProviderContextValue>(PROVIDER_NAME);\n\ninterface TooltipProviderProps {\n  children: React.ReactNode;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n  /**\n   * When `true`, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.\n   * @defaultValue false\n   */\n  disableHoverableContent?: boolean;\n}\n\nconst TooltipProvider: React.FC<TooltipProviderProps> = (\n  props: ScopedProps<TooltipProviderProps>\n) => {\n  const {\n    __scopeTooltip,\n    delayDuration = DEFAULT_DELAY_DURATION,\n    skipDelayDuration = 300,\n    disableHoverableContent = false,\n    children,\n  } = props;\n  const isOpenDelayedRef = React.useRef(true);\n  const isPointerInTransitRef = React.useRef(false);\n  const skipDelayTimerRef = React.useRef(0);\n\n  React.useEffect(() => {\n    const skipDelayTimer = skipDelayTimerRef.current;\n    return () => window.clearTimeout(skipDelayTimer);\n  }, []);\n\n  return (\n    <TooltipProviderContextProvider\n      scope={__scopeTooltip}\n      isOpenDelayedRef={isOpenDelayedRef}\n      delayDuration={delayDuration}\n      onOpen={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        isOpenDelayedRef.current = false;\n      }, [])}\n      onClose={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        skipDelayTimerRef.current = window.setTimeout(\n          () => (isOpenDelayedRef.current = true),\n          skipDelayDuration\n        );\n      }, [skipDelayDuration])}\n      isPointerInTransitRef={isPointerInTransitRef}\n      onPointerInTransitChange={React.useCallback((inTransit: boolean) => {\n        isPointerInTransitRef.current = inTransit;\n      }, [])}\n      disableHoverableContent={disableHoverableContent}\n    >\n      {children}\n    </TooltipProviderContextProvider>\n  );\n};\n\nTooltipProvider.displayName = PROVIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Tooltip\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOOLTIP_NAME = 'Tooltip';\n\ntype TooltipContextValue = {\n  contentId: string;\n  open: boolean;\n  stateAttribute: 'closed' | 'delayed-open' | 'instant-open';\n  trigger: TooltipTriggerElement | null;\n  onTriggerChange(trigger: TooltipTriggerElement | null): void;\n  onTriggerEnter(): void;\n  onTriggerLeave(): void;\n  onOpen(): void;\n  onClose(): void;\n  disableHoverableContent: boolean;\n};\n\nconst [TooltipContextProvider, useTooltipContext] =\n  createTooltipContext<TooltipContextValue>(TOOLTIP_NAME);\n\ninterface TooltipProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  /**\n   * The duration from when the pointer enters the trigger until the tooltip gets opened. This will\n   * override the prop with the same name passed to Provider.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * When `true`, trying to hover the content will result in the tooltip closing as the pointer leaves the trigger.\n   * @defaultValue false\n   */\n  disableHoverableContent?: boolean;\n}\n\nconst Tooltip: React.FC<TooltipProps> = (props: ScopedProps<TooltipProps>) => {\n  const {\n    __scopeTooltip,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    disableHoverableContent: disableHoverableContentProp,\n    delayDuration: delayDurationProp,\n  } = props;\n  const providerContext = useTooltipProviderContext(TOOLTIP_NAME, props.__scopeTooltip);\n  const popperScope = usePopperScope(__scopeTooltip);\n  const [trigger, setTrigger] = React.useState<HTMLButtonElement | null>(null);\n  const contentId = useId();\n  const openTimerRef = React.useRef(0);\n  const disableHoverableContent =\n    disableHoverableContentProp ?? providerContext.disableHoverableContent;\n  const delayDuration = delayDurationProp ?? providerContext.delayDuration;\n  const wasOpenDelayedRef = React.useRef(false);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: (open) => {\n      if (open) {\n        providerContext.onOpen();\n\n        // as `onChange` is called within a lifecycle method we\n        // avoid dispatching via `dispatchDiscreteCustomEvent`.\n        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));\n      } else {\n        providerContext.onClose();\n      }\n      onOpenChange?.(open);\n    },\n    caller: TOOLTIP_NAME,\n  });\n  const stateAttribute = React.useMemo(() => {\n    return open ? (wasOpenDelayedRef.current ? 'delayed-open' : 'instant-open') : 'closed';\n  }, [open]);\n\n  const handleOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = 0;\n    wasOpenDelayedRef.current = false;\n    setOpen(true);\n  }, [setOpen]);\n\n  const handleClose = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = 0;\n    setOpen(false);\n  }, [setOpen]);\n\n  const handleDelayedOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => {\n      wasOpenDelayedRef.current = true;\n      setOpen(true);\n      openTimerRef.current = 0;\n    }, delayDuration);\n  }, [delayDuration, setOpen]);\n\n  React.useEffect(() => {\n    return () => {\n      if (openTimerRef.current) {\n        window.clearTimeout(openTimerRef.current);\n        openTimerRef.current = 0;\n      }\n    };\n  }, []);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <TooltipContextProvider\n        scope={__scopeTooltip}\n        contentId={contentId}\n        open={open}\n        stateAttribute={stateAttribute}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        onTriggerEnter={React.useCallback(() => {\n          if (providerContext.isOpenDelayedRef.current) handleDelayedOpen();\n          else handleOpen();\n        }, [providerContext.isOpenDelayedRef, handleDelayedOpen, handleOpen])}\n        onTriggerLeave={React.useCallback(() => {\n          if (disableHoverableContent) {\n            handleClose();\n          } else {\n            // Clear the timer in case the pointer leaves the trigger before the tooltip is opened.\n            window.clearTimeout(openTimerRef.current);\n            openTimerRef.current = 0;\n          }\n        }, [handleClose, disableHoverableContent])}\n        onOpen={handleOpen}\n        onClose={handleClose}\n        disableHoverableContent={disableHoverableContent}\n      >\n        {children}\n      </TooltipContextProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nTooltip.displayName = TOOLTIP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'TooltipTrigger';\n\ntype TooltipTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface TooltipTriggerProps extends PrimitiveButtonProps {}\n\nconst TooltipTrigger = React.forwardRef<TooltipTriggerElement, TooltipTriggerProps>(\n  (props: ScopedProps<TooltipTriggerProps>, forwardedRef) => {\n    const { __scopeTooltip, ...triggerProps } = props;\n    const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);\n    const providerContext = useTooltipProviderContext(TRIGGER_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const ref = React.useRef<TooltipTriggerElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref, context.onTriggerChange);\n    const isPointerDownRef = React.useRef(false);\n    const hasPointerMoveOpenedRef = React.useRef(false);\n    const handlePointerUp = React.useCallback(() => (isPointerDownRef.current = false), []);\n\n    React.useEffect(() => {\n      return () => document.removeEventListener('pointerup', handlePointerUp);\n    }, [handlePointerUp]);\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          // We purposefully avoid adding `type=button` here because tooltip triggers are also\n          // commonly anchors and the anchor `type` attribute signifies MIME type.\n          aria-describedby={context.open ? context.contentId : undefined}\n          data-state={context.stateAttribute}\n          {...triggerProps}\n          ref={composedRefs}\n          onPointerMove={composeEventHandlers(props.onPointerMove, (event) => {\n            if (event.pointerType === 'touch') return;\n            if (\n              !hasPointerMoveOpenedRef.current &&\n              !providerContext.isPointerInTransitRef.current\n            ) {\n              context.onTriggerEnter();\n              hasPointerMoveOpenedRef.current = true;\n            }\n          })}\n          onPointerLeave={composeEventHandlers(props.onPointerLeave, () => {\n            context.onTriggerLeave();\n            hasPointerMoveOpenedRef.current = false;\n          })}\n          onPointerDown={composeEventHandlers(props.onPointerDown, () => {\n            if (context.open) {\n              context.onClose();\n            }\n            isPointerDownRef.current = true;\n            document.addEventListener('pointerup', handlePointerUp, { once: true });\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => {\n            if (!isPointerDownRef.current) context.onOpen();\n          })}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          onClick={composeEventHandlers(props.onClick, context.onClose)}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nTooltipTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'TooltipPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createTooltipContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface TooltipPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipPortal: React.FC<TooltipPortalProps> = (props: ScopedProps<TooltipPortalProps>) => {\n  const { __scopeTooltip, forceMount, children, container } = props;\n  const context = useTooltipContext(PORTAL_NAME, __scopeTooltip);\n  return (\n    <PortalProvider scope={__scopeTooltip} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nTooltipPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'TooltipContent';\n\ntype TooltipContentElement = TooltipContentImplElement;\ninterface TooltipContentProps extends TooltipContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipContent = React.forwardRef<TooltipContentElement, TooltipContentProps>(\n  (props: ScopedProps<TooltipContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeTooltip);\n    const { forceMount = portalContext.forceMount, side = 'top', ...contentProps } = props;\n    const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.disableHoverableContent ? (\n          <TooltipContentImpl side={side} {...contentProps} ref={forwardedRef} />\n        ) : (\n          <TooltipContentHoverable side={side} {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\ntype Point = { x: number; y: number };\ntype Polygon = Point[];\n\ntype TooltipContentHoverableElement = TooltipContentImplElement;\ninterface TooltipContentHoverableProps extends TooltipContentImplProps {}\n\nconst TooltipContentHoverable = React.forwardRef<\n  TooltipContentHoverableElement,\n  TooltipContentHoverableProps\n>((props: ScopedProps<TooltipContentHoverableProps>, forwardedRef) => {\n  const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n  const providerContext = useTooltipProviderContext(CONTENT_NAME, props.__scopeTooltip);\n  const ref = React.useRef<TooltipContentHoverableElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const [pointerGraceArea, setPointerGraceArea] = React.useState<Polygon | null>(null);\n\n  const { trigger, onClose } = context;\n  const content = ref.current;\n\n  const { onPointerInTransitChange } = providerContext;\n\n  const handleRemoveGraceArea = React.useCallback(() => {\n    setPointerGraceArea(null);\n    onPointerInTransitChange(false);\n  }, [onPointerInTransitChange]);\n\n  const handleCreateGraceArea = React.useCallback(\n    (event: PointerEvent, hoverTarget: HTMLElement) => {\n      const currentTarget = event.currentTarget as HTMLElement;\n      const exitPoint = { x: event.clientX, y: event.clientY };\n      const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());\n      const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);\n      const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());\n      const graceArea = getHull([...paddedExitPoints, ...hoverTargetPoints]);\n      setPointerGraceArea(graceArea);\n      onPointerInTransitChange(true);\n    },\n    [onPointerInTransitChange]\n  );\n\n  React.useEffect(() => {\n    return () => handleRemoveGraceArea();\n  }, [handleRemoveGraceArea]);\n\n  React.useEffect(() => {\n    if (trigger && content) {\n      const handleTriggerLeave = (event: PointerEvent) => handleCreateGraceArea(event, content);\n      const handleContentLeave = (event: PointerEvent) => handleCreateGraceArea(event, trigger);\n\n      trigger.addEventListener('pointerleave', handleTriggerLeave);\n      content.addEventListener('pointerleave', handleContentLeave);\n      return () => {\n        trigger.removeEventListener('pointerleave', handleTriggerLeave);\n        content.removeEventListener('pointerleave', handleContentLeave);\n      };\n    }\n  }, [trigger, content, handleCreateGraceArea, handleRemoveGraceArea]);\n\n  React.useEffect(() => {\n    if (pointerGraceArea) {\n      const handleTrackPointerGrace = (event: PointerEvent) => {\n        const target = event.target as HTMLElement;\n        const pointerPosition = { x: event.clientX, y: event.clientY };\n        const hasEnteredTarget = trigger?.contains(target) || content?.contains(target);\n        const isPointerOutsideGraceArea = !isPointInPolygon(pointerPosition, pointerGraceArea);\n\n        if (hasEnteredTarget) {\n          handleRemoveGraceArea();\n        } else if (isPointerOutsideGraceArea) {\n          handleRemoveGraceArea();\n          onClose();\n        }\n      };\n      document.addEventListener('pointermove', handleTrackPointerGrace);\n      return () => document.removeEventListener('pointermove', handleTrackPointerGrace);\n    }\n  }, [trigger, content, pointerGraceArea, onClose, handleRemoveGraceArea]);\n\n  return <TooltipContentImpl {...props} ref={composedRefs} />;\n});\n\nconst [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] =\n  createTooltipContext(TOOLTIP_NAME, { isInside: false });\n\ntype TooltipContentImplElement = React.ComponentRef<typeof PopperPrimitive.Content>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface TooltipContentImplProps extends Omit<PopperContentProps, 'onPlaced'> {\n  /**\n   * A more descriptive label for accessibility purpose\n   */\n  'aria-label'?: string;\n\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `Tooltip`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n}\n\nconst Slottable = createSlottable('TooltipContent');\n\nconst TooltipContentImpl = React.forwardRef<TooltipContentImplElement, TooltipContentImplProps>(\n  (props: ScopedProps<TooltipContentImplProps>, forwardedRef) => {\n    const {\n      __scopeTooltip,\n      children,\n      'aria-label': ariaLabel,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      ...contentProps\n    } = props;\n    const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const { onClose } = context;\n\n    // Close this tooltip if another one opens\n    React.useEffect(() => {\n      document.addEventListener(TOOLTIP_OPEN, onClose);\n      return () => document.removeEventListener(TOOLTIP_OPEN, onClose);\n    }, [onClose]);\n\n    // Close the tooltip if the trigger is scrolled\n    React.useEffect(() => {\n      if (context.trigger) {\n        const handleScroll = (event: Event) => {\n          const target = event.target as HTMLElement;\n          if (target?.contains(context.trigger)) onClose();\n        };\n        window.addEventListener('scroll', handleScroll, { capture: true });\n        return () => window.removeEventListener('scroll', handleScroll, { capture: true });\n      }\n    }, [context.trigger, onClose]);\n\n    return (\n      <DismissableLayer\n        asChild\n        disableOutsidePointerEvents={false}\n        onEscapeKeyDown={onEscapeKeyDown}\n        onPointerDownOutside={onPointerDownOutside}\n        onFocusOutside={(event) => event.preventDefault()}\n        onDismiss={onClose}\n      >\n        <PopperPrimitive.Content\n          data-state={context.stateAttribute}\n          {...popperScope}\n          {...contentProps}\n          ref={forwardedRef}\n          style={{\n            ...contentProps.style,\n            // re-namespace exposed content custom properties\n            ...{\n              '--radix-tooltip-content-transform-origin': 'var(--radix-popper-transform-origin)',\n              '--radix-tooltip-content-available-width': 'var(--radix-popper-available-width)',\n              '--radix-tooltip-content-available-height': 'var(--radix-popper-available-height)',\n              '--radix-tooltip-trigger-width': 'var(--radix-popper-anchor-width)',\n              '--radix-tooltip-trigger-height': 'var(--radix-popper-anchor-height)',\n            },\n          }}\n        >\n          <Slottable>{children}</Slottable>\n          <VisuallyHiddenContentContextProvider scope={__scopeTooltip} isInside={true}>\n            <VisuallyHiddenPrimitive.Root id={context.contentId} role=\"tooltip\">\n              {ariaLabel || children}\n            </VisuallyHiddenPrimitive.Root>\n          </VisuallyHiddenContentContextProvider>\n        </PopperPrimitive.Content>\n      </DismissableLayer>\n    );\n  }\n);\n\nTooltipContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'TooltipArrow';\n\ntype TooltipArrowElement = React.ComponentRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface TooltipArrowProps extends PopperArrowProps {}\n\nconst TooltipArrow = React.forwardRef<TooltipArrowElement, TooltipArrowProps>(\n  (props: ScopedProps<TooltipArrowProps>, forwardedRef) => {\n    const { __scopeTooltip, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeTooltip);\n    const visuallyHiddenContentContext = useVisuallyHiddenContentContext(\n      ARROW_NAME,\n      __scopeTooltip\n    );\n    // if the arrow is inside the `VisuallyHidden`, we don't want to render it all to\n    // prevent issues in positioning the arrow due to the duplicate\n    return visuallyHiddenContentContext.isInside ? null : (\n      <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\n    );\n  }\n);\n\nTooltipArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype Side = NonNullable<TooltipContentProps['side']>;\n\nfunction getExitSideFromRect(point: Point, rect: DOMRect): Side {\n  const top = Math.abs(rect.top - point.y);\n  const bottom = Math.abs(rect.bottom - point.y);\n  const right = Math.abs(rect.right - point.x);\n  const left = Math.abs(rect.left - point.x);\n\n  switch (Math.min(top, bottom, right, left)) {\n    case left:\n      return 'left';\n    case right:\n      return 'right';\n    case top:\n      return 'top';\n    case bottom:\n      return 'bottom';\n    default:\n      throw new Error('unreachable');\n  }\n}\n\nfunction getPaddedExitPoints(exitPoint: Point, exitSide: Side, padding = 5) {\n  const paddedExitPoints: Point[] = [];\n  switch (exitSide) {\n    case 'top':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y + padding },\n        { x: exitPoint.x + padding, y: exitPoint.y + padding }\n      );\n      break;\n    case 'bottom':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y - padding },\n        { x: exitPoint.x + padding, y: exitPoint.y - padding }\n      );\n      break;\n    case 'left':\n      paddedExitPoints.push(\n        { x: exitPoint.x + padding, y: exitPoint.y - padding },\n        { x: exitPoint.x + padding, y: exitPoint.y + padding }\n      );\n      break;\n    case 'right':\n      paddedExitPoints.push(\n        { x: exitPoint.x - padding, y: exitPoint.y - padding },\n        { x: exitPoint.x - padding, y: exitPoint.y + padding }\n      );\n      break;\n  }\n  return paddedExitPoints;\n}\n\nfunction getPointsFromRect(rect: DOMRect) {\n  const { top, right, bottom, left } = rect;\n  return [\n    { x: left, y: top },\n    { x: right, y: top },\n    { x: right, y: bottom },\n    { x: left, y: bottom },\n  ];\n}\n\n// Determine if a point is inside of a polygon.\n// Based on https://github.com/substack/point-in-polygon\nfunction isPointInPolygon(point: Point, polygon: Polygon) {\n  const { x, y } = point;\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const ii = polygon[i]!;\n    const jj = polygon[j]!;\n    const xi = ii.x;\n    const yi = ii.y;\n    const xj = jj.x;\n    const yj = jj.y;\n\n    // prettier-ignore\n    const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n}\n\n// Returns a new array of points representing the convex hull of the given set of points.\n// https://www.nayuki.io/page/convex-hull-algorithm\nfunction getHull<P extends Point>(points: Readonly<Array<P>>): Array<P> {\n  const newPoints: Array<P> = points.slice();\n  newPoints.sort((a: Point, b: Point) => {\n    if (a.x < b.x) return -1;\n    else if (a.x > b.x) return +1;\n    else if (a.y < b.y) return -1;\n    else if (a.y > b.y) return +1;\n    else return 0;\n  });\n  return getHullPresorted(newPoints);\n}\n\n// Returns the convex hull, assuming that each points[i] <= points[i + 1]. Runs in O(n) time.\nfunction getHullPresorted<P extends Point>(points: Readonly<Array<P>>): Array<P> {\n  if (points.length <= 1) return points.slice();\n\n  const upperHull: Array<P> = [];\n  for (let i = 0; i < points.length; i++) {\n    const p = points[i]!;\n    while (upperHull.length >= 2) {\n      const q = upperHull[upperHull.length - 1]!;\n      const r = upperHull[upperHull.length - 2]!;\n      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) upperHull.pop();\n      else break;\n    }\n    upperHull.push(p);\n  }\n  upperHull.pop();\n\n  const lowerHull: Array<P> = [];\n  for (let i = points.length - 1; i >= 0; i--) {\n    const p = points[i]!;\n    while (lowerHull.length >= 2) {\n      const q = lowerHull[lowerHull.length - 1]!;\n      const r = lowerHull[lowerHull.length - 2]!;\n      if ((q.x - r.x) * (p.y - r.y) >= (q.y - r.y) * (p.x - r.x)) lowerHull.pop();\n      else break;\n    }\n    lowerHull.push(p);\n  }\n  lowerHull.pop();\n\n  if (\n    upperHull.length === 1 &&\n    lowerHull.length === 1 &&\n    upperHull[0]!.x === lowerHull[0]!.x &&\n    upperHull[0]!.y === lowerHull[0]!.y\n  ) {\n    return upperHull;\n  } else {\n    return upperHull.concat(lowerHull);\n  }\n}\n\nconst Provider = TooltipProvider;\nconst Root = Tooltip;\nconst Trigger = TooltipTrigger;\nconst Portal = TooltipPortal;\nconst Content = TooltipContent;\nconst Arrow = TooltipArrow;\n\nexport {\n  createTooltipScope,\n  //\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipContent,\n  TooltipArrow,\n  //\n  Provider,\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Arrow,\n};\nexport type {\n  TooltipProviderProps,\n  TooltipProps,\n  TooltipTriggerProps,\n  TooltipPortalProps,\n  TooltipContentProps,\n  TooltipArrowProps,\n};\n"],"names":["open","Root","Content","Arrow"],"sourceRoot":"","ignoreList":[]}